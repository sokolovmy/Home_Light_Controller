
FW.v0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e81c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a20  0800e92c  0800e92c  0001e92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f34c  0800f34c  000203f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800f34c  0800f34c  000203f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f34c  0800f34c  000203f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f34c  0800f34c  0001f34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f350  0800f350  0001f350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f0  20000000  0800f354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cc4  200003f0  0800f744  000203f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040b4  0800f744  000240b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d96b  00000000  00000000  00020419  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005f72  00000000  00000000  0004dd84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ea0  00000000  00000000  00053cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c00  00000000  00000000  00055b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f43f  00000000  00000000  00057798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001efff  00000000  00000000  00076bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c53c  00000000  00000000  00095bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000869c  00000000  00000000  00132190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003f0 	.word	0x200003f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e914 	.word	0x0800e914

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003f4 	.word	0x200003f4
 800014c:	0800e914 	.word	0x0800e914

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <MX_FREERTOS_Init+0x18>)
 800017a:	2100      	movs	r1, #0
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <MX_FREERTOS_Init+0x1c>)
 800017e:	f007 fdef 	bl	8007d60 <osThreadNew>
 8000182:	4602      	mov	r2, r0
 8000184:	4b03      	ldr	r3, [pc, #12]	; (8000194 <MX_FREERTOS_Init+0x20>)
 8000186:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}
 800018c:	0800f130 	.word	0x0800f130
 8000190:	08000199 	.word	0x08000199
 8000194:	2000322c 	.word	0x2000322c

08000198 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80001a0:	f00a fa3e 	bl	800a620 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  loadFromFlash();
 80001a4:	f00b fa66 	bl	800b674 <loadFromFlash>
  consInit();
 80001a8:	f00c f846 	bl	800c238 <consInit>
  initIO();
 80001ac:	f00c ff2c 	bl	800d008 <initIO>
  /* Infinite loop */
  int i = 40;
 80001b0:	2328      	movs	r3, #40	; 0x28
 80001b2:	60fb      	str	r3, [r7, #12]
  int btn = 1;
 80001b4:	2301      	movs	r3, #1
 80001b6:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  if (--i == 0) {
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	3b01      	subs	r3, #1
 80001bc:	60fb      	str	r3, [r7, #12]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d10e      	bne.n	80001e2 <StartDefaultTask+0x4a>
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80001c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001c8:	4829      	ldr	r0, [pc, #164]	; (8000270 <StartDefaultTask+0xd8>)
 80001ca:	f000 ff22 	bl	8001012 <HAL_GPIO_TogglePin>
		  osDelay(50);
 80001ce:	2032      	movs	r0, #50	; 0x32
 80001d0:	f007 fe70 	bl	8007eb4 <osDelay>
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80001d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d8:	4825      	ldr	r0, [pc, #148]	; (8000270 <StartDefaultTask+0xd8>)
 80001da:	f000 ff1a 	bl	8001012 <HAL_GPIO_TogglePin>
		  i = 40;
 80001de:	2328      	movs	r3, #40	; 0x28
 80001e0:	60fb      	str	r3, [r7, #12]
	  }
	btn = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);
 80001e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e6:	4822      	ldr	r0, [pc, #136]	; (8000270 <StartDefaultTask+0xd8>)
 80001e8:	f000 fee4 	bl	8000fb4 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	60bb      	str	r3, [r7, #8]
    osDelay(50);
 80001f0:	2032      	movs	r0, #50	; 0x32
 80001f2:	f007 fe5f 	bl	8007eb4 <osDelay>
    if (btn == 0 && HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == 0){
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d1dd      	bne.n	80001b8 <StartDefaultTask+0x20>
 80001fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000200:	481b      	ldr	r0, [pc, #108]	; (8000270 <StartDefaultTask+0xd8>)
 8000202:	f000 fed7 	bl	8000fb4 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d1d5      	bne.n	80001b8 <StartDefaultTask+0x20>
    	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000212:	4817      	ldr	r0, [pc, #92]	; (8000270 <StartDefaultTask+0xd8>)
 8000214:	f000 fee5 	bl	8000fe2 <HAL_GPIO_WritePin>
    	osDelay(250);
 8000218:	20fa      	movs	r0, #250	; 0xfa
 800021a:	f007 fe4b 	bl	8007eb4 <osDelay>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800021e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000222:	4813      	ldr	r0, [pc, #76]	; (8000270 <StartDefaultTask+0xd8>)
 8000224:	f000 fef5 	bl	8001012 <HAL_GPIO_TogglePin>
    	osDelay(250);
 8000228:	20fa      	movs	r0, #250	; 0xfa
 800022a:	f007 fe43 	bl	8007eb4 <osDelay>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800022e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000232:	480f      	ldr	r0, [pc, #60]	; (8000270 <StartDefaultTask+0xd8>)
 8000234:	f000 feed 	bl	8001012 <HAL_GPIO_TogglePin>
    	osDelay(250);
 8000238:	20fa      	movs	r0, #250	; 0xfa
 800023a:	f007 fe3b 	bl	8007eb4 <osDelay>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800023e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000242:	480b      	ldr	r0, [pc, #44]	; (8000270 <StartDefaultTask+0xd8>)
 8000244:	f000 fee5 	bl	8001012 <HAL_GPIO_TogglePin>
    	osDelay(250);
 8000248:	20fa      	movs	r0, #250	; 0xfa
 800024a:	f007 fe33 	bl	8007eb4 <osDelay>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800024e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000252:	4807      	ldr	r0, [pc, #28]	; (8000270 <StartDefaultTask+0xd8>)
 8000254:	f000 fedd 	bl	8001012 <HAL_GPIO_TogglePin>
    	osDelay(250);
 8000258:	20fa      	movs	r0, #250	; 0xfa
 800025a:	f007 fe2b 	bl	8007eb4 <osDelay>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800025e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <StartDefaultTask+0xd8>)
 8000264:	f000 fed5 	bl	8001012 <HAL_GPIO_TogglePin>
    	//osDelay(25);
    	btn = 1;
 8000268:	2301      	movs	r3, #1
 800026a:	60bb      	str	r3, [r7, #8]
	  if (--i == 0) {
 800026c:	e7a4      	b.n	80001b8 <StartDefaultTask+0x20>
 800026e:	bf00      	nop
 8000270:	40010800 	.word	0x40010800

08000274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000288:	4b33      	ldr	r3, [pc, #204]	; (8000358 <MX_GPIO_Init+0xe4>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a32      	ldr	r2, [pc, #200]	; (8000358 <MX_GPIO_Init+0xe4>)
 800028e:	f043 0320 	orr.w	r3, r3, #32
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b30      	ldr	r3, [pc, #192]	; (8000358 <MX_GPIO_Init+0xe4>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0320 	and.w	r3, r3, #32
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a0:	4b2d      	ldr	r3, [pc, #180]	; (8000358 <MX_GPIO_Init+0xe4>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a2c      	ldr	r2, [pc, #176]	; (8000358 <MX_GPIO_Init+0xe4>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b2a      	ldr	r3, [pc, #168]	; (8000358 <MX_GPIO_Init+0xe4>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0304 	and.w	r3, r3, #4
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b8:	4b27      	ldr	r3, [pc, #156]	; (8000358 <MX_GPIO_Init+0xe4>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a26      	ldr	r2, [pc, #152]	; (8000358 <MX_GPIO_Init+0xe4>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b24      	ldr	r3, [pc, #144]	; (8000358 <MX_GPIO_Init+0xe4>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0308 	and.w	r3, r3, #8
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN_LOAD_Pin|IN_CLK_INH_Pin|OUT_PUSH_DATA_Pin|LED_GREEN_Pin
 80002d0:	2200      	movs	r2, #0
 80002d2:	f240 710e 	movw	r1, #1806	; 0x70e
 80002d6:	4821      	ldr	r0, [pc, #132]	; (800035c <MX_GPIO_Init+0xe8>)
 80002d8:	f000 fe83 	bl	8000fe2 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_ENABLE_GPIO_Port, OUT_ENABLE_Pin, GPIO_PIN_SET);
 80002dc:	2201      	movs	r2, #1
 80002de:	2110      	movs	r1, #16
 80002e0:	481e      	ldr	r0, [pc, #120]	; (800035c <MX_GPIO_Init+0xe8>)
 80002e2:	f000 fe7e 	bl	8000fe2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EEPROM_CS_Pin|LED_PUSH_DATA_Pin, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2111      	movs	r1, #17
 80002ea:	481d      	ldr	r0, [pc, #116]	; (8000360 <MX_GPIO_Init+0xec>)
 80002ec:	f000 fe79 	bl	8000fe2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ENABLE_GPIO_Port, LED_ENABLE_Pin, GPIO_PIN_SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2120      	movs	r1, #32
 80002f4:	481a      	ldr	r0, [pc, #104]	; (8000360 <MX_GPIO_Init+0xec>)
 80002f6:	f000 fe74 	bl	8000fe2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IN_LOAD_Pin|IN_CLK_INH_Pin|OUT_PUSH_DATA_Pin|OUT_ENABLE_Pin
 80002fa:	f240 731e 	movw	r3, #1822	; 0x71e
 80002fe:	613b      	str	r3, [r7, #16]
                          |LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000300:	2301      	movs	r3, #1
 8000302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	2300      	movs	r3, #0
 8000306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000308:	2302      	movs	r3, #2
 800030a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030c:	f107 0310 	add.w	r3, r7, #16
 8000310:	4619      	mov	r1, r3
 8000312:	4812      	ldr	r0, [pc, #72]	; (800035c <MX_GPIO_Init+0xe8>)
 8000314:	f000 fcf4 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EEPROM_CS_Pin|LED_PUSH_DATA_Pin|LED_ENABLE_Pin;
 8000318:	2331      	movs	r3, #49	; 0x31
 800031a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031c:	2301      	movs	r3, #1
 800031e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000324:	2302      	movs	r3, #2
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000328:	f107 0310 	add.w	r3, r7, #16
 800032c:	4619      	mov	r1, r3
 800032e:	480c      	ldr	r0, [pc, #48]	; (8000360 <MX_GPIO_Init+0xec>)
 8000330:	f000 fce6 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	4619      	mov	r1, r3
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0xe8>)
 800034a:	f000 fcd9 	bl	8000d00 <HAL_GPIO_Init>

}
 800034e:	bf00      	nop
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40010800 	.word	0x40010800
 8000360:	40010c00 	.word	0x40010c00

08000364 <SendData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SendData(SPI_HandleTypeDef * hspi, uint16_t data, uint8_t leds, uint8_t ports) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	4608      	mov	r0, r1
 800036e:	4611      	mov	r1, r2
 8000370:	461a      	mov	r2, r3
 8000372:	4603      	mov	r3, r0
 8000374:	807b      	strh	r3, [r7, #2]
 8000376:	460b      	mov	r3, r1
 8000378:	707b      	strb	r3, [r7, #1]
 800037a:	4613      	mov	r3, r2
 800037c:	703b      	strb	r3, [r7, #0]
	if (leds) HAL_GPIO_WritePin(LED_ENABLE_GPIO_Port, LED_ENABLE_Pin, GPIO_PIN_RESET);
 800037e:	787b      	ldrb	r3, [r7, #1]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d004      	beq.n	800038e <SendData+0x2a>
 8000384:	2200      	movs	r2, #0
 8000386:	2120      	movs	r1, #32
 8000388:	4810      	ldr	r0, [pc, #64]	; (80003cc <SendData+0x68>)
 800038a:	f000 fe2a 	bl	8000fe2 <HAL_GPIO_WritePin>
	if (ports) HAL_GPIO_WritePin(OUT_ENABLE_GPIO_Port, OUT_ENABLE_Pin, GPIO_PIN_RESET);
 800038e:	783b      	ldrb	r3, [r7, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d004      	beq.n	800039e <SendData+0x3a>
 8000394:	2200      	movs	r2, #0
 8000396:	2110      	movs	r1, #16
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <SendData+0x6c>)
 800039a:	f000 fe22 	bl	8000fe2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, (uint8_t *) &data, 2, 50);
 800039e:	1cb9      	adds	r1, r7, #2
 80003a0:	2332      	movs	r3, #50	; 0x32
 80003a2:	2202      	movs	r2, #2
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f003 f932 	bl	800360e <HAL_SPI_Transmit>
	if (leds) {
 80003aa:	787b      	ldrb	r3, [r7, #1]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d009      	beq.n	80003c4 <SendData+0x60>
		HAL_GPIO_WritePin(LED_PUSH_DATA_GPIO_Port, LED_PUSH_DATA_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2110      	movs	r1, #16
 80003b4:	4805      	ldr	r0, [pc, #20]	; (80003cc <SendData+0x68>)
 80003b6:	f000 fe14 	bl	8000fe2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PUSH_DATA_GPIO_Port, LED_PUSH_DATA_Pin, GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2110      	movs	r1, #16
 80003be:	4803      	ldr	r0, [pc, #12]	; (80003cc <SendData+0x68>)
 80003c0:	f000 fe0f 	bl	8000fe2 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(LED_ENABLE_GPIO_Port, LED_ENABLE_Pin, GPIO_PIN_SET);
	}
//	if (ports) HAL_GPIO_WritePin(OUT_ENABLE_GPIO_Port, OUT_ENABLE_Pin, GPIO_PIN_SET);
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40010c00 	.word	0x40010c00
 80003d0:	40010800 	.word	0x40010800

080003d4 <LedsWalk>:

void LedsWalk(SPI_HandleTypeDef * hspi) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	uint16_t data = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<16; i++){
 80003e0:	2300      	movs	r3, #0
 80003e2:	613b      	str	r3, [r7, #16]
 80003e4:	e013      	b.n	800040e <LedsWalk+0x3a>
		data += 1 << i;
 80003e6:	2201      	movs	r2, #1
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	fa02 f303 	lsl.w	r3, r2, r3
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	8afb      	ldrh	r3, [r7, #22]
 80003f2:	4413      	add	r3, r2
 80003f4:	82fb      	strh	r3, [r7, #22]
		SendData(hspi, data, 1, 0);
 80003f6:	8af9      	ldrh	r1, [r7, #22]
 80003f8:	2300      	movs	r3, #0
 80003fa:	2201      	movs	r2, #1
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff ffb1 	bl	8000364 <SendData>
		//osDelay(25);
		HAL_Delay(15);
 8000402:	200f      	movs	r0, #15
 8000404:	f000 fb7a 	bl	8000afc <HAL_Delay>
	for(int i = 0; i<16; i++){
 8000408:	693b      	ldr	r3, [r7, #16]
 800040a:	3301      	adds	r3, #1
 800040c:	613b      	str	r3, [r7, #16]
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	2b0f      	cmp	r3, #15
 8000412:	dde8      	ble.n	80003e6 <LedsWalk+0x12>
	}
	HAL_Delay(100);
 8000414:	2064      	movs	r0, #100	; 0x64
 8000416:	f000 fb71 	bl	8000afc <HAL_Delay>
	for(int i = 0; i<16; i++){
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	e017      	b.n	8000450 <LedsWalk+0x7c>
		data &= ~(1 << i);
 8000420:	2201      	movs	r2, #1
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	fa02 f303 	lsl.w	r3, r2, r3
 8000428:	b21b      	sxth	r3, r3
 800042a:	43db      	mvns	r3, r3
 800042c:	b21a      	sxth	r2, r3
 800042e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000432:	4013      	ands	r3, r2
 8000434:	b21b      	sxth	r3, r3
 8000436:	82fb      	strh	r3, [r7, #22]
		SendData(hspi, data, 1, 0);
 8000438:	8af9      	ldrh	r1, [r7, #22]
 800043a:	2300      	movs	r3, #0
 800043c:	2201      	movs	r2, #1
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f7ff ff90 	bl	8000364 <SendData>
		//osDelay(25);
		HAL_Delay(15);
 8000444:	200f      	movs	r0, #15
 8000446:	f000 fb59 	bl	8000afc <HAL_Delay>
	for(int i = 0; i<16; i++){
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3301      	adds	r3, #1
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	2b0f      	cmp	r3, #15
 8000454:	dde4      	ble.n	8000420 <LedsWalk+0x4c>
	}
}
 8000456:	bf00      	nop
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <ledsStartCheck>:
void ledsStartCheck(void){
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000468:	4819      	ldr	r0, [pc, #100]	; (80004d0 <ledsStartCheck+0x70>)
 800046a:	f000 fdd2 	bl	8001012 <HAL_GPIO_TogglePin>
	HAL_Delay(25);
 800046e:	2019      	movs	r0, #25
 8000470:	f000 fb44 	bl	8000afc <HAL_Delay>
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000478:	4815      	ldr	r0, [pc, #84]	; (80004d0 <ledsStartCheck+0x70>)
 800047a:	f000 fdca 	bl	8001012 <HAL_GPIO_TogglePin>
	HAL_Delay(25);
 800047e:	2019      	movs	r0, #25
 8000480:	f000 fb3c 	bl	8000afc <HAL_Delay>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000488:	4811      	ldr	r0, [pc, #68]	; (80004d0 <ledsStartCheck+0x70>)
 800048a:	f000 fdc2 	bl	8001012 <HAL_GPIO_TogglePin>
	HAL_Delay(25);
 800048e:	2019      	movs	r0, #25
 8000490:	f000 fb34 	bl	8000afc <HAL_Delay>
	LedsWalk(&hspi2);
 8000494:	480f      	ldr	r0, [pc, #60]	; (80004d4 <ledsStartCheck+0x74>)
 8000496:	f7ff ff9d 	bl	80003d4 <LedsWalk>
	HAL_Delay(25);
 800049a:	2019      	movs	r0, #25
 800049c:	f000 fb2e 	bl	8000afc <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80004a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a4:	480a      	ldr	r0, [pc, #40]	; (80004d0 <ledsStartCheck+0x70>)
 80004a6:	f000 fdb4 	bl	8001012 <HAL_GPIO_TogglePin>
	HAL_Delay(25);
 80004aa:	2019      	movs	r0, #25
 80004ac:	f000 fb26 	bl	8000afc <HAL_Delay>
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80004b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004b4:	4806      	ldr	r0, [pc, #24]	; (80004d0 <ledsStartCheck+0x70>)
 80004b6:	f000 fdac 	bl	8001012 <HAL_GPIO_TogglePin>
	HAL_Delay(25);
 80004ba:	2019      	movs	r0, #25
 80004bc:	f000 fb1e 	bl	8000afc <HAL_Delay>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80004c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <ledsStartCheck+0x70>)
 80004c6:	f000 fda4 	bl	8001012 <HAL_GPIO_TogglePin>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010800 	.word	0x40010800
 80004d4:	20003244 	.word	0x20003244

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fadc 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f811 	bl	8000506 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f7ff fec6 	bl	8000274 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004e8:	f000 f8c0 	bl	800066c <MX_SPI1_Init>
  MX_SPI2_Init();
 80004ec:	f000 f8f4 	bl	80006d8 <MX_SPI2_Init>
  MX_RTC_Init();
 80004f0:	f000 f87c 	bl	80005ec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  ledsStartCheck();
 80004f4:	f7ff ffb4 	bl	8000460 <ledsStartCheck>
  //printf("test\n");

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80004f8:	f007 fbcc 	bl	8007c94 <osKernelInitialize>
  MX_FREERTOS_Init();
 80004fc:	f7ff fe3a 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000500:	f007 fbfa 	bl	8007cf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x2c>

08000506 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b094      	sub	sp, #80	; 0x50
 800050a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000510:	2228      	movs	r2, #40	; 0x28
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f00d f88f 	bl	800d638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000536:	2301      	movs	r3, #1
 8000538:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000548:	2302      	movs	r3, #2
 800054a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000552:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000556:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055c:	4618      	mov	r0, r3
 800055e:	f002 f901 	bl	8002764 <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000568:	f000 f83c 	bl	80005e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000570:	2302      	movs	r3, #2
 8000572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2102      	movs	r1, #2
 8000588:	4618      	mov	r0, r3
 800058a:	f002 fb6b 	bl	8002c64 <HAL_RCC_ClockConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000594:	f000 f826 	bl	80005e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000598:	2311      	movs	r3, #17
 800059a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800059c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fd27 	bl	8002ffc <HAL_RCCEx_PeriphCLKConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005b4:	f000 f816 	bl	80005e4 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3750      	adds	r7, #80	; 0x50
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d101      	bne.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005d2:	f000 fa77 	bl	8000ac4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40000800 	.word	0x40000800

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ea:	e7fe      	b.n	80005ea <Error_Handler+0x6>

080005ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_RTC_Init+0x30>)
 80005f2:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <MX_RTC_Init+0x34>)
 80005f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_RTC_Init+0x30>)
 80005f8:	f04f 32ff 	mov.w	r2, #4294967295
 80005fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <MX_RTC_Init+0x30>)
 8000600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000604:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_RTC_Init+0x30>)
 8000608:	f002 fe6a 	bl	80032e0 <HAL_RTC_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000612:	f7ff ffe7 	bl	80005e4 <Error_Handler>
  }

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20003230 	.word	0x20003230
 8000620:	40002800 	.word	0x40002800

08000624 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <HAL_RTC_MspInit+0x3c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d110      	bne.n	8000658 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000636:	f002 f889 	bl	800274c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_RTC_MspInit+0x40>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a09      	ldr	r2, [pc, #36]	; (8000664 <HAL_RTC_MspInit+0x40>)
 8000640:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <HAL_RTC_MspInit+0x40>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_RTC_MspInit+0x44>)
 8000654:	2201      	movs	r2, #1
 8000656:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40002800 	.word	0x40002800
 8000664:	40021000 	.word	0x40021000
 8000668:	4242043c 	.word	0x4242043c

0800066c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <MX_SPI1_Init+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000678:	f44f 7282 	mov.w	r2, #260	; 0x104
 800067c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_SPI1_Init+0x64>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006a0:	2208      	movs	r2, #8
 80006a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006b8:	220a      	movs	r2, #10
 80006ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_SPI1_Init+0x64>)
 80006be:	f002 ff22 	bl	8003506 <HAL_SPI_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006c8:	f7ff ff8c 	bl	80005e4 <Error_Handler>
  }

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000329c 	.word	0x2000329c
 80006d4:	40013000 	.word	0x40013000

080006d8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_SPI2_Init+0x64>)
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_SPI2_Init+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_SPI2_Init+0x64>)
 80006e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_SPI2_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_SPI2_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_SPI2_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_SPI2_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_SPI2_Init+0x64>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_SPI2_Init+0x64>)
 800070c:	2228      	movs	r2, #40	; 0x28
 800070e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_SPI2_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_SPI2_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_SPI2_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_SPI2_Init+0x64>)
 8000724:	220a      	movs	r2, #10
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_SPI2_Init+0x64>)
 800072a:	f002 feec 	bl	8003506 <HAL_SPI_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000734:	f7ff ff56 	bl	80005e4 <Error_Handler>
  }

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20003244 	.word	0x20003244
 8000740:	40003800 	.word	0x40003800

08000744 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0318 	add.w	r3, r7, #24
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a37      	ldr	r2, [pc, #220]	; (800083c <HAL_SPI_MspInit+0xf8>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d130      	bne.n	80007c6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000764:	4b36      	ldr	r3, [pc, #216]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a35      	ldr	r2, [pc, #212]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 800076a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b33      	ldr	r3, [pc, #204]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b30      	ldr	r3, [pc, #192]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a2f      	ldr	r2, [pc, #188]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000794:	23a0      	movs	r3, #160	; 0xa0
 8000796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	4619      	mov	r1, r3
 80007a6:	4827      	ldr	r0, [pc, #156]	; (8000844 <HAL_SPI_MspInit+0x100>)
 80007a8:	f000 faaa 	bl	8000d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007ac:	2340      	movs	r3, #64	; 0x40
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	4619      	mov	r1, r3
 80007be:	4821      	ldr	r0, [pc, #132]	; (8000844 <HAL_SPI_MspInit+0x100>)
 80007c0:	f000 fa9e 	bl	8000d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80007c4:	e036      	b.n	8000834 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a1f      	ldr	r2, [pc, #124]	; (8000848 <HAL_SPI_MspInit+0x104>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d131      	bne.n	8000834 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	4a1a      	ldr	r2, [pc, #104]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	61d3      	str	r3, [r2, #28]
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 80007de:	69db      	ldr	r3, [r3, #28]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 80007ee:	f043 0308 	orr.w	r3, r3, #8
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_SPI_MspInit+0xfc>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f003 0308 	and.w	r3, r3, #8
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000800:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	4619      	mov	r1, r3
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <HAL_SPI_MspInit+0x108>)
 8000816:	f000 fa73 	bl	8000d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800081a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800081e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	4619      	mov	r1, r3
 800082e:	4807      	ldr	r0, [pc, #28]	; (800084c <HAL_SPI_MspInit+0x108>)
 8000830:	f000 fa66 	bl	8000d00 <HAL_GPIO_Init>
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40013000 	.word	0x40013000
 8000840:	40021000 	.word	0x40021000
 8000844:	40010800 	.word	0x40010800
 8000848:	40003800 	.word	0x40003800
 800084c:	40010c00 	.word	0x40010c00

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_MspInit+0x68>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <HAL_MspInit+0x68>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_MspInit+0x68>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x68>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <HAL_MspInit+0x68>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x68>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	210f      	movs	r1, #15
 800088a:	f06f 0001 	mvn.w	r0, #1
 800088e:	f000 fa0c 	bl	8000caa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_MspInit+0x6c>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_MspInit+0x6c>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010000 	.word	0x40010000

080008c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	201e      	movs	r0, #30
 80008d6:	f000 f9e8 	bl	8000caa <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008da:	201e      	movs	r0, #30
 80008dc:	f000 fa01 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_InitTick+0xa0>)
 80008e2:	69db      	ldr	r3, [r3, #28]
 80008e4:	4a1e      	ldr	r2, [pc, #120]	; (8000960 <HAL_InitTick+0xa0>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	61d3      	str	r3, [r2, #28]
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_InitTick+0xa0>)
 80008ee:	69db      	ldr	r3, [r3, #28]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f8:	f107 0210 	add.w	r2, r7, #16
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f002 fb2c 	bl	8002f60 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000908:	f002 fb02 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 800090c:	4603      	mov	r3, r0
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <HAL_InitTick+0xa4>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	0c9b      	lsrs	r3, r3, #18
 800091c:	3b01      	subs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_InitTick+0xa8>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <HAL_InitTick+0xac>)
 8000924:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_InitTick+0xa8>)
 8000928:	f240 32e7 	movw	r2, #999	; 0x3e7
 800092c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_InitTick+0xa8>)
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_InitTick+0xa8>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_InitTick+0xa8>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <HAL_InitTick+0xa8>)
 8000942:	f003 fb4b 	bl	8003fdc <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d104      	bne.n	8000956 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <HAL_InitTick+0xa8>)
 800094e:	f003 fb9d 	bl	800408c <HAL_TIM_Base_Start_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000
 8000964:	431bde83 	.word	0x431bde83
 8000968:	200032f4 	.word	0x200032f4
 800096c:	40000800 	.word	0x40000800

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>
	...

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800097c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000980:	4801      	ldr	r0, [pc, #4]	; (8000988 <HardFault_Handler+0x10>)
 8000982:	f000 fb46 	bl	8001012 <HAL_GPIO_TogglePin>
 8000986:	e7f9      	b.n	800097c <HardFault_Handler+0x4>
 8000988:	40010800 	.word	0x40010800

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
	...

080009ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009b2:	f000 fc78 	bl	80012a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20003c44 	.word	0x20003c44

080009c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <TIM4_IRQHandler+0x10>)
 80009c6:	f003 fbb3 	bl	8004130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200032f4 	.word	0x200032f4

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f00c fda6 	bl	800d554 <__errno>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20005000 	.word	0x20005000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	2000040c 	.word	0x2000040c
 8000a3c:	200040b8 	.word	0x200040b8

08000a40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a4e:	e003      	b.n	8000a58 <LoopCopyDataInit>

08000a50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a56:	3104      	adds	r1, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a58:	480a      	ldr	r0, [pc, #40]	; (8000a84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a60:	d3f6      	bcc.n	8000a50 <CopyDataInit>
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a64:	e002      	b.n	8000a6c <LoopFillZerobss>

08000a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a68:	f842 3b04 	str.w	r3, [r2], #4

08000a6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a70:	d3f9      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a72:	f7ff ffe5 	bl	8000a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f00c fd73 	bl	800d560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7a:	f7ff fd2d 	bl	80004d8 <main>
  bx lr
 8000a7e:	4770      	bx	lr
  ldr r3, =_sidata
 8000a80:	0800f354 	.word	0x0800f354
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a88:	200003f0 	.word	0x200003f0
  ldr r2, =_sbss
 8000a8c:	200003f0 	.word	0x200003f0
  ldr r3, = _ebss
 8000a90:	200040b4 	.word	0x200040b4

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x28>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x28>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f8f3 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff ff06 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff fecc 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40022000 	.word	0x40022000

08000ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x1c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_IncTick+0x20>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <HAL_IncTick+0x20>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	2000333c 	.word	0x2000333c

08000ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b02      	ldr	r3, [pc, #8]	; (8000af8 <HAL_GetTick+0x10>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	2000333c 	.word	0x2000333c

08000afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff fff0 	bl	8000ae8 <HAL_GetTick>
 8000b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b14:	d005      	beq.n	8000b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_Delay+0x40>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b22:	bf00      	nop
 8000b24:	f7ff ffe0 	bl	8000ae8 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d8f7      	bhi.n	8000b24 <HAL_Delay+0x28>
  {
  }
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000008 	.word	0x20000008

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4906      	ldr	r1, [pc, #24]	; (8000bd8 <__NVIC_EnableIRQ+0x34>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff4f 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff64 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ffb2 	bl	8000c30 <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff81 	bl	8000bdc <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff57 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b08b      	sub	sp, #44	; 0x2c
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	e127      	b.n	8000f64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d14:	2201      	movs	r2, #1
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	f040 8116 	bne.w	8000f5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b12      	cmp	r3, #18
 8000d38:	d034      	beq.n	8000da4 <HAL_GPIO_Init+0xa4>
 8000d3a:	2b12      	cmp	r3, #18
 8000d3c:	d80d      	bhi.n	8000d5a <HAL_GPIO_Init+0x5a>
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d02b      	beq.n	8000d9a <HAL_GPIO_Init+0x9a>
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d804      	bhi.n	8000d50 <HAL_GPIO_Init+0x50>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d031      	beq.n	8000dae <HAL_GPIO_Init+0xae>
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d01c      	beq.n	8000d88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d4e:	e048      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d043      	beq.n	8000ddc <HAL_GPIO_Init+0xdc>
 8000d54:	2b11      	cmp	r3, #17
 8000d56:	d01b      	beq.n	8000d90 <HAL_GPIO_Init+0x90>
          break;
 8000d58:	e043      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d5a:	4a89      	ldr	r2, [pc, #548]	; (8000f80 <HAL_GPIO_Init+0x280>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d026      	beq.n	8000dae <HAL_GPIO_Init+0xae>
 8000d60:	4a87      	ldr	r2, [pc, #540]	; (8000f80 <HAL_GPIO_Init+0x280>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d806      	bhi.n	8000d74 <HAL_GPIO_Init+0x74>
 8000d66:	4a87      	ldr	r2, [pc, #540]	; (8000f84 <HAL_GPIO_Init+0x284>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d020      	beq.n	8000dae <HAL_GPIO_Init+0xae>
 8000d6c:	4a86      	ldr	r2, [pc, #536]	; (8000f88 <HAL_GPIO_Init+0x288>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d01d      	beq.n	8000dae <HAL_GPIO_Init+0xae>
          break;
 8000d72:	e036      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d74:	4a85      	ldr	r2, [pc, #532]	; (8000f8c <HAL_GPIO_Init+0x28c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d019      	beq.n	8000dae <HAL_GPIO_Init+0xae>
 8000d7a:	4a85      	ldr	r2, [pc, #532]	; (8000f90 <HAL_GPIO_Init+0x290>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d016      	beq.n	8000dae <HAL_GPIO_Init+0xae>
 8000d80:	4a84      	ldr	r2, [pc, #528]	; (8000f94 <HAL_GPIO_Init+0x294>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d013      	beq.n	8000dae <HAL_GPIO_Init+0xae>
          break;
 8000d86:	e02c      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	623b      	str	r3, [r7, #32]
          break;
 8000d8e:	e028      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	3304      	adds	r3, #4
 8000d96:	623b      	str	r3, [r7, #32]
          break;
 8000d98:	e023      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	3308      	adds	r3, #8
 8000da0:	623b      	str	r3, [r7, #32]
          break;
 8000da2:	e01e      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	330c      	adds	r3, #12
 8000daa:	623b      	str	r3, [r7, #32]
          break;
 8000dac:	e019      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000db6:	2304      	movs	r3, #4
 8000db8:	623b      	str	r3, [r7, #32]
          break;
 8000dba:	e012      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d105      	bne.n	8000dd0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	611a      	str	r2, [r3, #16]
          break;
 8000dce:	e008      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	615a      	str	r2, [r3, #20]
          break;
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
          break;
 8000de0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	2bff      	cmp	r3, #255	; 0xff
 8000de6:	d801      	bhi.n	8000dec <HAL_GPIO_Init+0xec>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	e001      	b.n	8000df0 <HAL_GPIO_Init+0xf0>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3304      	adds	r3, #4
 8000df0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	2bff      	cmp	r3, #255	; 0xff
 8000df6:	d802      	bhi.n	8000dfe <HAL_GPIO_Init+0xfe>
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_Init+0x104>
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	3b08      	subs	r3, #8
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	401a      	ands	r2, r3
 8000e16:	6a39      	ldr	r1, [r7, #32]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 8096 	beq.w	8000f5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e32:	4b59      	ldr	r3, [pc, #356]	; (8000f98 <HAL_GPIO_Init+0x298>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a58      	ldr	r2, [pc, #352]	; (8000f98 <HAL_GPIO_Init+0x298>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b56      	ldr	r3, [pc, #344]	; (8000f98 <HAL_GPIO_Init+0x298>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e4a:	4a54      	ldr	r2, [pc, #336]	; (8000f9c <HAL_GPIO_Init+0x29c>)
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4b      	ldr	r2, [pc, #300]	; (8000fa0 <HAL_GPIO_Init+0x2a0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x19e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4a      	ldr	r2, [pc, #296]	; (8000fa4 <HAL_GPIO_Init+0x2a4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x19a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a49      	ldr	r2, [pc, #292]	; (8000fa8 <HAL_GPIO_Init+0x2a8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x196>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a48      	ldr	r2, [pc, #288]	; (8000fac <HAL_GPIO_Init+0x2ac>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x192>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x1a0>
 8000e92:	2304      	movs	r3, #4
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_Init+0x1a0>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x1a0>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x1a0>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea2:	f002 0203 	and.w	r2, r2, #3
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eb0:	493a      	ldr	r1, [pc, #232]	; (8000f9c <HAL_GPIO_Init+0x29c>)
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eca:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4938      	ldr	r1, [pc, #224]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
 8000ed6:	e006      	b.n	8000ee6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ed8:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4933      	ldr	r1, [pc, #204]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d006      	beq.n	8000f00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	492e      	ldr	r1, [pc, #184]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	604b      	str	r3, [r1, #4]
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	4929      	ldr	r1, [pc, #164]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d006      	beq.n	8000f28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	4924      	ldr	r1, [pc, #144]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	608b      	str	r3, [r1, #8]
 8000f26:	e006      	b.n	8000f36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	491f      	ldr	r1, [pc, #124]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	491a      	ldr	r1, [pc, #104]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60cb      	str	r3, [r1, #12]
 8000f4e:	e006      	b.n	8000f5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	4915      	ldr	r1, [pc, #84]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	3301      	adds	r3, #1
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f47f aed0 	bne.w	8000d14 <HAL_GPIO_Init+0x14>
  }
}
 8000f74:	bf00      	nop
 8000f76:	372c      	adds	r7, #44	; 0x2c
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	10210000 	.word	0x10210000
 8000f84:	10110000 	.word	0x10110000
 8000f88:	10120000 	.word	0x10120000
 8000f8c:	10310000 	.word	0x10310000
 8000f90:	10320000 	.word	0x10320000
 8000f94:	10220000 	.word	0x10220000
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40011400 	.word	0x40011400
 8000fb0:	40010400 	.word	0x40010400

08000fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e001      	b.n	8000fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	460b      	mov	r3, r1
 8000fec:	807b      	strh	r3, [r7, #2]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff2:	787b      	ldrb	r3, [r7, #1]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ffe:	e003      	b.n	8001008 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	041a      	lsls	r2, r3, #16
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	611a      	str	r2, [r3, #16]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr

08001012 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	460b      	mov	r3, r1
 800101c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001024:	887a      	ldrh	r2, [r7, #2]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	041a      	lsls	r2, r3, #16
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43d9      	mvns	r1, r3
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	400b      	ands	r3, r1
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	611a      	str	r2, [r3, #16]
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	b08b      	sub	sp, #44	; 0x2c
 8001048:	af06      	add	r7, sp, #24
 800104a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e0fd      	b.n	8001252 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d106      	bne.n	8001070 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f009 fcd8 	bl	800aa20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2203      	movs	r2, #3
 8001074:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fa1d 	bl	80044bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	687e      	ldr	r6, [r7, #4]
 800108a:	466d      	mov	r5, sp
 800108c:	f106 0410 	add.w	r4, r6, #16
 8001090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	602b      	str	r3, [r5, #0]
 8001098:	1d33      	adds	r3, r6, #4
 800109a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800109c:	6838      	ldr	r0, [r7, #0]
 800109e:	f003 f9e7 	bl	8004470 <USB_CoreInit>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2202      	movs	r2, #2
 80010ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e0ce      	b.n	8001252 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fa18 	bl	80044f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e04c      	b.n	8001160 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	3301      	adds	r3, #1
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	b298      	uxth	r0, r3
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	3336      	adds	r3, #54	; 0x36
 8001104:	4602      	mov	r2, r0
 8001106:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	440b      	add	r3, r1
 8001118:	3303      	adds	r3, #3
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	440b      	add	r3, r1
 800112c:	3338      	adds	r3, #56	; 0x38
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	440b      	add	r3, r1
 8001140:	333c      	adds	r3, #60	; 0x3c
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	3340      	adds	r3, #64	; 0x40
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	3301      	adds	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	429a      	cmp	r2, r3
 8001168:	d3ad      	bcc.n	80010c6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e044      	b.n	80011fa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	440b      	add	r3, r1
 8001194:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	440b      	add	r3, r1
 80011aa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	440b      	add	r3, r1
 80011c0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	440b      	add	r3, r1
 80011d6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	3301      	adds	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	d3b5      	bcc.n	8001170 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	687e      	ldr	r6, [r7, #4]
 800120c:	466d      	mov	r5, sp
 800120e:	f106 0410 	add.w	r4, r6, #16
 8001212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	602b      	str	r3, [r5, #0]
 800121a:	1d33      	adds	r3, r6, #4
 800121c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f003 f972 	bl	8004508 <USB_DevInit>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2202      	movs	r2, #2
 800122e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00d      	b.n	8001252 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f005 f90c 	bl	8006468 <USB_DevDisconnect>

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800125a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_PCD_Start+0x16>
 800126c:	2302      	movs	r3, #2
 800126e:	e016      	b.n	800129e <HAL_PCD_Start+0x44>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f003 f907 	bl	8004490 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001282:	2101      	movs	r1, #1
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f009 fe3e 	bl	800af06 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f005 f8e0 	bl	8006454 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b088      	sub	sp, #32
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 f8e2 	bl	800647c <USB_ReadInterrupts>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012c2:	d102      	bne.n	80012ca <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fb61 	bl	800198c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f005 f8d4 	bl	800647c <USB_ReadInterrupts>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012de:	d112      	bne.n	8001306 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012f2:	b292      	uxth	r2, r2
 80012f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f009 fc0c 	bl	800ab16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012fe:	2100      	movs	r1, #0
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f925 	bl	8001550 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f005 f8b6 	bl	800647c <USB_ReadInterrupts>
 8001310:	4603      	mov	r3, r0
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800131a:	d10b      	bne.n	8001334 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001324:	b29a      	uxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800132e:	b292      	uxth	r2, r2
 8001330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f005 f89f 	bl	800647c <USB_ReadInterrupts>
 800133e:	4603      	mov	r3, r0
 8001340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001348:	d10b      	bne.n	8001362 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001352:	b29a      	uxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800135c:	b292      	uxth	r2, r2
 800135e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f005 f888 	bl	800647c <USB_ReadInterrupts>
 800136c:	4603      	mov	r3, r0
 800136e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001376:	d126      	bne.n	80013c6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001380:	b29a      	uxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0204 	bic.w	r2, r2, #4
 800138a:	b292      	uxth	r2, r2
 800138c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0208 	bic.w	r2, r2, #8
 80013a2:	b292      	uxth	r2, r2
 80013a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f009 fbed 	bl	800ab88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013c0:	b292      	uxth	r2, r2
 80013c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f005 f856 	bl	800647c <USB_ReadInterrupts>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013da:	f040 8084 	bne.w	80014e6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80013de:	2300      	movs	r3, #0
 80013e0:	77fb      	strb	r3, [r7, #31]
 80013e2:	e011      	b.n	8001408 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	441a      	add	r2, r3
 80013f0:	7ffb      	ldrb	r3, [r7, #31]
 80013f2:	8812      	ldrh	r2, [r2, #0]
 80013f4:	b292      	uxth	r2, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	f107 0120 	add.w	r1, r7, #32
 80013fc:	440b      	add	r3, r1
 80013fe:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001402:	7ffb      	ldrb	r3, [r7, #31]
 8001404:	3301      	adds	r3, #1
 8001406:	77fb      	strb	r3, [r7, #31]
 8001408:	7ffb      	ldrb	r3, [r7, #31]
 800140a:	2b07      	cmp	r3, #7
 800140c:	d9ea      	bls.n	80013e4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001416:	b29a      	uxth	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 0201 	orr.w	r2, r2, #1
 8001420:	b292      	uxth	r2, r2
 8001422:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	b292      	uxth	r2, r2
 800143a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800143e:	bf00      	nop
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001448:	b29b      	uxth	r3, r3
 800144a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f6      	beq.n	8001440 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800145a:	b29a      	uxth	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001464:	b292      	uxth	r2, r2
 8001466:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800146a:	2300      	movs	r3, #0
 800146c:	77fb      	strb	r3, [r7, #31]
 800146e:	e010      	b.n	8001492 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001470:	7ffb      	ldrb	r3, [r7, #31]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
 8001478:	7ffa      	ldrb	r2, [r7, #31]
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	440a      	add	r2, r1
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	f107 0120 	add.w	r1, r7, #32
 8001484:	440b      	add	r3, r1
 8001486:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800148a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800148c:	7ffb      	ldrb	r3, [r7, #31]
 800148e:	3301      	adds	r3, #1
 8001490:	77fb      	strb	r3, [r7, #31]
 8001492:	7ffb      	ldrb	r3, [r7, #31]
 8001494:	2b07      	cmp	r3, #7
 8001496:	d9eb      	bls.n	8001470 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0208 	orr.w	r2, r2, #8
 80014aa:	b292      	uxth	r2, r2
 80014ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014c2:	b292      	uxth	r2, r2
 80014c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0204 	orr.w	r2, r2, #4
 80014da:	b292      	uxth	r2, r2
 80014dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f009 fb37 	bl	800ab54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 ffc6 	bl	800647c <USB_ReadInterrupts>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014fa:	d10e      	bne.n	800151a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001504:	b29a      	uxth	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800150e:	b292      	uxth	r2, r2
 8001510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f009 faf0 	bl	800aafa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f004 ffac 	bl	800647c <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800152e:	d10b      	bne.n	8001548 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001538:	b29a      	uxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001542:	b292      	uxth	r2, r2
 8001544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001548:	bf00      	nop
 800154a:	3720      	adds	r7, #32
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_PCD_SetAddress+0x1a>
 8001566:	2302      	movs	r3, #2
 8001568:	e013      	b.n	8001592 <HAL_PCD_SetAddress+0x42>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	78fa      	ldrb	r2, [r7, #3]
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f004 ff53 	bl	800642e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	4608      	mov	r0, r1
 80015a4:	4611      	mov	r1, r2
 80015a6:	461a      	mov	r2, r3
 80015a8:	4603      	mov	r3, r0
 80015aa:	70fb      	strb	r3, [r7, #3]
 80015ac:	460b      	mov	r3, r1
 80015ae:	803b      	strh	r3, [r7, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da0e      	bge.n	80015de <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2201      	movs	r2, #1
 80015da:	705a      	strb	r2, [r3, #1]
 80015dc:	e00e      	b.n	80015fc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	f003 0207 	and.w	r2, r3, #7
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	b2da      	uxtb	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001608:	883a      	ldrh	r2, [r7, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	78ba      	ldrb	r2, [r7, #2]
 8001612:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	785b      	ldrb	r3, [r3, #1]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b29a      	uxth	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001626:	78bb      	ldrb	r3, [r7, #2]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d102      	bne.n	8001632 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_PCD_EP_Open+0xa6>
 800163c:	2302      	movs	r3, #2
 800163e:	e00e      	b.n	800165e <HAL_PCD_EP_Open+0xc4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68f9      	ldr	r1, [r7, #12]
 800164e:	4618      	mov	r0, r3
 8001650:	f002 ff7a 	bl	8004548 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800165c:	7afb      	ldrb	r3, [r7, #11]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001676:	2b00      	cmp	r3, #0
 8001678:	da0e      	bge.n	8001698 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2201      	movs	r2, #1
 8001694:	705a      	strb	r2, [r3, #1]
 8001696:	e00e      	b.n	80016b6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	f003 0207 	and.w	r2, r3, #7
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_PCD_EP_Close+0x6a>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e00e      	b.n	80016ee <HAL_PCD_EP_Close+0x88>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68f9      	ldr	r1, [r7, #12]
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 fa9c 	bl	8004c1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	460b      	mov	r3, r1
 8001704:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001706:	7afb      	ldrb	r3, [r7, #11]
 8001708:	f003 0207 	and.w	r2, r3, #7
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2200      	movs	r2, #0
 8001734:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001736:	7afb      	ldrb	r3, [r7, #11]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	b2da      	uxtb	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001742:	7afb      	ldrb	r3, [r7, #11]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	2b00      	cmp	r3, #0
 800174a:	d106      	bne.n	800175a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6979      	ldr	r1, [r7, #20]
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fc4e 	bl	8004ff4 <USB_EPStartXfer>
 8001758:	e005      	b.n	8001766 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6979      	ldr	r1, [r7, #20]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fc47 	bl	8004ff4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	f003 0207 	and.w	r2, r3, #7
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	460b      	mov	r3, r1
 80017ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ae:	7afb      	ldrb	r3, [r7, #11]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4413      	add	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2201      	movs	r2, #1
 80017e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017f6:	7afb      	ldrb	r3, [r7, #11]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d106      	bne.n	800180e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6979      	ldr	r1, [r7, #20]
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fbf4 	bl	8004ff4 <USB_EPStartXfer>
 800180c:	e005      	b.n	800181a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6979      	ldr	r1, [r7, #20]
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fbed 	bl	8004ff4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	f003 0207 	and.w	r2, r3, #7
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d901      	bls.n	8001842 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e04c      	b.n	80018dc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001842:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001846:	2b00      	cmp	r3, #0
 8001848:	da0e      	bge.n	8001868 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	705a      	strb	r2, [r3, #1]
 8001866:	e00c      	b.n	8001882 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	b2da      	uxtb	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_PCD_EP_SetStall+0x7e>
 800189e:	2302      	movs	r3, #2
 80018a0:	e01c      	b.n	80018dc <HAL_PCD_EP_SetStall+0xb8>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68f9      	ldr	r1, [r7, #12]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f004 fcbf 	bl	8006234 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d108      	bne.n	80018d2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f004 fde4 	bl	800649a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	f003 020f 	and.w	r2, r3, #15
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d901      	bls.n	8001902 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e040      	b.n	8001984 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001906:	2b00      	cmp	r3, #0
 8001908:	da0e      	bge.n	8001928 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	705a      	strb	r2, [r3, #1]
 8001926:	e00e      	b.n	8001946 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	f003 0207 	and.w	r2, r3, #7
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	b2da      	uxtb	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_PCD_EP_ClrStall+0x82>
 8001962:	2302      	movs	r3, #2
 8001964:	e00e      	b.n	8001984 <HAL_PCD_EP_ClrStall+0xa0>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68f9      	ldr	r1, [r7, #12]
 8001974:	4618      	mov	r0, r3
 8001976:	f004 fcad 	bl	80062d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08e      	sub	sp, #56	; 0x38
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001994:	e2df      	b.n	8001f56 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800199e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80019ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 8158 	bne.w	8001c66 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d152      	bne.n	8001a66 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019d0:	81fb      	strh	r3, [r7, #14]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	89fb      	ldrh	r3, [r7, #14]
 80019d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3328      	adds	r3, #40	; 0x28
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	3302      	adds	r3, #2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	441a      	add	r2, r3
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a24:	2100      	movs	r1, #0
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f009 f84d 	bl	800aac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 828e 	beq.w	8001f56 <PCD_EP_ISR_Handler+0x5ca>
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 8289 	bne.w	8001f56 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b292      	uxth	r2, r2
 8001a58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a64:	e277      	b.n	8001f56 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d034      	beq.n	8001aea <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	3306      	adds	r3, #6
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f004 fd3a 	bl	8006538 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	823b      	strh	r3, [r7, #16]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	8a3a      	ldrh	r2, [r7, #16]
 8001ada:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ade:	b292      	uxth	r2, r2
 8001ae0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f008 ffc2 	bl	800aa6c <HAL_PCD_SetupStageCallback>
 8001ae8:	e235      	b.n	8001f56 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001aea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f280 8231 	bge.w	8001f56 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b00:	4013      	ands	r3, r2
 8001b02:	83bb      	strh	r3, [r7, #28]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	8bba      	ldrh	r2, [r7, #28]
 8001b0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b0e:	b292      	uxth	r2, r2
 8001b10:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4413      	add	r3, r2
 8001b26:	3306      	adds	r3, #6
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d019      	beq.n	8001b7a <PCD_EP_ISR_Handler+0x1ee>
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d015      	beq.n	8001b7a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	6959      	ldr	r1, [r3, #20]
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	f004 fcea 	bl	8006538 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	441a      	add	r2, r3
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b72:	2100      	movs	r1, #0
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f008 ff8b 	bl	800aa90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	4413      	add	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d112      	bne.n	8001bc8 <PCD_EP_ISR_Handler+0x23c>
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	801a      	strh	r2, [r3, #0]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	801a      	strh	r2, [r3, #0]
 8001bc6:	e02f      	b.n	8001c28 <PCD_EP_ISR_Handler+0x29c>
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8001bce:	d813      	bhi.n	8001bf8 <PCD_EP_ISR_Handler+0x26c>
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <PCD_EP_ISR_Handler+0x25e>
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be6:	3301      	adds	r3, #1
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	029b      	lsls	r3, r3, #10
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	e017      	b.n	8001c28 <PCD_EP_ISR_Handler+0x29c>
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <PCD_EP_ISR_Handler+0x286>
 8001c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
 8001c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c38:	827b      	strh	r3, [r7, #18]
 8001c3a:	8a7b      	ldrh	r3, [r7, #18]
 8001c3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c40:	827b      	strh	r3, [r7, #18]
 8001c42:	8a7b      	ldrh	r3, [r7, #18]
 8001c44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c48:	827b      	strh	r3, [r7, #18]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	8a7b      	ldrh	r3, [r7, #18]
 8001c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	8013      	strh	r3, [r2, #0]
 8001c64:	e177      	b.n	8001f56 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c78:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f280 80ea 	bge.w	8001e56 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c98:	4013      	ands	r3, r2
 8001c9a:	853b      	strh	r3, [r7, #40]	; 0x28
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001cac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001cb4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	7b1b      	ldrb	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d122      	bne.n	8001d18 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3306      	adds	r3, #6
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cfa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001cfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8087 	beq.w	8001e12 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	6959      	ldr	r1, [r3, #20]
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	88da      	ldrh	r2, [r3, #6]
 8001d10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d12:	f004 fc11 	bl	8006538 <USB_ReadPMA>
 8001d16:	e07c      	b.n	8001e12 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	78db      	ldrb	r3, [r3, #3]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d108      	bne.n	8001d32 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d22:	461a      	mov	r2, r3
 8001d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f923 	bl	8001f72 <HAL_PCD_EP_DB_Receive>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001d30:	e06f      	b.n	8001e12 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	441a      	add	r2, r3
 8001d5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d021      	beq.n	8001dd0 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3302      	adds	r3, #2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001db6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d02a      	beq.n	8001e12 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	6959      	ldr	r1, [r3, #20]
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	891a      	ldrh	r2, [r3, #8]
 8001dc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dca:	f004 fbb5 	bl	8006538 <USB_ReadPMA>
 8001dce:	e020      	b.n	8001e12 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	3306      	adds	r3, #6
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001dfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	6959      	ldr	r1, [r3, #20]
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	895a      	ldrh	r2, [r3, #10]
 8001e0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e0e:	f004 fb93 	bl	8006538 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e18:	441a      	add	r2, r3
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e24:	441a      	add	r2, r3
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <PCD_EP_ISR_Handler+0x4b0>
 8001e32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d206      	bcs.n	8001e4a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f008 fe24 	bl	800aa90 <HAL_PCD_DataOutStageCallback>
 8001e48:	e005      	b.n	8001e56 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 f8cf 	bl	8004ff4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d07a      	beq.n	8001f56 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e8e:	843b      	strh	r3, [r7, #32]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	441a      	add	r2, r3
 8001e9e:	8c3b      	ldrh	r3, [r7, #32]
 8001ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	78db      	ldrb	r3, [r3, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d108      	bne.n	8001ec6 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d146      	bne.n	8001f4a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ebc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d141      	bne.n	8001f4a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	3302      	adds	r3, #2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eee:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	699a      	ldr	r2, [r3, #24]
 8001ef4:	8bfb      	ldrh	r3, [r7, #30]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d906      	bls.n	8001f08 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	8bfb      	ldrh	r3, [r7, #30]
 8001f00:	1ad2      	subs	r2, r2, r3
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	619a      	str	r2, [r3, #24]
 8001f06:	e002      	b.n	8001f0e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f008 fdd2 	bl	800aac6 <HAL_PCD_DataInStageCallback>
 8001f22:	e018      	b.n	8001f56 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	8bfb      	ldrh	r3, [r7, #30]
 8001f2a:	441a      	add	r2, r3
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	69da      	ldr	r2, [r3, #28]
 8001f34:	8bfb      	ldrh	r3, [r7, #30]
 8001f36:	441a      	add	r2, r3
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 f856 	bl	8004ff4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001f48:	e005      	b.n	8001f56 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f91b 	bl	800218c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f6ff ad17 	blt.w	8001996 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3738      	adds	r7, #56	; 0x38
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b088      	sub	sp, #32
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d07e      	beq.n	8002088 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	699a      	ldr	r2, [r3, #24]
 8001fb8:	8b7b      	ldrh	r3, [r7, #26]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d306      	bcc.n	8001fcc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	8b7b      	ldrh	r3, [r7, #26]
 8001fc4:	1ad2      	subs	r2, r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	619a      	str	r2, [r3, #24]
 8001fca:	e002      	b.n	8001fd2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d123      	bne.n	8002022 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff4:	833b      	strh	r3, [r7, #24]
 8001ff6:	8b3b      	ldrh	r3, [r7, #24]
 8001ff8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ffc:	833b      	strh	r3, [r7, #24]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	441a      	add	r2, r3
 800200c:	8b3b      	ldrh	r3, [r7, #24]
 800200e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800201a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201e:	b29b      	uxth	r3, r3
 8002020:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01f      	beq.n	800206c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002046:	82fb      	strh	r3, [r7, #22]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	441a      	add	r2, r3
 8002056:	8afb      	ldrh	r3, [r7, #22]
 8002058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800205c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002068:	b29b      	uxth	r3, r3
 800206a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800206c:	8b7b      	ldrh	r3, [r7, #26]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8087 	beq.w	8002182 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	6959      	ldr	r1, [r3, #20]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	891a      	ldrh	r2, [r3, #8]
 8002080:	8b7b      	ldrh	r3, [r7, #26]
 8002082:	f004 fa59 	bl	8006538 <USB_ReadPMA>
 8002086:	e07c      	b.n	8002182 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	3306      	adds	r3, #6
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	8b7b      	ldrh	r3, [r7, #26]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d306      	bcc.n	80020ca <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	699a      	ldr	r2, [r3, #24]
 80020c0:	8b7b      	ldrh	r3, [r7, #26]
 80020c2:	1ad2      	subs	r2, r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	619a      	str	r2, [r3, #24]
 80020c8:	e002      	b.n	80020d0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d123      	bne.n	8002120 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f2:	83fb      	strh	r3, [r7, #30]
 80020f4:	8bfb      	ldrh	r3, [r7, #30]
 80020f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020fa:	83fb      	strh	r3, [r7, #30]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	441a      	add	r2, r3
 800210a:	8bfb      	ldrh	r3, [r7, #30]
 800210c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211c:	b29b      	uxth	r3, r3
 800211e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11f      	bne.n	800216a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002144:	83bb      	strh	r3, [r7, #28]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	441a      	add	r2, r3
 8002154:	8bbb      	ldrh	r3, [r7, #28]
 8002156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800215a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800215e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002162:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002166:	b29b      	uxth	r3, r3
 8002168:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800216a:	8b7b      	ldrh	r3, [r7, #26]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	6959      	ldr	r1, [r3, #20]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	895a      	ldrh	r2, [r3, #10]
 800217c:	8b7b      	ldrh	r3, [r7, #26]
 800217e:	f004 f9db 	bl	8006538 <USB_ReadPMA>
    }
  }

  return count;
 8002182:	8b7b      	ldrh	r3, [r7, #26]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b092      	sub	sp, #72	; 0x48
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8132 	beq.w	800240a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	3302      	adds	r3, #2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d906      	bls.n	80021e8 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021e0:	1ad2      	subs	r2, r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	619a      	str	r2, [r3, #24]
 80021e6:	e002      	b.n	80021ee <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d12c      	bne.n	8002250 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4619      	mov	r1, r3
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f008 fc62 	bl	800aac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 822f 	beq.w	800266c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002228:	827b      	strh	r3, [r7, #18]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	441a      	add	r2, r3
 8002238:	8a7b      	ldrh	r3, [r7, #18]
 800223a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800223e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002242:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224a:	b29b      	uxth	r3, r3
 800224c:	8013      	strh	r3, [r2, #0]
 800224e:	e20d      	b.n	800266c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01f      	beq.n	800229a <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002274:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	441a      	add	r2, r3
 8002284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800228a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800228e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002296:	b29b      	uxth	r3, r3
 8002298:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	f040 81e3 	bne.w	800266c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022ac:	441a      	add	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022b8:	441a      	add	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	6a1a      	ldr	r2, [r3, #32]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d309      	bcc.n	80022de <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d6:	1ad2      	subs	r2, r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	621a      	str	r2, [r3, #32]
 80022dc:	e014      	b.n	8002308 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80022e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022e8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022f2:	e009      	b.n	8002308 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	785b      	ldrb	r3, [r3, #1]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d155      	bne.n	80023bc <HAL_PCD_EP_DB_Transmit+0x230>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4413      	add	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	011a      	lsls	r2, r3, #4
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4413      	add	r3, r2
 8002332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233a:	2b00      	cmp	r3, #0
 800233c:	d112      	bne.n	8002364 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002348:	b29a      	uxth	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	801a      	strh	r2, [r3, #0]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800235c:	b29a      	uxth	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	e047      	b.n	80023f4 <HAL_PCD_EP_DB_Transmit+0x268>
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002366:	2b3e      	cmp	r3, #62	; 0x3e
 8002368:	d811      	bhi.n	800238e <HAL_PCD_EP_DB_Transmit+0x202>
 800236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	3301      	adds	r3, #1
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	b29b      	uxth	r3, r3
 8002384:	029b      	lsls	r3, r3, #10
 8002386:	b29a      	uxth	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	e032      	b.n	80023f4 <HAL_PCD_EP_DB_Transmit+0x268>
 800238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
 8002394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x218>
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	3b01      	subs	r3, #1
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	029b      	lsls	r3, r3, #10
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	801a      	strh	r2, [r3, #0]
 80023ba:	e01b      	b.n	80023f4 <HAL_PCD_EP_DB_Transmit+0x268>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	785b      	ldrb	r3, [r3, #1]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d117      	bne.n	80023f4 <HAL_PCD_EP_DB_Transmit+0x268>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	623b      	str	r3, [r7, #32]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	4413      	add	r3, r2
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	011a      	lsls	r2, r3, #4
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	4413      	add	r3, r2
 80023e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	6959      	ldr	r1, [r3, #20]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	891a      	ldrh	r2, [r3, #8]
 8002400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002402:	b29b      	uxth	r3, r3
 8002404:	f004 f854 	bl	80064b0 <USB_WritePMA>
 8002408:	e130      	b.n	800266c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	3306      	adds	r3, #6
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002432:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800243a:	429a      	cmp	r2, r3
 800243c:	d306      	bcc.n	800244c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002444:	1ad2      	subs	r2, r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	619a      	str	r2, [r3, #24]
 800244a:	e002      	b.n	8002452 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d12c      	bne.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f008 fb30 	bl	800aac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 80fd 	bne.w	800266c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	441a      	add	r2, r3
 800249c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800249e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	8013      	strh	r3, [r2, #0]
 80024b2:	e0db      	b.n	800266c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11f      	bne.n	80024fe <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	441a      	add	r2, r3
 80024e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002504:	2b01      	cmp	r3, #1
 8002506:	f040 80b1 	bne.w	800266c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002510:	441a      	add	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800251c:	441a      	add	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6a1a      	ldr	r2, [r3, #32]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	429a      	cmp	r2, r3
 800252c:	d309      	bcc.n	8002542 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	6a1a      	ldr	r2, [r3, #32]
 8002538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253a:	1ad2      	subs	r2, r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	621a      	str	r2, [r3, #32]
 8002540:	e014      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800254a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800254c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002556:	e009      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	785b      	ldrb	r3, [r3, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d155      	bne.n	8002626 <HAL_PCD_EP_DB_Transmit+0x49a>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	647b      	str	r3, [r7, #68]	; 0x44
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258e:	4413      	add	r3, r2
 8002590:	647b      	str	r3, [r7, #68]	; 0x44
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	011a      	lsls	r2, r3, #4
 8002598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259a:	4413      	add	r3, r2
 800259c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025a0:	643b      	str	r3, [r7, #64]	; 0x40
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d112      	bne.n	80025ce <HAL_PCD_EP_DB_Transmit+0x442>
 80025a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ca:	801a      	strh	r2, [r3, #0]
 80025cc:	e044      	b.n	8002658 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	2b3e      	cmp	r3, #62	; 0x3e
 80025d2:	d811      	bhi.n	80025f8 <HAL_PCD_EP_DB_Transmit+0x46c>
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_PCD_EP_DB_Transmit+0x45e>
 80025e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e6:	3301      	adds	r3, #1
 80025e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	029b      	lsls	r3, r3, #10
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	e02f      	b.n	8002658 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <HAL_PCD_EP_DB_Transmit+0x482>
 8002608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260a:	3b01      	subs	r3, #1
 800260c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002610:	b29b      	uxth	r3, r3
 8002612:	029b      	lsls	r3, r3, #10
 8002614:	b29b      	uxth	r3, r3
 8002616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800261a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800261e:	b29a      	uxth	r2, r3
 8002620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002622:	801a      	strh	r2, [r3, #0]
 8002624:	e018      	b.n	8002658 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d114      	bne.n	8002658 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	4413      	add	r3, r2
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	011a      	lsls	r2, r3, #4
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	4413      	add	r3, r2
 800264a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	b29a      	uxth	r2, r3
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	6959      	ldr	r1, [r3, #20]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	895a      	ldrh	r2, [r3, #10]
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	b29b      	uxth	r3, r3
 8002668:	f003 ff22 	bl	80064b0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002686:	823b      	strh	r3, [r7, #16]
 8002688:	8a3b      	ldrh	r3, [r7, #16]
 800268a:	f083 0310 	eor.w	r3, r3, #16
 800268e:	823b      	strh	r3, [r7, #16]
 8002690:	8a3b      	ldrh	r3, [r7, #16]
 8002692:	f083 0320 	eor.w	r3, r3, #32
 8002696:	823b      	strh	r3, [r7, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	441a      	add	r2, r3
 80026a6:	8a3b      	ldrh	r3, [r7, #16]
 80026a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3748      	adds	r7, #72	; 0x48
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b087      	sub	sp, #28
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	817b      	strh	r3, [r7, #10]
 80026d4:	4613      	mov	r3, r2
 80026d6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026d8:	897b      	ldrh	r3, [r7, #10]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e4:	897b      	ldrh	r3, [r7, #10]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e009      	b.n	8002710 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026fc:	897a      	ldrh	r2, [r7, #10]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4413      	add	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002710:	893b      	ldrh	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2200      	movs	r2, #0
 800271a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	b29a      	uxth	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	80da      	strh	r2, [r3, #6]
 8002724:	e00b      	b.n	800273e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2201      	movs	r2, #1
 800272a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	b29a      	uxth	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	0c1b      	lsrs	r3, r3, #16
 8002738:	b29a      	uxth	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
	...

0800274c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	420e0020 	.word	0x420e0020

08002764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e26c      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8087 	beq.w	8002892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002784:	4b92      	ldr	r3, [pc, #584]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b04      	cmp	r3, #4
 800278e:	d00c      	beq.n	80027aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002790:	4b8f      	ldr	r3, [pc, #572]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d112      	bne.n	80027c2 <HAL_RCC_OscConfig+0x5e>
 800279c:	4b8c      	ldr	r3, [pc, #560]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a8:	d10b      	bne.n	80027c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027aa:	4b89      	ldr	r3, [pc, #548]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d06c      	beq.n	8002890 <HAL_RCC_OscConfig+0x12c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d168      	bne.n	8002890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e246      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x76>
 80027cc:	4b80      	ldr	r3, [pc, #512]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a7f      	ldr	r2, [pc, #508]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	e02e      	b.n	8002838 <HAL_RCC_OscConfig+0xd4>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x98>
 80027e2:	4b7b      	ldr	r3, [pc, #492]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a7a      	ldr	r2, [pc, #488]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a77      	ldr	r2, [pc, #476]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e01d      	b.n	8002838 <HAL_RCC_OscConfig+0xd4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0xbc>
 8002806:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a71      	ldr	r2, [pc, #452]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800280c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e00b      	b.n	8002838 <HAL_RCC_OscConfig+0xd4>
 8002820:	4b6b      	ldr	r3, [pc, #428]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a67      	ldr	r2, [pc, #412]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe f952 	bl	8000ae8 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7fe f94e 	bl	8000ae8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1fa      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0xe4>
 8002866:	e014      	b.n	8002892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe f93e 	bl	8000ae8 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002870:	f7fe f93a 	bl	8000ae8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e1e6      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x10c>
 800288e:	e000      	b.n	8002892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d063      	beq.n	8002966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028aa:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d11c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x18c>
 80028b6:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d116      	bne.n	80028f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x176>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e1ba      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4939      	ldr	r1, [pc, #228]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	e03a      	b.n	8002966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d020      	beq.n	800293a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f8:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <HAL_RCC_OscConfig+0x270>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe f8f3 	bl	8000ae8 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002906:	f7fe f8ef 	bl	8000ae8 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e19b      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002924:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4927      	ldr	r1, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
 8002938:	e015      	b.n	8002966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_RCC_OscConfig+0x270>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe f8d2 	bl	8000ae8 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002948:	f7fe f8ce 	bl	8000ae8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e17a      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d03a      	beq.n	80029e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d019      	beq.n	80029ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_RCC_OscConfig+0x274>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7fe f8b2 	bl	8000ae8 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe f8ae 	bl	8000ae8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e15a      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCC_OscConfig+0x26c>)
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029a6:	2001      	movs	r0, #1
 80029a8:	f000 fb0a 	bl	8002fc0 <RCC_Delay>
 80029ac:	e01c      	b.n	80029e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_RCC_OscConfig+0x274>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fe f898 	bl	8000ae8 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ba:	e00f      	b.n	80029dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029bc:	f7fe f894 	bl	8000ae8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d908      	bls.n	80029dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e140      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	42420000 	.word	0x42420000
 80029d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029dc:	4b9e      	ldr	r3, [pc, #632]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e9      	bne.n	80029bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a6 	beq.w	8002b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fa:	4b97      	ldr	r3, [pc, #604]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	4b94      	ldr	r3, [pc, #592]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	4a93      	ldr	r2, [pc, #588]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	61d3      	str	r3, [r2, #28]
 8002a12:	4b91      	ldr	r3, [pc, #580]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b8e      	ldr	r3, [pc, #568]	; (8002c5c <HAL_RCC_OscConfig+0x4f8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d118      	bne.n	8002a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2e:	4b8b      	ldr	r3, [pc, #556]	; (8002c5c <HAL_RCC_OscConfig+0x4f8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a8a      	ldr	r2, [pc, #552]	; (8002c5c <HAL_RCC_OscConfig+0x4f8>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe f855 	bl	8000ae8 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a42:	f7fe f851 	bl	8000ae8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b64      	cmp	r3, #100	; 0x64
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e0fd      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <HAL_RCC_OscConfig+0x4f8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x312>
 8002a68:	4b7b      	ldr	r3, [pc, #492]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4a7a      	ldr	r2, [pc, #488]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6213      	str	r3, [r2, #32]
 8002a74:	e02d      	b.n	8002ad2 <HAL_RCC_OscConfig+0x36e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x334>
 8002a7e:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4a75      	ldr	r2, [pc, #468]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6213      	str	r3, [r2, #32]
 8002a8a:	4b73      	ldr	r3, [pc, #460]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a72      	ldr	r2, [pc, #456]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	f023 0304 	bic.w	r3, r3, #4
 8002a94:	6213      	str	r3, [r2, #32]
 8002a96:	e01c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x36e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCC_OscConfig+0x356>
 8002aa0:	4b6d      	ldr	r3, [pc, #436]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4a6c      	ldr	r2, [pc, #432]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	6213      	str	r3, [r2, #32]
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4a69      	ldr	r2, [pc, #420]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6213      	str	r3, [r2, #32]
 8002ab8:	e00b      	b.n	8002ad2 <HAL_RCC_OscConfig+0x36e>
 8002aba:	4b67      	ldr	r3, [pc, #412]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4a66      	ldr	r2, [pc, #408]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6213      	str	r3, [r2, #32]
 8002ac6:	4b64      	ldr	r3, [pc, #400]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4a63      	ldr	r2, [pc, #396]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	f023 0304 	bic.w	r3, r3, #4
 8002ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d015      	beq.n	8002b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ada:	f7fe f805 	bl	8000ae8 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe f801 	bl	8000ae8 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0ab      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	4b57      	ldr	r3, [pc, #348]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ee      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x37e>
 8002b04:	e014      	b.n	8002b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7fd ffef 	bl	8000ae8 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fd ffeb 	bl	8000ae8 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e095      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b24:	4b4c      	ldr	r3, [pc, #304]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ee      	bne.n	8002b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d105      	bne.n	8002b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b36:	4b48      	ldr	r3, [pc, #288]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4a47      	ldr	r2, [pc, #284]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8081 	beq.w	8002c4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b4c:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d061      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d146      	bne.n	8002bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b60:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <HAL_RCC_OscConfig+0x4fc>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fd ffbf 	bl	8000ae8 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fd ffbb 	bl	8000ae8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e067      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b80:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d108      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b96:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	492d      	ldr	r1, [pc, #180]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a19      	ldr	r1, [r3, #32]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	4927      	ldr	r1, [pc, #156]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_RCC_OscConfig+0x4fc>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fd ff8f 	bl	8000ae8 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fd ff8b 	bl	8000ae8 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e037      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x46a>
 8002bec:	e02f      	b.n	8002c4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_RCC_OscConfig+0x4fc>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fd ff78 	bl	8000ae8 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fd ff74 	bl	8000ae8 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e020      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x498>
 8002c1a:	e018      	b.n	8002c4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e013      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_OscConfig+0x4f4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d001      	beq.n	8002c4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	42420060 	.word	0x42420060

08002c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0d0      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	4965      	ldr	r1, [pc, #404]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b8      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	494d      	ldr	r1, [pc, #308]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d040      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d115      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e073      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06b      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4936      	ldr	r1, [pc, #216]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d54:	f7fd fec8 	bl	8000ae8 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7fd fec4 	bl	8000ae8 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e053      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 020c 	and.w	r2, r3, #12
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d1eb      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d84:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d210      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 0207 	bic.w	r2, r3, #7
 8002d9a:	4922      	ldr	r1, [pc, #136]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e032      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4916      	ldr	r1, [pc, #88]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	490e      	ldr	r1, [pc, #56]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002df2:	f000 f821 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002df6:	4601      	mov	r1, r0
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	fa21 f303 	lsr.w	r3, r1, r3
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1cc>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1d0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fd fd54 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	0800f154 	.word	0x0800f154
 8002e30:	20000000 	.word	0x20000000
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	b490      	push	{r4, r7}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e40:	1d3c      	adds	r4, r7, #4
 8002e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e48:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d002      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x40>
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_GetSysClockFreq+0x46>
 8002e76:	e02d      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e7a:	623b      	str	r3, [r7, #32]
      break;
 8002e7c:	e02d      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	0c9b      	lsrs	r3, r3, #18
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0c5b      	lsrs	r3, r3, #17
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eaa:	4413      	add	r3, r2
 8002eac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002eb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eb6:	fb02 f203 	mul.w	r2, r2, r3
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	e004      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ec8:	fb02 f303 	mul.w	r3, r2, r3
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	623b      	str	r3, [r7, #32]
      break;
 8002ed2:	e002      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ed6:	623b      	str	r3, [r7, #32]
      break;
 8002ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eda:	6a3b      	ldr	r3, [r7, #32]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc90      	pop	{r4, r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	0800e938 	.word	0x0800e938
 8002eec:	0800e948 	.word	0x0800e948
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	007a1200 	.word	0x007a1200
 8002ef8:	003d0900 	.word	0x003d0900

08002efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f00:	4b02      	ldr	r3, [pc, #8]	; (8002f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	20000000 	.word	0x20000000

08002f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f14:	f7ff fff2 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f18:	4601      	mov	r1, r0
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4a03      	ldr	r2, [pc, #12]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	0800f164 	.word	0x0800f164

08002f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f3c:	f7ff ffde 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f40:	4601      	mov	r1, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	0adb      	lsrs	r3, r3, #11
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4a03      	ldr	r2, [pc, #12]	; (8002f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	0800f164 	.word	0x0800f164

08002f60 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_RCC_GetClockConfig+0x58>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0203 	and.w	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_RCC_GetClockConfig+0x58>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_GetClockConfig+0x58>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_RCC_GetClockConfig+0x58>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	08db      	lsrs	r3, r3, #3
 8002f9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCC_GetClockConfig+0x5c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0207 	and.w	r2, r3, #7
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40022000 	.word	0x40022000

08002fc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <RCC_Delay+0x34>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <RCC_Delay+0x38>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0a5b      	lsrs	r3, r3, #9
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fdc:	bf00      	nop
  }
  while (Delay --);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	60fa      	str	r2, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f9      	bne.n	8002fdc <RCC_Delay+0x1c>
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	10624dd3 	.word	0x10624dd3

08002ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d07d      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003018:	2300      	movs	r3, #0
 800301a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301c:	4b4f      	ldr	r3, [pc, #316]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10d      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	4a4b      	ldr	r2, [pc, #300]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003032:	61d3      	str	r3, [r2, #28]
 8003034:	4b49      	ldr	r3, [pc, #292]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003040:	2301      	movs	r3, #1
 8003042:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	4b46      	ldr	r3, [pc, #280]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d118      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003050:	4b43      	ldr	r3, [pc, #268]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a42      	ldr	r2, [pc, #264]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305c:	f7fd fd44 	bl	8000ae8 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003062:	e008      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003064:	f7fd fd40 	bl	8000ae8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e06d      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003076:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003082:	4b36      	ldr	r3, [pc, #216]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d02e      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	429a      	cmp	r2, r3
 800309e:	d027      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030a0:	4b2e      	ldr	r3, [pc, #184]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030aa:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030b0:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030b6:	4a29      	ldr	r2, [pc, #164]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d014      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fd fd0f 	bl	8000ae8 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f7fd fd0b 	bl	8000ae8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e036      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ee      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4917      	ldr	r1, [pc, #92]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003112:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	490b      	ldr	r1, [pc, #44]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	d008      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	4904      	ldr	r1, [pc, #16]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	40007000 	.word	0x40007000
 8003164:	42420440 	.word	0x42420440

08003168 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b08d      	sub	sp, #52	; 0x34
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003170:	4b55      	ldr	r3, [pc, #340]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003172:	f107 040c 	add.w	r4, r7, #12
 8003176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800317c:	4b53      	ldr	r3, [pc, #332]	; (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	2300      	movs	r3, #0
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	2300      	movs	r3, #0
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d07f      	beq.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800319c:	2b10      	cmp	r3, #16
 800319e:	d002      	beq.n	80031a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d048      	beq.n	8003236 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80031a4:	e08b      	b.n	80032be <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80031a6:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80031ac:	4b48      	ldr	r3, [pc, #288]	; (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d07f      	beq.n	80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	0c9b      	lsrs	r3, r3, #18
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80031c4:	4413      	add	r3, r2
 80031c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031ca:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d018      	beq.n	8003208 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031d6:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	0c5b      	lsrs	r3, r3, #17
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80031e4:	4413      	add	r3, r2
 80031e6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00d      	beq.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80031f6:	4a37      	ldr	r2, [pc, #220]	; (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	fb02 f303 	mul.w	r3, r2, r3
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003206:	e004      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	4a33      	ldr	r2, [pc, #204]	; (80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800320c:	fb02 f303 	mul.w	r3, r2, r3
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003212:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321e:	d102      	bne.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003224:	e048      	b.n	80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4a2c      	ldr	r2, [pc, #176]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	085b      	lsrs	r3, r3, #1
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003234:	e040      	b.n	80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003236:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003246:	d108      	bne.n	800325a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
 8003258:	e01f      	b.n	800329a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003264:	d109      	bne.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003272:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
 8003278:	e00f      	b.n	800329a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003284:	d11a      	bne.n	80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d014      	beq.n	80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003292:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003298:	e010      	b.n	80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800329a:	e00f      	b.n	80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800329c:	f7ff fe4c 	bl	8002f38 <HAL_RCC_GetPCLK2Freq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	0b9b      	lsrs	r3, r3, #14
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	3301      	adds	r3, #1
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032b6:	e002      	b.n	80032be <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80032bc:	bf00      	nop
    }
  }
  return (frequency);
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3734      	adds	r7, #52	; 0x34
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd90      	pop	{r4, r7, pc}
 80032c8:	0800e94c 	.word	0x0800e94c
 80032cc:	0800e95c 	.word	0x0800e95c
 80032d0:	40021000 	.word	0x40021000
 80032d4:	007a1200 	.word	0x007a1200
 80032d8:	003d0900 	.word	0x003d0900
 80032dc:	aaaaaaab 	.word	0xaaaaaaab

080032e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e084      	b.n	8003400 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7c5b      	ldrb	r3, [r3, #17]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd f98c 	bl	8000624 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f87a 	bl	800340c <HAL_RTC_WaitForSynchro>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2204      	movs	r2, #4
 8003322:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e06b      	b.n	8003400 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f89c 	bl	8003466 <RTC_EnterInitMode>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2204      	movs	r2, #4
 8003338:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e060      	b.n	8003400 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0207 	bic.w	r2, r2, #7
 800334c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003356:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <HAL_RTC_Init+0x128>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a2b      	ldr	r2, [pc, #172]	; (8003408 <HAL_RTC_Init+0x128>)
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003362:	4b29      	ldr	r3, [pc, #164]	; (8003408 <HAL_RTC_Init+0x128>)
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4926      	ldr	r1, [pc, #152]	; (8003408 <HAL_RTC_Init+0x128>)
 8003370:	4313      	orrs	r3, r2
 8003372:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d003      	beq.n	8003386 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e00e      	b.n	80033a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003386:	2001      	movs	r0, #1
 8003388:	f7ff feee 	bl	8003168 <HAL_RCCEx_GetPeriphCLKFreq>
 800338c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2204      	movs	r2, #4
 8003398:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e030      	b.n	8003400 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 010f 	bic.w	r1, r3, #15
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	0c1a      	lsrs	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	b291      	uxth	r1, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f870 	bl	80034b6 <RTC_ExitInitMode>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2204      	movs	r2, #4
 80033e0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e00c      	b.n	8003400 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80033fe:	2300      	movs	r3, #0
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40006c00 	.word	0x40006c00

0800340c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e01d      	b.n	800345e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0208 	bic.w	r2, r2, #8
 8003430:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003432:	f7fd fb59 	bl	8000ae8 <HAL_GetTick>
 8003436:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003438:	e009      	b.n	800344e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800343a:	f7fd fb55 	bl	8000ae8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003448:	d901      	bls.n	800344e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e007      	b.n	800345e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0ee      	beq.n	800343a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003472:	f7fd fb39 	bl	8000ae8 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003478:	e009      	b.n	800348e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800347a:	f7fd fb35 	bl	8000ae8 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003488:	d901      	bls.n	800348e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e00f      	b.n	80034ae <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ee      	beq.n	800347a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0210 	orr.w	r2, r2, #16
 80034aa:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0210 	bic.w	r2, r2, #16
 80034d0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80034d2:	f7fd fb09 	bl	8000ae8 <HAL_GetTick>
 80034d6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034d8:	e009      	b.n	80034ee <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80034da:	f7fd fb05 	bl	8000ae8 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034e8:	d901      	bls.n	80034ee <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e007      	b.n	80034fe <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ee      	beq.n	80034da <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e076      	b.n	8003606 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	2b00      	cmp	r3, #0
 800351e:	d108      	bne.n	8003532 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003528:	d009      	beq.n	800353e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	61da      	str	r2, [r3, #28]
 8003530:	e005      	b.n	800353e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d106      	bne.n	800355e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fd f8f3 	bl	8000744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003574:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c2:	ea42 0103 	orr.w	r1, r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	0c1a      	lsrs	r2, r3, #16
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f002 0204 	and.w	r2, r2, #4
 80035e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b088      	sub	sp, #32
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_SPI_Transmit+0x22>
 800362c:	2302      	movs	r3, #2
 800362e:	e126      	b.n	800387e <HAL_SPI_Transmit+0x270>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003638:	f7fd fa56 	bl	8000ae8 <HAL_GetTick>
 800363c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d002      	beq.n	8003654 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800364e:	2302      	movs	r3, #2
 8003650:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003652:	e10b      	b.n	800386c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_SPI_Transmit+0x52>
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003664:	e102      	b.n	800386c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2203      	movs	r2, #3
 800366a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ac:	d10f      	bne.n	80036ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d007      	beq.n	80036ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f4:	d14b      	bne.n	800378e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_SPI_Transmit+0xf6>
 80036fe:	8afb      	ldrh	r3, [r7, #22]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d13e      	bne.n	8003782 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	881a      	ldrh	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	1c9a      	adds	r2, r3, #2
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003728:	e02b      	b.n	8003782 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b02      	cmp	r3, #2
 8003736:	d112      	bne.n	800375e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	881a      	ldrh	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	1c9a      	adds	r2, r3, #2
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	86da      	strh	r2, [r3, #54]	; 0x36
 800375c:	e011      	b.n	8003782 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800375e:	f7fd f9c3 	bl	8000ae8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d803      	bhi.n	8003776 <HAL_SPI_Transmit+0x168>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d102      	bne.n	800377c <HAL_SPI_Transmit+0x16e>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003780:	e074      	b.n	800386c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ce      	bne.n	800372a <HAL_SPI_Transmit+0x11c>
 800378c:	e04c      	b.n	8003828 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_SPI_Transmit+0x18e>
 8003796:	8afb      	ldrh	r3, [r7, #22]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d140      	bne.n	800381e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	7812      	ldrb	r2, [r2, #0]
 80037a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037c2:	e02c      	b.n	800381e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d113      	bne.n	80037fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	7812      	ldrb	r2, [r2, #0]
 80037de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80037f8:	e011      	b.n	800381e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037fa:	f7fd f975 	bl	8000ae8 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d803      	bhi.n	8003812 <HAL_SPI_Transmit+0x204>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d102      	bne.n	8003818 <HAL_SPI_Transmit+0x20a>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800381c:	e026      	b.n	800386c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1cd      	bne.n	80037c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	6839      	ldr	r1, [r7, #0]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 fbb7 	bl	8003fa0 <SPI_EndRxTxTransaction>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10a      	bne.n	800385c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e000      	b.n	800386c <HAL_SPI_Transmit+0x25e>
  }

error:
 800386a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800387c:	7ffb      	ldrb	r3, [r7, #31]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b088      	sub	sp, #32
 800388a:	af02      	add	r7, sp, #8
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	4613      	mov	r3, r2
 8003894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a2:	d112      	bne.n	80038ca <HAL_SPI_Receive+0x44>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10e      	bne.n	80038ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2204      	movs	r2, #4
 80038b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	4613      	mov	r3, r2
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f8f1 	bl	8003aa8 <HAL_SPI_TransmitReceive>
 80038c6:	4603      	mov	r3, r0
 80038c8:	e0ea      	b.n	8003aa0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_SPI_Receive+0x52>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e0e3      	b.n	8003aa0 <HAL_SPI_Receive+0x21a>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038e0:	f7fd f902 	bl	8000ae8 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d002      	beq.n	80038f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
 80038f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038f6:	e0ca      	b.n	8003a8e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_SPI_Receive+0x7e>
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003908:	e0c1      	b.n	8003a8e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2204      	movs	r2, #4
 800390e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	88fa      	ldrh	r2, [r7, #6]
 8003922:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003950:	d10f      	bne.n	8003972 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003960:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003970:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d007      	beq.n	8003990 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d162      	bne.n	8003a5e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003998:	e02e      	b.n	80039f8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d115      	bne.n	80039d4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f103 020c 	add.w	r2, r3, #12
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	7812      	ldrb	r2, [r2, #0]
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039d2:	e011      	b.n	80039f8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d4:	f7fd f888 	bl	8000ae8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d803      	bhi.n	80039ec <HAL_SPI_Receive+0x166>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d102      	bne.n	80039f2 <HAL_SPI_Receive+0x16c>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039f6:	e04a      	b.n	8003a8e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1cb      	bne.n	800399a <HAL_SPI_Receive+0x114>
 8003a02:	e031      	b.n	8003a68 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d113      	bne.n	8003a3a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	b292      	uxth	r2, r2
 8003a1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a38:	e011      	b.n	8003a5e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a3a:	f7fd f855 	bl	8000ae8 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d803      	bhi.n	8003a52 <HAL_SPI_Receive+0x1cc>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d102      	bne.n	8003a58 <HAL_SPI_Receive+0x1d2>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a5c:	e017      	b.n	8003a8e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1cd      	bne.n	8003a04 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	6839      	ldr	r1, [r7, #0]
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fa45 	bl	8003efc <SPI_EndRxTransaction>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	75fb      	strb	r3, [r7, #23]
 8003a8a:	e000      	b.n	8003a8e <HAL_SPI_Receive+0x208>
  }

error :
 8003a8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08c      	sub	sp, #48	; 0x30
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_SPI_TransmitReceive+0x26>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e18a      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x33c>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ad6:	f7fd f807 	bl	8000ae8 <HAL_GetTick>
 8003ada:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d00f      	beq.n	8003b18 <HAL_SPI_TransmitReceive+0x70>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afe:	d107      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x68>
 8003b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d003      	beq.n	8003b18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
 8003b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b16:	e15b      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x82>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x82>
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b30:	e14e      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d003      	beq.n	8003b46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2205      	movs	r2, #5
 8003b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	887a      	ldrh	r2, [r7, #2]
 8003b56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	887a      	ldrh	r2, [r7, #2]
 8003b6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d007      	beq.n	8003b9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba2:	d178      	bne.n	8003c96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_SPI_TransmitReceive+0x10a>
 8003bac:	8b7b      	ldrh	r3, [r7, #26]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d166      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	1c9a      	adds	r2, r3, #2
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd6:	e053      	b.n	8003c80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d11b      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x176>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d016      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x176>
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d113      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	881a      	ldrh	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	1c9a      	adds	r2, r3, #2
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d119      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x1b8>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d014      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	b292      	uxth	r2, r2
 8003c42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	1c9a      	adds	r2, r3, #2
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c60:	f7fc ff42 	bl	8000ae8 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d807      	bhi.n	8003c80 <HAL_SPI_TransmitReceive+0x1d8>
 8003c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d003      	beq.n	8003c80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c7e:	e0a7      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1a6      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x130>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1a1      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x130>
 8003c94:	e07c      	b.n	8003d90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_SPI_TransmitReceive+0x1fc>
 8003c9e:	8b7b      	ldrh	r3, [r7, #26]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d16b      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	7812      	ldrb	r2, [r2, #0]
 8003cb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cca:	e057      	b.n	8003d7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d11c      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x26c>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d017      	beq.n	8003d14 <HAL_SPI_TransmitReceive+0x26c>
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d114      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d119      	bne.n	8003d56 <HAL_SPI_TransmitReceive+0x2ae>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d014      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d52:	2301      	movs	r3, #1
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d56:	f7fc fec7 	bl	8000ae8 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d803      	bhi.n	8003d6e <HAL_SPI_TransmitReceive+0x2c6>
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d102      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x2cc>
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d103      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d7a:	e029      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1a2      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x224>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d19d      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f903 	bl	8003fa0 <SPI_EndRxTxTransaction>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d006      	beq.n	8003dae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003dac:	e010      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	e000      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003dce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003de0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3730      	adds	r7, #48	; 0x30
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dfc:	f7fc fe74 	bl	8000ae8 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e0c:	f7fc fe6c 	bl	8000ae8 <HAL_GetTick>
 8003e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e12:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	015b      	lsls	r3, r3, #5
 8003e18:	0d1b      	lsrs	r3, r3, #20
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e22:	e054      	b.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d050      	beq.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e2c:	f7fc fe5c 	bl	8000ae8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d902      	bls.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d13d      	bne.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5a:	d111      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e64:	d004      	beq.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6e:	d107      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e88:	d10f      	bne.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e017      	b.n	8003eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d19b      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000000 	.word	0x20000000

08003efc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f10:	d111      	bne.n	8003f36 <SPI_EndRxTransaction+0x3a>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1a:	d004      	beq.n	8003f26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f24:	d107      	bne.n	8003f36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f34:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f3e:	d117      	bne.n	8003f70 <SPI_EndRxTransaction+0x74>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f48:	d112      	bne.n	8003f70 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2200      	movs	r2, #0
 8003f52:	2101      	movs	r1, #1
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff ff49 	bl	8003dec <SPI_WaitFlagStateUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01a      	beq.n	8003f96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e013      	b.n	8003f98 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	2180      	movs	r1, #128	; 0x80
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff ff36 	bl	8003dec <SPI_WaitFlagStateUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e000      	b.n	8003f98 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff ff18 	bl	8003dec <SPI_WaitFlagStateUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d007      	beq.n	8003fd2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	f043 0220 	orr.w	r2, r3, #32
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e000      	b.n	8003fd4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e041      	b.n	8004072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f839 	bl	800407a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f000 f9b4 	bl	8004388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d001      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e03a      	b.n	800411a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a18      	ldr	r2, [pc, #96]	; (8004124 <HAL_TIM_Base_Start_IT+0x98>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00e      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x58>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ce:	d009      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x58>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <HAL_TIM_Base_Start_IT+0x9c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x58>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a13      	ldr	r2, [pc, #76]	; (800412c <HAL_TIM_Base_Start_IT+0xa0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d111      	bne.n	8004108 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b06      	cmp	r3, #6
 80040f4:	d010      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004106:	e007      	b.n	8004118 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800

08004130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d122      	bne.n	800418c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b02      	cmp	r3, #2
 8004152:	d11b      	bne.n	800418c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0202 	mvn.w	r2, #2
 800415c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f8ed 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f8e0 	bl	8004340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f8ef 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b04      	cmp	r3, #4
 8004198:	d122      	bne.n	80041e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d11b      	bne.n	80041e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0204 	mvn.w	r2, #4
 80041b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2202      	movs	r2, #2
 80041b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f8c3 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 80041cc:	e005      	b.n	80041da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8b6 	bl	8004340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f8c5 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d122      	bne.n	8004234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d11b      	bne.n	8004234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0208 	mvn.w	r2, #8
 8004204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2204      	movs	r2, #4
 800420a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f899 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8004220:	e005      	b.n	800422e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f88c 	bl	8004340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f89b 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b10      	cmp	r3, #16
 8004240:	d122      	bne.n	8004288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b10      	cmp	r3, #16
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0210 	mvn.w	r2, #16
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2208      	movs	r2, #8
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f86f 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f862 	bl	8004340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f871 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10e      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d107      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0201 	mvn.w	r2, #1
 80042ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fc f986 	bl	80005c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	d10e      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042cc:	2b80      	cmp	r3, #128	; 0x80
 80042ce:	d107      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f8bf 	bl	800445e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ea:	2b40      	cmp	r3, #64	; 0x40
 80042ec:	d10e      	bne.n	800430c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	d107      	bne.n	800430c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f835 	bl	8004376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b20      	cmp	r3, #32
 8004318:	d10e      	bne.n	8004338 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b20      	cmp	r3, #32
 8004326:	d107      	bne.n	8004338 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0220 	mvn.w	r2, #32
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f88a 	bl	800444c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004338:	bf00      	nop
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr

08004376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a29      	ldr	r2, [pc, #164]	; (8004440 <TIM_Base_SetConfig+0xb8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00b      	beq.n	80043b8 <TIM_Base_SetConfig+0x30>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a6:	d007      	beq.n	80043b8 <TIM_Base_SetConfig+0x30>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a26      	ldr	r2, [pc, #152]	; (8004444 <TIM_Base_SetConfig+0xbc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d003      	beq.n	80043b8 <TIM_Base_SetConfig+0x30>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a25      	ldr	r2, [pc, #148]	; (8004448 <TIM_Base_SetConfig+0xc0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d108      	bne.n	80043ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <TIM_Base_SetConfig+0xb8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00b      	beq.n	80043ea <TIM_Base_SetConfig+0x62>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d8:	d007      	beq.n	80043ea <TIM_Base_SetConfig+0x62>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a19      	ldr	r2, [pc, #100]	; (8004444 <TIM_Base_SetConfig+0xbc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d003      	beq.n	80043ea <TIM_Base_SetConfig+0x62>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <TIM_Base_SetConfig+0xc0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d108      	bne.n	80043fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a07      	ldr	r2, [pc, #28]	; (8004440 <TIM_Base_SetConfig+0xb8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d103      	bne.n	8004430 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	615a      	str	r2, [r3, #20]
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800

0800444c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004470:	b084      	sub	sp, #16
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	f107 0014 	add.w	r0, r7, #20
 800447e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	b004      	add	sp, #16
 800448e:	4770      	bx	lr

08004490 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	b29b      	uxth	r3, r3
 80044da:	4013      	ands	r3, r2
 80044dc:	b29a      	uxth	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004508:	b084      	sub	sp, #16
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	f107 0014 	add.w	r0, r7, #20
 8004516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	b004      	add	sp, #16
 8004546:	4770      	bx	lr

08004548 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004548:	b480      	push	{r7}
 800454a:	b09b      	sub	sp, #108	; 0x6c
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	78db      	ldrb	r3, [r3, #3]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d81f      	bhi.n	80045ba <USB_ActivateEndpoint+0x72>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <USB_ActivateEndpoint+0x38>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	08004591 	.word	0x08004591
 8004584:	080045ad 	.word	0x080045ad
 8004588:	080045c3 	.word	0x080045c3
 800458c:	0800459f 	.word	0x0800459f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004590:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004594:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004598:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800459c:	e012      	b.n	80045c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800459e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045aa:	e00b      	b.n	80045c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045b8:	e004      	b.n	80045c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80045c0:	e000      	b.n	80045c4 <USB_ActivateEndpoint+0x7c>
      break;
 80045c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	441a      	add	r2, r3
 80045ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	4313      	orrs	r3, r2
 8004606:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	441a      	add	r2, r3
 8004614:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004628:	b29b      	uxth	r3, r3
 800462a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	7b1b      	ldrb	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	f040 8149 	bne.w	80048c8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	785b      	ldrb	r3, [r3, #1]
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8084 	beq.w	8004748 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800464a:	b29b      	uxth	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	4413      	add	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	011a      	lsls	r2, r3, #4
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	88db      	ldrh	r3, [r3, #6]
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	b29b      	uxth	r3, r3
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	81fb      	strh	r3, [r7, #14]
 8004682:	89fb      	ldrh	r3, [r7, #14]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01b      	beq.n	80046c4 <USB_ActivateEndpoint+0x17c>
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	81bb      	strh	r3, [r7, #12]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	89bb      	ldrh	r3, [r7, #12]
 80046b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	78db      	ldrb	r3, [r3, #3]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d020      	beq.n	800470e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e2:	813b      	strh	r3, [r7, #8]
 80046e4:	893b      	ldrh	r3, [r7, #8]
 80046e6:	f083 0320 	eor.w	r3, r3, #32
 80046ea:	813b      	strh	r3, [r7, #8]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	441a      	add	r2, r3
 80046f6:	893b      	ldrh	r3, [r7, #8]
 80046f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004708:	b29b      	uxth	r3, r3
 800470a:	8013      	strh	r3, [r2, #0]
 800470c:	e27f      	b.n	8004c0e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004724:	817b      	strh	r3, [r7, #10]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	897b      	ldrh	r3, [r7, #10]
 8004732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004742:	b29b      	uxth	r3, r3
 8004744:	8013      	strh	r3, [r2, #0]
 8004746:	e262      	b.n	8004c0e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004752:	b29b      	uxth	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	4413      	add	r3, r2
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	011a      	lsls	r2, r3, #4
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	4413      	add	r3, r2
 8004766:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	88db      	ldrh	r3, [r3, #6]
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	b29b      	uxth	r3, r3
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004786:	b29b      	uxth	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	4413      	add	r3, r2
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	011a      	lsls	r2, r3, #4
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	4413      	add	r3, r2
 800479a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800479e:	623b      	str	r3, [r7, #32]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d112      	bne.n	80047ce <USB_ActivateEndpoint+0x286>
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	e02f      	b.n	800482e <USB_ActivateEndpoint+0x2e6>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b3e      	cmp	r3, #62	; 0x3e
 80047d4:	d813      	bhi.n	80047fe <USB_ActivateEndpoint+0x2b6>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	663b      	str	r3, [r7, #96]	; 0x60
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <USB_ActivateEndpoint+0x2a8>
 80047ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ec:	3301      	adds	r3, #1
 80047ee:	663b      	str	r3, [r7, #96]	; 0x60
 80047f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	029b      	lsls	r3, r3, #10
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	801a      	strh	r2, [r3, #0]
 80047fc:	e017      	b.n	800482e <USB_ActivateEndpoint+0x2e6>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	663b      	str	r3, [r7, #96]	; 0x60
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <USB_ActivateEndpoint+0x2d0>
 8004812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004814:	3b01      	subs	r3, #1
 8004816:	663b      	str	r3, [r7, #96]	; 0x60
 8004818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800481a:	b29b      	uxth	r3, r3
 800481c:	029b      	lsls	r3, r3, #10
 800481e:	b29b      	uxth	r3, r3
 8004820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004828:	b29a      	uxth	r2, r3
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	83fb      	strh	r3, [r7, #30]
 800483c:	8bfb      	ldrh	r3, [r7, #30]
 800483e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01b      	beq.n	800487e <USB_ActivateEndpoint+0x336>
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485c:	83bb      	strh	r3, [r7, #28]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	8bbb      	ldrh	r3, [r7, #28]
 800486a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487a:	b29b      	uxth	r3, r3
 800487c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004894:	837b      	strh	r3, [r7, #26]
 8004896:	8b7b      	ldrh	r3, [r7, #26]
 8004898:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800489c:	837b      	strh	r3, [r7, #26]
 800489e:	8b7b      	ldrh	r3, [r7, #26]
 80048a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048a4:	837b      	strh	r3, [r7, #26]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	441a      	add	r2, r3
 80048b0:	8b7b      	ldrh	r3, [r7, #26]
 80048b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	8013      	strh	r3, [r2, #0]
 80048c6:	e1a2      	b.n	8004c0e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80048f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004900:	b29b      	uxth	r3, r3
 8004902:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	65bb      	str	r3, [r7, #88]	; 0x58
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800490e:	b29b      	uxth	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004914:	4413      	add	r3, r2
 8004916:	65bb      	str	r3, [r7, #88]	; 0x58
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	011a      	lsls	r2, r3, #4
 800491e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004920:	4413      	add	r3, r2
 8004922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004926:	657b      	str	r3, [r7, #84]	; 0x54
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	891b      	ldrh	r3, [r3, #8]
 800492c:	085b      	lsrs	r3, r3, #1
 800492e:	b29b      	uxth	r3, r3
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	653b      	str	r3, [r7, #80]	; 0x50
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004948:	4413      	add	r3, r2
 800494a:	653b      	str	r3, [r7, #80]	; 0x50
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	011a      	lsls	r2, r3, #4
 8004952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004954:	4413      	add	r3, r2
 8004956:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	895b      	ldrh	r3, [r3, #10]
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	b29b      	uxth	r3, r3
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	785b      	ldrb	r3, [r3, #1]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f040 8091 	bne.w	8004a98 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004984:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01b      	beq.n	80049c6 <USB_ActivateEndpoint+0x47e>
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	441a      	add	r2, r3
 80049b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80049b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	873b      	strh	r3, [r7, #56]	; 0x38
 80049d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01b      	beq.n	8004a16 <USB_ActivateEndpoint+0x4ce>
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	441a      	add	r2, r3
 8004a00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a3c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	441a      	add	r2, r3
 8004a48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a74:	867b      	strh	r3, [r7, #50]	; 0x32
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
 8004a96:	e0ba      	b.n	8004c0e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004aa8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01d      	beq.n	8004af0 <USB_ActivateEndpoint+0x5a8>
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004b00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01d      	beq.n	8004b48 <USB_ActivateEndpoint+0x600>
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	441a      	add	r2, r3
 8004b30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	78db      	ldrb	r3, [r3, #3]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d024      	beq.n	8004b9a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b6e:	f083 0320 	eor.w	r3, r3, #32
 8004b72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	441a      	add	r2, r3
 8004b80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	8013      	strh	r3, [r2, #0]
 8004b98:	e01d      	b.n	8004bd6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	441a      	add	r2, r3
 8004bbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	441a      	add	r2, r3
 8004bf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004c0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	376c      	adds	r7, #108	; 0x6c
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b08d      	sub	sp, #52	; 0x34
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	7b1b      	ldrb	r3, [r3, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f040 808e 	bne.w	8004d4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d044      	beq.n	8004cc2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	81bb      	strh	r3, [r7, #12]
 8004c46:	89bb      	ldrh	r3, [r7, #12]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01b      	beq.n	8004c88 <USB_DeactivateEndpoint+0x6c>
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	817b      	strh	r3, [r7, #10]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	897b      	ldrh	r3, [r7, #10]
 8004c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9e:	813b      	strh	r3, [r7, #8]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	893b      	ldrh	r3, [r7, #8]
 8004cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	8013      	strh	r3, [r2, #0]
 8004cc0:	e192      	b.n	8004fe8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	827b      	strh	r3, [r7, #18]
 8004cd0:	8a7b      	ldrh	r3, [r7, #18]
 8004cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d01b      	beq.n	8004d12 <USB_DeactivateEndpoint+0xf6>
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf0:	823b      	strh	r3, [r7, #16]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	441a      	add	r2, r3
 8004cfc:	8a3b      	ldrh	r3, [r7, #16]
 8004cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d28:	81fb      	strh	r3, [r7, #14]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	441a      	add	r2, r3
 8004d34:	89fb      	ldrh	r3, [r7, #14]
 8004d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	8013      	strh	r3, [r2, #0]
 8004d4a:	e14d      	b.n	8004fe8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f040 80a5 	bne.w	8004ea0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	843b      	strh	r3, [r7, #32]
 8004d64:	8c3b      	ldrh	r3, [r7, #32]
 8004d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01b      	beq.n	8004da6 <USB_DeactivateEndpoint+0x18a>
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d84:	83fb      	strh	r3, [r7, #30]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	8bfb      	ldrh	r3, [r7, #30]
 8004d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	83bb      	strh	r3, [r7, #28]
 8004db4:	8bbb      	ldrh	r3, [r7, #28]
 8004db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01b      	beq.n	8004df6 <USB_DeactivateEndpoint+0x1da>
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd4:	837b      	strh	r3, [r7, #26]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	441a      	add	r2, r3
 8004de0:	8b7b      	ldrh	r3, [r7, #26]
 8004de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0c:	833b      	strh	r3, [r7, #24]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	441a      	add	r2, r3
 8004e18:	8b3b      	ldrh	r3, [r7, #24]
 8004e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e44:	82fb      	strh	r3, [r7, #22]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	441a      	add	r2, r3
 8004e50:	8afb      	ldrh	r3, [r7, #22]
 8004e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e7c:	82bb      	strh	r3, [r7, #20]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	441a      	add	r2, r3
 8004e88:	8abb      	ldrh	r3, [r7, #20]
 8004e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8013      	strh	r3, [r2, #0]
 8004e9e:	e0a3      	b.n	8004fe8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004eae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01b      	beq.n	8004ef0 <USB_DeactivateEndpoint+0x2d4>
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004efe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01b      	beq.n	8004f40 <USB_DeactivateEndpoint+0x324>
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	441a      	add	r2, r3
 8004f2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	441a      	add	r2, r3
 8004f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	441a      	add	r2, r3
 8004fd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3734      	adds	r7, #52	; 0x34
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b0c4      	sub	sp, #272	; 0x110
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	1d3b      	adds	r3, r7, #4
 8004ffc:	6018      	str	r0, [r3, #0]
 8004ffe:	463b      	mov	r3, r7
 8005000:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005002:	463b      	mov	r3, r7
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	2b01      	cmp	r3, #1
 800500a:	f040 8557 	bne.w	8005abc <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800500e:	463b      	mov	r3, r7
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699a      	ldr	r2, [r3, #24]
 8005014:	463b      	mov	r3, r7
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	429a      	cmp	r2, r3
 800501c:	d905      	bls.n	800502a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800501e:	463b      	mov	r3, r7
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005028:	e004      	b.n	8005034 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800502a:	463b      	mov	r3, r7
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005034:	463b      	mov	r3, r7
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	7b1b      	ldrb	r3, [r3, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d12c      	bne.n	8005098 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800503e:	463b      	mov	r3, r7
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6959      	ldr	r1, [r3, #20]
 8005044:	463b      	mov	r3, r7
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	88da      	ldrh	r2, [r3, #6]
 800504a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800504e:	b29b      	uxth	r3, r3
 8005050:	1d38      	adds	r0, r7, #4
 8005052:	6800      	ldr	r0, [r0, #0]
 8005054:	f001 fa2c 	bl	80064b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005058:	1d3b      	adds	r3, r7, #4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	1d3b      	adds	r3, r7, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005066:	b29b      	uxth	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	4413      	add	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	463b      	mov	r3, r7
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	011a      	lsls	r2, r3, #4
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	4413      	add	r3, r2
 800507c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005080:	f107 0310 	add.w	r3, r7, #16
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508a:	b29a      	uxth	r2, r3
 800508c:	f107 0310 	add.w	r3, r7, #16
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	801a      	strh	r2, [r3, #0]
 8005094:	f000 bcdd 	b.w	8005a52 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	78db      	ldrb	r3, [r3, #3]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	f040 8347 	bne.w	8005732 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80050a4:	463b      	mov	r3, r7
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6a1a      	ldr	r2, [r3, #32]
 80050aa:	463b      	mov	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	f240 82eb 	bls.w	800568c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80050b6:	1d3b      	adds	r3, r7, #4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	463b      	mov	r3, r7
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80050d4:	1d3b      	adds	r3, r7, #4
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	463b      	mov	r3, r7
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	441a      	add	r2, r3
 80050e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80050e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80050fa:	463b      	mov	r3, r7
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6a1a      	ldr	r2, [r3, #32]
 8005100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005104:	1ad2      	subs	r2, r2, r3
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800510c:	1d3b      	adds	r3, r7, #4
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	463b      	mov	r3, r7
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8159 	beq.w	80053da <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005128:	1d3b      	adds	r3, r7, #4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
 800512e:	463b      	mov	r3, r7
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d164      	bne.n	8005202 <USB_EPStartXfer+0x20e>
 8005138:	1d3b      	adds	r3, r7, #4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513e:	1d3b      	adds	r3, r7, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005146:	b29b      	uxth	r3, r3
 8005148:	461a      	mov	r2, r3
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	4413      	add	r3, r2
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005150:	463b      	mov	r3, r7
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	011a      	lsls	r2, r3, #4
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	4413      	add	r3, r2
 800515c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005160:	62bb      	str	r3, [r7, #40]	; 0x28
 8005162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d112      	bne.n	8005190 <USB_EPStartXfer+0x19c>
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005174:	b29a      	uxth	r2, r3
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005188:	b29a      	uxth	r2, r3
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	801a      	strh	r2, [r3, #0]
 800518e:	e054      	b.n	800523a <USB_EPStartXfer+0x246>
 8005190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005194:	2b3e      	cmp	r3, #62	; 0x3e
 8005196:	d817      	bhi.n	80051c8 <USB_EPStartXfer+0x1d4>
 8005198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <USB_EPStartXfer+0x1c4>
 80051ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b2:	3301      	adds	r3, #1
 80051b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051bc:	b29b      	uxth	r3, r3
 80051be:	029b      	lsls	r3, r3, #10
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	e038      	b.n	800523a <USB_EPStartXfer+0x246>
 80051c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <USB_EPStartXfer+0x1f4>
 80051de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e2:	3b01      	subs	r3, #1
 80051e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	029b      	lsls	r3, r3, #10
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	e01b      	b.n	800523a <USB_EPStartXfer+0x246>
 8005202:	463b      	mov	r3, r7
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	785b      	ldrb	r3, [r3, #1]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d116      	bne.n	800523a <USB_EPStartXfer+0x246>
 800520c:	1d3b      	adds	r3, r7, #4
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005214:	b29b      	uxth	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521a:	4413      	add	r3, r2
 800521c:	637b      	str	r3, [r7, #52]	; 0x34
 800521e:	463b      	mov	r3, r7
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	011a      	lsls	r2, r3, #4
 8005226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005228:	4413      	add	r3, r2
 800522a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800522e:	633b      	str	r3, [r7, #48]	; 0x30
 8005230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005234:	b29a      	uxth	r2, r3
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800523a:	463b      	mov	r3, r7
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	895b      	ldrh	r3, [r3, #10]
 8005240:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005244:	463b      	mov	r3, r7
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6959      	ldr	r1, [r3, #20]
 800524a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800524e:	b29b      	uxth	r3, r3
 8005250:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005254:	1d38      	adds	r0, r7, #4
 8005256:	6800      	ldr	r0, [r0, #0]
 8005258:	f001 f92a 	bl	80064b0 <USB_WritePMA>
            ep->xfer_buff += len;
 800525c:	463b      	mov	r3, r7
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695a      	ldr	r2, [r3, #20]
 8005262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005266:	441a      	add	r2, r3
 8005268:	463b      	mov	r3, r7
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800526e:	463b      	mov	r3, r7
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6a1a      	ldr	r2, [r3, #32]
 8005274:	463b      	mov	r3, r7
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	429a      	cmp	r2, r3
 800527c:	d909      	bls.n	8005292 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800527e:	463b      	mov	r3, r7
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6a1a      	ldr	r2, [r3, #32]
 8005284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005288:	1ad2      	subs	r2, r2, r3
 800528a:	463b      	mov	r3, r7
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	621a      	str	r2, [r3, #32]
 8005290:	e008      	b.n	80052a4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005292:	463b      	mov	r3, r7
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800529c:	463b      	mov	r3, r7
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2200      	movs	r2, #0
 80052a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052a4:	463b      	mov	r3, r7
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d164      	bne.n	8005378 <USB_EPStartXfer+0x384>
 80052ae:	1d3b      	adds	r3, r7, #4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	1d3b      	adds	r3, r7, #4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052bc:	b29b      	uxth	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	4413      	add	r3, r2
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	463b      	mov	r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	011a      	lsls	r2, r3, #4
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052d6:	61bb      	str	r3, [r7, #24]
 80052d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d112      	bne.n	8005306 <USB_EPStartXfer+0x312>
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fe:	b29a      	uxth	r2, r3
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	e057      	b.n	80053b6 <USB_EPStartXfer+0x3c2>
 8005306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530a:	2b3e      	cmp	r3, #62	; 0x3e
 800530c:	d817      	bhi.n	800533e <USB_EPStartXfer+0x34a>
 800530e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <USB_EPStartXfer+0x33a>
 8005324:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005328:	3301      	adds	r3, #1
 800532a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800532e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005332:	b29b      	uxth	r3, r3
 8005334:	029b      	lsls	r3, r3, #10
 8005336:	b29a      	uxth	r2, r3
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	e03b      	b.n	80053b6 <USB_EPStartXfer+0x3c2>
 800533e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2b00      	cmp	r3, #0
 8005352:	d104      	bne.n	800535e <USB_EPStartXfer+0x36a>
 8005354:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005358:	3b01      	subs	r3, #1
 800535a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800535e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005362:	b29b      	uxth	r3, r3
 8005364:	029b      	lsls	r3, r3, #10
 8005366:	b29b      	uxth	r3, r3
 8005368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800536c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005370:	b29a      	uxth	r2, r3
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	801a      	strh	r2, [r3, #0]
 8005376:	e01e      	b.n	80053b6 <USB_EPStartXfer+0x3c2>
 8005378:	463b      	mov	r3, r7
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d119      	bne.n	80053b6 <USB_EPStartXfer+0x3c2>
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
 8005388:	1d3b      	adds	r3, r7, #4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005390:	b29b      	uxth	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	4413      	add	r3, r2
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
 800539a:	463b      	mov	r3, r7
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	011a      	lsls	r2, r3, #4
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	4413      	add	r3, r2
 80053a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053aa:	623b      	str	r3, [r7, #32]
 80053ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053b6:	463b      	mov	r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	891b      	ldrh	r3, [r3, #8]
 80053bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053c0:	463b      	mov	r3, r7
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6959      	ldr	r1, [r3, #20]
 80053c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80053d0:	1d38      	adds	r0, r7, #4
 80053d2:	6800      	ldr	r0, [r0, #0]
 80053d4:	f001 f86c 	bl	80064b0 <USB_WritePMA>
 80053d8:	e33b      	b.n	8005a52 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053da:	463b      	mov	r3, r7
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d164      	bne.n	80054ae <USB_EPStartXfer+0x4ba>
 80053e4:	1d3b      	adds	r3, r7, #4
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ea:	1d3b      	adds	r3, r7, #4
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f8:	4413      	add	r3, r2
 80053fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053fc:	463b      	mov	r3, r7
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	011a      	lsls	r2, r3, #4
 8005404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005406:	4413      	add	r3, r2
 8005408:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800540c:	64bb      	str	r3, [r7, #72]	; 0x48
 800540e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d112      	bne.n	800543c <USB_EPStartXfer+0x448>
 8005416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005420:	b29a      	uxth	r2, r3
 8005422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005434:	b29a      	uxth	r2, r3
 8005436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	e057      	b.n	80054ec <USB_EPStartXfer+0x4f8>
 800543c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005440:	2b3e      	cmp	r3, #62	; 0x3e
 8005442:	d817      	bhi.n	8005474 <USB_EPStartXfer+0x480>
 8005444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800544e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d004      	beq.n	8005464 <USB_EPStartXfer+0x470>
 800545a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800545e:	3301      	adds	r3, #1
 8005460:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005468:	b29b      	uxth	r3, r3
 800546a:	029b      	lsls	r3, r3, #10
 800546c:	b29a      	uxth	r2, r3
 800546e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	e03b      	b.n	80054ec <USB_EPStartXfer+0x4f8>
 8005474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800547e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	2b00      	cmp	r3, #0
 8005488:	d104      	bne.n	8005494 <USB_EPStartXfer+0x4a0>
 800548a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800548e:	3b01      	subs	r3, #1
 8005490:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005498:	b29b      	uxth	r3, r3
 800549a:	029b      	lsls	r3, r3, #10
 800549c:	b29b      	uxth	r3, r3
 800549e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	e01e      	b.n	80054ec <USB_EPStartXfer+0x4f8>
 80054ae:	463b      	mov	r3, r7
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d119      	bne.n	80054ec <USB_EPStartXfer+0x4f8>
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	657b      	str	r3, [r7, #84]	; 0x54
 80054be:	1d3b      	adds	r3, r7, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054cc:	4413      	add	r3, r2
 80054ce:	657b      	str	r3, [r7, #84]	; 0x54
 80054d0:	463b      	mov	r3, r7
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	011a      	lsls	r2, r3, #4
 80054d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054da:	4413      	add	r3, r2
 80054dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054e0:	653b      	str	r3, [r7, #80]	; 0x50
 80054e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054ec:	463b      	mov	r3, r7
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	891b      	ldrh	r3, [r3, #8]
 80054f2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f6:	463b      	mov	r3, r7
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6959      	ldr	r1, [r3, #20]
 80054fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005500:	b29b      	uxth	r3, r3
 8005502:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005506:	1d38      	adds	r0, r7, #4
 8005508:	6800      	ldr	r0, [r0, #0]
 800550a:	f000 ffd1 	bl	80064b0 <USB_WritePMA>
            ep->xfer_buff += len;
 800550e:	463b      	mov	r3, r7
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005518:	441a      	add	r2, r3
 800551a:	463b      	mov	r3, r7
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005520:	463b      	mov	r3, r7
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6a1a      	ldr	r2, [r3, #32]
 8005526:	463b      	mov	r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	429a      	cmp	r2, r3
 800552e:	d909      	bls.n	8005544 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005530:	463b      	mov	r3, r7
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6a1a      	ldr	r2, [r3, #32]
 8005536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800553a:	1ad2      	subs	r2, r2, r3
 800553c:	463b      	mov	r3, r7
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	621a      	str	r2, [r3, #32]
 8005542:	e008      	b.n	8005556 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005544:	463b      	mov	r3, r7
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800554e:	463b      	mov	r3, r7
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	647b      	str	r3, [r7, #68]	; 0x44
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d164      	bne.n	8005630 <USB_EPStartXfer+0x63c>
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005574:	b29b      	uxth	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557a:	4413      	add	r3, r2
 800557c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800557e:	463b      	mov	r3, r7
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	011a      	lsls	r2, r3, #4
 8005586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005588:	4413      	add	r3, r2
 800558a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800558e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d112      	bne.n	80055be <USB_EPStartXfer+0x5ca>
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	801a      	strh	r2, [r3, #0]
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	e054      	b.n	8005668 <USB_EPStartXfer+0x674>
 80055be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c2:	2b3e      	cmp	r3, #62	; 0x3e
 80055c4:	d817      	bhi.n	80055f6 <USB_EPStartXfer+0x602>
 80055c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <USB_EPStartXfer+0x5f2>
 80055dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055e0:	3301      	adds	r3, #1
 80055e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	029b      	lsls	r3, r3, #10
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	801a      	strh	r2, [r3, #0]
 80055f4:	e038      	b.n	8005668 <USB_EPStartXfer+0x674>
 80055f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <USB_EPStartXfer+0x622>
 800560c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005610:	3b01      	subs	r3, #1
 8005612:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005616:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800561a:	b29b      	uxth	r3, r3
 800561c:	029b      	lsls	r3, r3, #10
 800561e:	b29b      	uxth	r3, r3
 8005620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005628:	b29a      	uxth	r2, r3
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	801a      	strh	r2, [r3, #0]
 800562e:	e01b      	b.n	8005668 <USB_EPStartXfer+0x674>
 8005630:	463b      	mov	r3, r7
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	785b      	ldrb	r3, [r3, #1]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d116      	bne.n	8005668 <USB_EPStartXfer+0x674>
 800563a:	1d3b      	adds	r3, r7, #4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005642:	b29b      	uxth	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005648:	4413      	add	r3, r2
 800564a:	647b      	str	r3, [r7, #68]	; 0x44
 800564c:	463b      	mov	r3, r7
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	011a      	lsls	r2, r3, #4
 8005654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005656:	4413      	add	r3, r2
 8005658:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800565c:	643b      	str	r3, [r7, #64]	; 0x40
 800565e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005662:	b29a      	uxth	r2, r3
 8005664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005666:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005668:	463b      	mov	r3, r7
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	895b      	ldrh	r3, [r3, #10]
 800566e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005672:	463b      	mov	r3, r7
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6959      	ldr	r1, [r3, #20]
 8005678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567c:	b29b      	uxth	r3, r3
 800567e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005682:	1d38      	adds	r0, r7, #4
 8005684:	6800      	ldr	r0, [r0, #0]
 8005686:	f000 ff13 	bl	80064b0 <USB_WritePMA>
 800568a:	e1e2      	b.n	8005a52 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800568c:	463b      	mov	r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005696:	1d3b      	adds	r3, r7, #4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	463b      	mov	r3, r7
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80056ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	463b      	mov	r3, r7
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	441a      	add	r2, r3
 80056c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80056c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056da:	1d3b      	adds	r3, r7, #4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	663b      	str	r3, [r7, #96]	; 0x60
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ee:	4413      	add	r3, r2
 80056f0:	663b      	str	r3, [r7, #96]	; 0x60
 80056f2:	463b      	mov	r3, r7
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	011a      	lsls	r2, r3, #4
 80056fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056fc:	4413      	add	r3, r2
 80056fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005708:	b29a      	uxth	r2, r3
 800570a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800570c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800570e:	463b      	mov	r3, r7
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	891b      	ldrh	r3, [r3, #8]
 8005714:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005718:	463b      	mov	r3, r7
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6959      	ldr	r1, [r3, #20]
 800571e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005722:	b29b      	uxth	r3, r3
 8005724:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005728:	1d38      	adds	r0, r7, #4
 800572a:	6800      	ldr	r0, [r0, #0]
 800572c:	f000 fec0 	bl	80064b0 <USB_WritePMA>
 8005730:	e18f      	b.n	8005a52 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005732:	1d3b      	adds	r3, r7, #4
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	463b      	mov	r3, r7
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 808f 	beq.w	800586c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	67bb      	str	r3, [r7, #120]	; 0x78
 8005754:	463b      	mov	r3, r7
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d164      	bne.n	8005828 <USB_EPStartXfer+0x834>
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	673b      	str	r3, [r7, #112]	; 0x70
 8005764:	1d3b      	adds	r3, r7, #4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576c:	b29b      	uxth	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005772:	4413      	add	r3, r2
 8005774:	673b      	str	r3, [r7, #112]	; 0x70
 8005776:	463b      	mov	r3, r7
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	011a      	lsls	r2, r3, #4
 800577e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005780:	4413      	add	r3, r2
 8005782:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005786:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d112      	bne.n	80057b6 <USB_EPStartXfer+0x7c2>
 8005790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800579a:	b29a      	uxth	r2, r3
 800579c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579e:	801a      	strh	r2, [r3, #0]
 80057a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b2:	801a      	strh	r2, [r3, #0]
 80057b4:	e054      	b.n	8005860 <USB_EPStartXfer+0x86c>
 80057b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ba:	2b3e      	cmp	r3, #62	; 0x3e
 80057bc:	d817      	bhi.n	80057ee <USB_EPStartXfer+0x7fa>
 80057be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d004      	beq.n	80057de <USB_EPStartXfer+0x7ea>
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d8:	3301      	adds	r3, #1
 80057da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	029b      	lsls	r3, r3, #10
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	e038      	b.n	8005860 <USB_EPStartXfer+0x86c>
 80057ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <USB_EPStartXfer+0x81a>
 8005804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005808:	3b01      	subs	r3, #1
 800580a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005812:	b29b      	uxth	r3, r3
 8005814:	029b      	lsls	r3, r3, #10
 8005816:	b29b      	uxth	r3, r3
 8005818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800581c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005820:	b29a      	uxth	r2, r3
 8005822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	e01b      	b.n	8005860 <USB_EPStartXfer+0x86c>
 8005828:	463b      	mov	r3, r7
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d116      	bne.n	8005860 <USB_EPStartXfer+0x86c>
 8005832:	1d3b      	adds	r3, r7, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583a:	b29b      	uxth	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005840:	4413      	add	r3, r2
 8005842:	67bb      	str	r3, [r7, #120]	; 0x78
 8005844:	463b      	mov	r3, r7
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	011a      	lsls	r2, r3, #4
 800584c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800584e:	4413      	add	r3, r2
 8005850:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005854:	677b      	str	r3, [r7, #116]	; 0x74
 8005856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800585a:	b29a      	uxth	r2, r3
 800585c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800585e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	895b      	ldrh	r3, [r3, #10]
 8005866:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800586a:	e097      	b.n	800599c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800586c:	463b      	mov	r3, r7
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d168      	bne.n	8005948 <USB_EPStartXfer+0x954>
 8005876:	1d3b      	adds	r3, r7, #4
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005886:	b29b      	uxth	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800588e:	4413      	add	r3, r2
 8005890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005894:	463b      	mov	r3, r7
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	011a      	lsls	r2, r3, #4
 800589c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058a0:	4413      	add	r3, r2
 80058a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d112      	bne.n	80058d6 <USB_EPStartXfer+0x8e2>
 80058b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	e05d      	b.n	8005992 <USB_EPStartXfer+0x99e>
 80058d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058da:	2b3e      	cmp	r3, #62	; 0x3e
 80058dc:	d817      	bhi.n	800590e <USB_EPStartXfer+0x91a>
 80058de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <USB_EPStartXfer+0x90a>
 80058f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058f8:	3301      	adds	r3, #1
 80058fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005902:	b29b      	uxth	r3, r3
 8005904:	029b      	lsls	r3, r3, #10
 8005906:	b29a      	uxth	r2, r3
 8005908:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800590a:	801a      	strh	r2, [r3, #0]
 800590c:	e041      	b.n	8005992 <USB_EPStartXfer+0x99e>
 800590e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <USB_EPStartXfer+0x93a>
 8005924:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005928:	3b01      	subs	r3, #1
 800592a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800592e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005932:	b29b      	uxth	r3, r3
 8005934:	029b      	lsls	r3, r3, #10
 8005936:	b29b      	uxth	r3, r3
 8005938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005940:	b29a      	uxth	r2, r3
 8005942:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e024      	b.n	8005992 <USB_EPStartXfer+0x99e>
 8005948:	463b      	mov	r3, r7
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d11f      	bne.n	8005992 <USB_EPStartXfer+0x99e>
 8005952:	1d3b      	adds	r3, r7, #4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800595a:	1d3b      	adds	r3, r7, #4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005962:	b29b      	uxth	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800596a:	4413      	add	r3, r2
 800596c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005970:	463b      	mov	r3, r7
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	011a      	lsls	r2, r3, #4
 8005978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800597c:	4413      	add	r3, r2
 800597e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800598a:	b29a      	uxth	r2, r3
 800598c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005990:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005992:	463b      	mov	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	891b      	ldrh	r3, [r3, #8]
 8005998:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6959      	ldr	r1, [r3, #20]
 80059a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80059ac:	1d38      	adds	r0, r7, #4
 80059ae:	6800      	ldr	r0, [r0, #0]
 80059b0:	f000 fd7e 	bl	80064b0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d122      	bne.n	8005a04 <USB_EPStartXfer+0xa10>
 80059be:	1d3b      	adds	r3, r7, #4
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	463b      	mov	r3, r7
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80059dc:	1d3b      	adds	r3, r7, #4
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	441a      	add	r2, r3
 80059ea:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80059ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	8013      	strh	r3, [r2, #0]
 8005a02:	e026      	b.n	8005a52 <USB_EPStartXfer+0xa5e>
 8005a04:	463b      	mov	r3, r7
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d121      	bne.n	8005a52 <USB_EPStartXfer+0xa5e>
 8005a0e:	1d3b      	adds	r3, r7, #4
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	463b      	mov	r3, r7
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a28:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005a2c:	1d3b      	adds	r3, r7, #4
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	463b      	mov	r3, r7
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	441a      	add	r2, r3
 8005a3a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a52:	1d3b      	adds	r3, r7, #4
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	463b      	mov	r3, r7
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f107 020e 	add.w	r2, r7, #14
 8005a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a70:	8013      	strh	r3, [r2, #0]
 8005a72:	f107 030e 	add.w	r3, r7, #14
 8005a76:	f107 020e 	add.w	r2, r7, #14
 8005a7a:	8812      	ldrh	r2, [r2, #0]
 8005a7c:	f082 0210 	eor.w	r2, r2, #16
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	f107 030e 	add.w	r3, r7, #14
 8005a86:	f107 020e 	add.w	r2, r7, #14
 8005a8a:	8812      	ldrh	r2, [r2, #0]
 8005a8c:	f082 0220 	eor.w	r2, r2, #32
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	463b      	mov	r3, r7
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	441a      	add	r2, r3
 8005aa0:	f107 030e 	add.w	r3, r7, #14
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	8013      	strh	r3, [r2, #0]
 8005aba:	e3b5      	b.n	8006228 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005abc:	463b      	mov	r3, r7
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	7b1b      	ldrb	r3, [r3, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f040 8090 	bne.w	8005be8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ac8:	463b      	mov	r3, r7
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	463b      	mov	r3, r7
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d90e      	bls.n	8005af6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aec:	1ad2      	subs	r2, r2, r3
 8005aee:	463b      	mov	r3, r7
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	619a      	str	r2, [r3, #24]
 8005af4:	e008      	b.n	8005b08 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005b00:	463b      	mov	r3, r7
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2200      	movs	r2, #0
 8005b06:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b08:	1d3b      	adds	r3, r7, #4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b10:	1d3b      	adds	r3, r7, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b20:	4413      	add	r3, r2
 8005b22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b26:	463b      	mov	r3, r7
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	011a      	lsls	r2, r3, #4
 8005b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b32:	4413      	add	r3, r2
 8005b34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d116      	bne.n	8005b72 <USB_EPStartXfer+0xb7e>
 8005b44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	e32c      	b.n	80061cc <USB_EPStartXfer+0x11d8>
 8005b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b76:	2b3e      	cmp	r3, #62	; 0x3e
 8005b78:	d818      	bhi.n	8005bac <USB_EPStartXfer+0xbb8>
 8005b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <USB_EPStartXfer+0xba6>
 8005b90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b94:	3301      	adds	r3, #1
 8005b96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	029b      	lsls	r3, r3, #10
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ba8:	801a      	strh	r2, [r3, #0]
 8005baa:	e30f      	b.n	80061cc <USB_EPStartXfer+0x11d8>
 8005bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <USB_EPStartXfer+0xbd8>
 8005bc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005bcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	029b      	lsls	r3, r3, #10
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	e2f1      	b.n	80061cc <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	78db      	ldrb	r3, [r3, #3]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	f040 818f 	bne.w	8005f12 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d175      	bne.n	8005cea <USB_EPStartXfer+0xcf6>
 8005bfe:	1d3b      	adds	r3, r7, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	461a      	mov	r2, r3
 8005c12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c16:	4413      	add	r3, r2
 8005c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	011a      	lsls	r2, r3, #4
 8005c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c28:	4413      	add	r3, r2
 8005c2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d116      	bne.n	8005c6a <USB_EPStartXfer+0xc76>
 8005c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c66:	801a      	strh	r2, [r3, #0]
 8005c68:	e065      	b.n	8005d36 <USB_EPStartXfer+0xd42>
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	2b3e      	cmp	r3, #62	; 0x3e
 8005c72:	d81a      	bhi.n	8005caa <USB_EPStartXfer+0xcb6>
 8005c74:	463b      	mov	r3, r7
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c80:	463b      	mov	r3, r7
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d004      	beq.n	8005c98 <USB_EPStartXfer+0xca4>
 8005c8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c92:	3301      	adds	r3, #1
 8005c94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	029b      	lsls	r3, r3, #10
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	e045      	b.n	8005d36 <USB_EPStartXfer+0xd42>
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	f003 031f 	and.w	r3, r3, #31
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <USB_EPStartXfer+0xcda>
 8005cc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	029b      	lsls	r3, r3, #10
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ce6:	801a      	strh	r2, [r3, #0]
 8005ce8:	e025      	b.n	8005d36 <USB_EPStartXfer+0xd42>
 8005cea:	463b      	mov	r3, r7
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d120      	bne.n	8005d36 <USB_EPStartXfer+0xd42>
 8005cf4:	1d3b      	adds	r3, r7, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cfc:	1d3b      	adds	r3, r7, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d12:	463b      	mov	r3, r7
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	011a      	lsls	r2, r3, #4
 8005d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d1e:	4413      	add	r3, r2
 8005d20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d28:	463b      	mov	r3, r7
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d3e:	463b      	mov	r3, r7
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	785b      	ldrb	r3, [r3, #1]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d175      	bne.n	8005e34 <USB_EPStartXfer+0xe40>
 8005d48:	1d3b      	adds	r3, r7, #4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d50:	1d3b      	adds	r3, r7, #4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d60:	4413      	add	r3, r2
 8005d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d66:	463b      	mov	r3, r7
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	011a      	lsls	r2, r3, #4
 8005d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d72:	4413      	add	r3, r2
 8005d74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d116      	bne.n	8005db4 <USB_EPStartXfer+0xdc0>
 8005d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	e061      	b.n	8005e78 <USB_EPStartXfer+0xe84>
 8005db4:	463b      	mov	r3, r7
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b3e      	cmp	r3, #62	; 0x3e
 8005dbc:	d81a      	bhi.n	8005df4 <USB_EPStartXfer+0xe00>
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	085b      	lsrs	r3, r3, #1
 8005dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dca:	463b      	mov	r3, r7
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d004      	beq.n	8005de2 <USB_EPStartXfer+0xdee>
 8005dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	e041      	b.n	8005e78 <USB_EPStartXfer+0xe84>
 8005df4:	463b      	mov	r3, r7
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e00:	463b      	mov	r3, r7
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d104      	bne.n	8005e18 <USB_EPStartXfer+0xe24>
 8005e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e12:	3b01      	subs	r3, #1
 8005e14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	029b      	lsls	r3, r3, #10
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	e021      	b.n	8005e78 <USB_EPStartXfer+0xe84>
 8005e34:	463b      	mov	r3, r7
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d11c      	bne.n	8005e78 <USB_EPStartXfer+0xe84>
 8005e3e:	1d3b      	adds	r3, r7, #4
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e4e:	4413      	add	r3, r2
 8005e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	011a      	lsls	r2, r3, #4
 8005e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e76:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e78:	463b      	mov	r3, r7
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 81a4 	beq.w	80061cc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	463b      	mov	r3, r7
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e98:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <USB_EPStartXfer+0xebc>
 8005ea4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10d      	bne.n	8005ecc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005eb0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 8187 	bne.w	80061cc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ebe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f040 8180 	bne.w	80061cc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005ecc:	1d3b      	adds	r3, r7, #4
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	463b      	mov	r3, r7
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	441a      	add	r2, r3
 8005ef8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	8013      	strh	r3, [r2, #0]
 8005f10:	e15c      	b.n	80061cc <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f12:	463b      	mov	r3, r7
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	78db      	ldrb	r3, [r3, #3]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	f040 8155 	bne.w	80061c8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f1e:	463b      	mov	r3, r7
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	463b      	mov	r3, r7
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d90e      	bls.n	8005f4c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005f2e:	463b      	mov	r3, r7
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005f38:	463b      	mov	r3, r7
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f42:	1ad2      	subs	r2, r2, r3
 8005f44:	463b      	mov	r3, r7
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	619a      	str	r2, [r3, #24]
 8005f4a:	e008      	b.n	8005f5e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005f56:	463b      	mov	r3, r7
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f5e:	463b      	mov	r3, r7
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	785b      	ldrb	r3, [r3, #1]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d16f      	bne.n	8006048 <USB_EPStartXfer+0x1054>
 8005f68:	1d3b      	adds	r3, r7, #4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f70:	1d3b      	adds	r3, r7, #4
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f80:	4413      	add	r3, r2
 8005f82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f86:	463b      	mov	r3, r7
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	011a      	lsls	r2, r3, #4
 8005f8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f92:	4413      	add	r3, r2
 8005f94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d116      	bne.n	8005fd2 <USB_EPStartXfer+0xfde>
 8005fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fb6:	801a      	strh	r2, [r3, #0]
 8005fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	e05f      	b.n	8006092 <USB_EPStartXfer+0x109e>
 8005fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8005fd8:	d818      	bhi.n	800600c <USB_EPStartXfer+0x1018>
 8005fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <USB_EPStartXfer+0x1006>
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	029b      	lsls	r3, r3, #10
 8006002:	b29a      	uxth	r2, r3
 8006004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	e042      	b.n	8006092 <USB_EPStartXfer+0x109e>
 800600c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006010:	095b      	lsrs	r3, r3, #5
 8006012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <USB_EPStartXfer+0x1038>
 8006022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006026:	3b01      	subs	r3, #1
 8006028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800602c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006030:	b29b      	uxth	r3, r3
 8006032:	029b      	lsls	r3, r3, #10
 8006034:	b29b      	uxth	r3, r3
 8006036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603e:	b29a      	uxth	r2, r3
 8006040:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	e024      	b.n	8006092 <USB_EPStartXfer+0x109e>
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d11f      	bne.n	8006092 <USB_EPStartXfer+0x109e>
 8006052:	1d3b      	adds	r3, r7, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006062:	b29b      	uxth	r3, r3
 8006064:	461a      	mov	r2, r3
 8006066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800606a:	4413      	add	r3, r2
 800606c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006070:	463b      	mov	r3, r7
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	011a      	lsls	r2, r3, #4
 8006078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800607c:	4413      	add	r3, r2
 800607e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800608a:	b29a      	uxth	r2, r3
 800608c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	1d3b      	adds	r3, r7, #4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d16f      	bne.n	8006184 <USB_EPStartXfer+0x1190>
 80060a4:	1d3b      	adds	r3, r7, #4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060ac:	1d3b      	adds	r3, r7, #4
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060bc:	4413      	add	r3, r2
 80060be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060c2:	463b      	mov	r3, r7
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	011a      	lsls	r2, r3, #4
 80060ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060ce:	4413      	add	r3, r2
 80060d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d116      	bne.n	800610e <USB_EPStartXfer+0x111a>
 80060e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060f2:	801a      	strh	r2, [r3, #0]
 80060f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006104:	b29a      	uxth	r2, r3
 8006106:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	e05e      	b.n	80061cc <USB_EPStartXfer+0x11d8>
 800610e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006112:	2b3e      	cmp	r3, #62	; 0x3e
 8006114:	d818      	bhi.n	8006148 <USB_EPStartXfer+0x1154>
 8006116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d004      	beq.n	8006136 <USB_EPStartXfer+0x1142>
 800612c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006130:	3301      	adds	r3, #1
 8006132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800613a:	b29b      	uxth	r3, r3
 800613c:	029b      	lsls	r3, r3, #10
 800613e:	b29a      	uxth	r2, r3
 8006140:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	e041      	b.n	80061cc <USB_EPStartXfer+0x11d8>
 8006148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <USB_EPStartXfer+0x1174>
 800615e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006162:	3b01      	subs	r3, #1
 8006164:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616c:	b29b      	uxth	r3, r3
 800616e:	029b      	lsls	r3, r3, #10
 8006170:	b29b      	uxth	r3, r3
 8006172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617a:	b29a      	uxth	r2, r3
 800617c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006180:	801a      	strh	r2, [r3, #0]
 8006182:	e023      	b.n	80061cc <USB_EPStartXfer+0x11d8>
 8006184:	463b      	mov	r3, r7
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d11e      	bne.n	80061cc <USB_EPStartXfer+0x11d8>
 800618e:	1d3b      	adds	r3, r7, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006196:	b29b      	uxth	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800619e:	4413      	add	r3, r2
 80061a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061a4:	463b      	mov	r3, r7
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	011a      	lsls	r2, r3, #4
 80061ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061b0:	4413      	add	r3, r2
 80061b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061be:	b29a      	uxth	r2, r3
 80061c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	e001      	b.n	80061cc <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e02e      	b.n	800622a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061cc:	1d3b      	adds	r3, r7, #4
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	463b      	mov	r3, r7
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80061ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80061ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80061f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80061fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006202:	1d3b      	adds	r3, r7, #4
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	441a      	add	r2, r3
 8006210:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006224:	b29b      	uxth	r3, r3
 8006226:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d020      	beq.n	8006288 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800625c:	81bb      	strh	r3, [r7, #12]
 800625e:	89bb      	ldrh	r3, [r7, #12]
 8006260:	f083 0310 	eor.w	r3, r3, #16
 8006264:	81bb      	strh	r3, [r7, #12]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	441a      	add	r2, r3
 8006270:	89bb      	ldrh	r3, [r7, #12]
 8006272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800627a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006282:	b29b      	uxth	r3, r3
 8006284:	8013      	strh	r3, [r2, #0]
 8006286:	e01f      	b.n	80062c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	81fb      	strh	r3, [r7, #14]
 80062a0:	89fb      	ldrh	r3, [r7, #14]
 80062a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062a6:	81fb      	strh	r3, [r7, #14]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	441a      	add	r2, r3
 80062b2:	89fb      	ldrh	r3, [r7, #14]
 80062b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	7b1b      	ldrb	r3, [r3, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 809d 	bne.w	8006422 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d04c      	beq.n	800638a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	823b      	strh	r3, [r7, #16]
 80062fe:	8a3b      	ldrh	r3, [r7, #16]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01b      	beq.n	8006340 <USB_EPClearStall+0x6c>
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	81fb      	strh	r3, [r7, #14]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	89fb      	ldrh	r3, [r7, #14]
 800632c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	78db      	ldrb	r3, [r3, #3]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d06c      	beq.n	8006422 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b29b      	uxth	r3, r3
 8006356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800635e:	81bb      	strh	r3, [r7, #12]
 8006360:	89bb      	ldrh	r3, [r7, #12]
 8006362:	f083 0320 	eor.w	r3, r3, #32
 8006366:	81bb      	strh	r3, [r7, #12]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	89bb      	ldrh	r3, [r7, #12]
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]
 8006388:	e04b      	b.n	8006422 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	82fb      	strh	r3, [r7, #22]
 8006398:	8afb      	ldrh	r3, [r7, #22]
 800639a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d01b      	beq.n	80063da <USB_EPClearStall+0x106>
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	82bb      	strh	r3, [r7, #20]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	441a      	add	r2, r3
 80063c4:	8abb      	ldrh	r3, [r7, #20]
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f0:	827b      	strh	r3, [r7, #18]
 80063f2:	8a7b      	ldrh	r3, [r7, #18]
 80063f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063f8:	827b      	strh	r3, [r7, #18]
 80063fa:	8a7b      	ldrh	r3, [r7, #18]
 80063fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006400:	827b      	strh	r3, [r7, #18]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	441a      	add	r2, r3
 800640c:	8a7b      	ldrh	r3, [r7, #18]
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr

0800642e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d103      	bne.n	8006448 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2280      	movs	r2, #128	; 0x80
 8006444:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr

08006468 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800648a:	b29b      	uxth	r3, r3
 800648c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800648e:	68fb      	ldr	r3, [r7, #12]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr

0800649a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b08d      	sub	sp, #52	; 0x34
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4611      	mov	r1, r2
 80064bc:	461a      	mov	r2, r3
 80064be:	460b      	mov	r3, r1
 80064c0:	80fb      	strh	r3, [r7, #6]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80064c6:	88bb      	ldrh	r3, [r7, #4]
 80064c8:	3301      	adds	r3, #1
 80064ca:	085b      	lsrs	r3, r3, #1
 80064cc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	005a      	lsls	r2, r3, #1
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e8:	e01e      	b.n	8006528 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	3301      	adds	r3, #1
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	b29b      	uxth	r3, r3
 8006500:	461a      	mov	r2, r3
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	b29a      	uxth	r2, r3
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	3302      	adds	r3, #2
 8006514:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	3302      	adds	r3, #2
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	3301      	adds	r3, #1
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	3b01      	subs	r3, #1
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1dd      	bne.n	80064ea <USB_WritePMA+0x3a>
  }
}
 800652e:	bf00      	nop
 8006530:	3734      	adds	r7, #52	; 0x34
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr

08006538 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006538:	b480      	push	{r7}
 800653a:	b08b      	sub	sp, #44	; 0x2c
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	4611      	mov	r1, r2
 8006544:	461a      	mov	r2, r3
 8006546:	460b      	mov	r3, r1
 8006548:	80fb      	strh	r3, [r7, #6]
 800654a:	4613      	mov	r3, r2
 800654c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800654e:	88bb      	ldrh	r3, [r7, #4]
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	b29b      	uxth	r3, r3
 8006554:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	005a      	lsls	r2, r3, #1
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800656a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
 8006570:	e01b      	b.n	80065aa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	3302      	adds	r3, #2
 800657e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	3301      	adds	r3, #1
 800658c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	0a1b      	lsrs	r3, r3, #8
 8006592:	b2da      	uxtb	r2, r3
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	3301      	adds	r3, #1
 800659c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	3302      	adds	r3, #2
 80065a2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	3b01      	subs	r3, #1
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e0      	bne.n	8006572 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80065b0:	88bb      	ldrh	r3, [r7, #4]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	701a      	strb	r2, [r3, #0]
  }
}
 80065cc:	bf00      	nop
 80065ce:	372c      	adds	r7, #44	; 0x2c
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr

080065d6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	460b      	mov	r3, r1
 80065e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	7c1b      	ldrb	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d115      	bne.n	800661a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f2:	2202      	movs	r2, #2
 80065f4:	2181      	movs	r1, #129	; 0x81
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f004 fb49 	bl	800ac8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006606:	2202      	movs	r2, #2
 8006608:	2101      	movs	r1, #1
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f004 fb3f 	bl	800ac8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006618:	e012      	b.n	8006640 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800661a:	2340      	movs	r3, #64	; 0x40
 800661c:	2202      	movs	r2, #2
 800661e:	2181      	movs	r1, #129	; 0x81
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f004 fb34 	bl	800ac8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800662c:	2340      	movs	r3, #64	; 0x40
 800662e:	2202      	movs	r2, #2
 8006630:	2101      	movs	r1, #1
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f004 fb2b 	bl	800ac8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006640:	2308      	movs	r3, #8
 8006642:	2203      	movs	r2, #3
 8006644:	2182      	movs	r1, #130	; 0x82
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f004 fb21 	bl	800ac8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006652:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006656:	f004 fc41 	bl	800aedc <USBD_static_malloc>
 800665a:	4602      	mov	r2, r0
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
 8006670:	e026      	b.n	80066c0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006678:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	7c1b      	ldrb	r3, [r3, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d109      	bne.n	80066b0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066a6:	2101      	movs	r1, #1
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f004 fbe1 	bl	800ae70 <USBD_LL_PrepareReceive>
 80066ae:	e007      	b.n	80066c0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066b6:	2340      	movs	r3, #64	; 0x40
 80066b8:	2101      	movs	r1, #1
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f004 fbd8 	bl	800ae70 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80066da:	2181      	movs	r1, #129	; 0x81
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f004 fafc 	bl	800acda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80066e8:	2101      	movs	r1, #1
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f004 faf5 	bl	800acda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066f8:	2182      	movs	r1, #130	; 0x82
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f004 faed 	bl	800acda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00e      	beq.n	800672e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006720:	4618      	mov	r0, r3
 8006722:	f004 fbe7 	bl	800aef4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800672e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006748:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800675e:	2b00      	cmp	r3, #0
 8006760:	d039      	beq.n	80067d6 <USBD_CDC_Setup+0x9e>
 8006762:	2b20      	cmp	r3, #32
 8006764:	d17c      	bne.n	8006860 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	88db      	ldrh	r3, [r3, #6]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d029      	beq.n	80067c2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	b25b      	sxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	da11      	bge.n	800679c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006784:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	88d2      	ldrh	r2, [r2, #6]
 800678a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800678c:	6939      	ldr	r1, [r7, #16]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	88db      	ldrh	r3, [r3, #6]
 8006792:	461a      	mov	r2, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 f9f9 	bl	8007b8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800679a:	e068      	b.n	800686e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	785a      	ldrb	r2, [r3, #1]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	88db      	ldrh	r3, [r3, #6]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80067b2:	6939      	ldr	r1, [r7, #16]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	88db      	ldrh	r3, [r3, #6]
 80067b8:	461a      	mov	r2, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 fa14 	bl	8007be8 <USBD_CtlPrepareRx>
      break;
 80067c0:	e055      	b.n	800686e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	7850      	ldrb	r0, [r2, #1]
 80067ce:	2200      	movs	r2, #0
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	4798      	blx	r3
      break;
 80067d4:	e04b      	b.n	800686e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	2b0a      	cmp	r3, #10
 80067dc:	d017      	beq.n	800680e <USBD_CDC_Setup+0xd6>
 80067de:	2b0b      	cmp	r3, #11
 80067e0:	d029      	beq.n	8006836 <USBD_CDC_Setup+0xfe>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d133      	bne.n	800684e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d107      	bne.n	8006800 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80067f0:	f107 030c 	add.w	r3, r7, #12
 80067f4:	2202      	movs	r2, #2
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 f9c7 	bl	8007b8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067fe:	e02e      	b.n	800685e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 f958 	bl	8007ab8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006808:	2302      	movs	r3, #2
 800680a:	75fb      	strb	r3, [r7, #23]
          break;
 800680c:	e027      	b.n	800685e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006814:	2b03      	cmp	r3, #3
 8006816:	d107      	bne.n	8006828 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006818:	f107 030f 	add.w	r3, r7, #15
 800681c:	2201      	movs	r2, #1
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 f9b3 	bl	8007b8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006826:	e01a      	b.n	800685e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 f944 	bl	8007ab8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006830:	2302      	movs	r3, #2
 8006832:	75fb      	strb	r3, [r7, #23]
          break;
 8006834:	e013      	b.n	800685e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800683c:	2b03      	cmp	r3, #3
 800683e:	d00d      	beq.n	800685c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 f938 	bl	8007ab8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006848:	2302      	movs	r3, #2
 800684a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800684c:	e006      	b.n	800685c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 f931 	bl	8007ab8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006856:	2302      	movs	r3, #2
 8006858:	75fb      	strb	r3, [r7, #23]
          break;
 800685a:	e000      	b.n	800685e <USBD_CDC_Setup+0x126>
          break;
 800685c:	bf00      	nop
      }
      break;
 800685e:	e006      	b.n	800686e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 f928 	bl	8007ab8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006868:	2302      	movs	r3, #2
 800686a:	75fb      	strb	r3, [r7, #23]
      break;
 800686c:	bf00      	nop
  }

  return ret;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006892:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d03a      	beq.n	8006914 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800689e:	78fa      	ldrb	r2, [r7, #3]
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	440b      	add	r3, r1
 80068ac:	331c      	adds	r3, #28
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d029      	beq.n	8006908 <USBD_CDC_DataIn+0x90>
 80068b4:	78fa      	ldrb	r2, [r7, #3]
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	331c      	adds	r3, #28
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	78f9      	ldrb	r1, [r7, #3]
 80068c8:	68b8      	ldr	r0, [r7, #8]
 80068ca:	460b      	mov	r3, r1
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	4403      	add	r3, r0
 80068d4:	3338      	adds	r3, #56	; 0x38
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80068dc:	fb03 f301 	mul.w	r3, r3, r1
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d110      	bne.n	8006908 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80068e6:	78fa      	ldrb	r2, [r7, #3]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	331c      	adds	r3, #28
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068fa:	78f9      	ldrb	r1, [r7, #3]
 80068fc:	2300      	movs	r3, #0
 80068fe:	2200      	movs	r2, #0
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f004 fa92 	bl	800ae2a <USBD_LL_Transmit>
 8006906:	e003      	b.n	8006910 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	e000      	b.n	8006916 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006914:	2302      	movs	r3, #2
  }
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006930:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006932:	78fb      	ldrb	r3, [r7, #3]
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f004 fabd 	bl	800aeb6 <USBD_LL_GetRxDataSize>
 800693c:	4602      	mov	r2, r0
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00d      	beq.n	800696a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006962:	4611      	mov	r1, r2
 8006964:	4798      	blx	r3

    return USBD_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	e000      	b.n	800696c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800696a:	2302      	movs	r3, #2
  }
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006982:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800698a:	2b00      	cmp	r3, #0
 800698c:	d015      	beq.n	80069ba <USBD_CDC_EP0_RxReady+0x46>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006994:	2bff      	cmp	r3, #255	; 0xff
 8006996:	d010      	beq.n	80069ba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80069a6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80069ae:	b292      	uxth	r2, r2
 80069b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	22ff      	movs	r2, #255	; 0xff
 80069b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2243      	movs	r2, #67	; 0x43
 80069d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80069d2:	4b03      	ldr	r3, [pc, #12]	; (80069e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000094 	.word	0x20000094

080069e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2243      	movs	r2, #67	; 0x43
 80069f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80069f2:	4b03      	ldr	r3, [pc, #12]	; (8006a00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20000050 	.word	0x20000050

08006a04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2243      	movs	r2, #67	; 0x43
 8006a10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006a12:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	200000d8 	.word	0x200000d8

08006a24 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	220a      	movs	r2, #10
 8006a30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006a32:	4b03      	ldr	r3, [pc, #12]	; (8006a40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	2000000c 	.word	0x2000000c

08006a44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a84:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr

08006aa2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr

08006ac8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01c      	beq.n	8006b1c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d115      	bne.n	8006b18 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2181      	movs	r1, #129	; 0x81
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f004 f98b 	bl	800ae2a <USBD_LL_Transmit>

      return USBD_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e002      	b.n	8006b1e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006b1c:	2302      	movs	r3, #2
  }
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d017      	beq.n	8006b70 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7c1b      	ldrb	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d109      	bne.n	8006b5c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b52:	2101      	movs	r1, #1
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f004 f98b 	bl	800ae70 <USBD_LL_PrepareReceive>
 8006b5a:	e007      	b.n	8006b6c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b62:	2340      	movs	r3, #64	; 0x40
 8006b64:	2101      	movs	r1, #1
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f004 f982 	bl	800ae70 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	e000      	b.n	8006b72 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006b70:	2302      	movs	r3, #2
  }
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	4613      	mov	r3, r2
 8006b86:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e01a      	b.n	8006bc8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	79fa      	ldrb	r2, [r7, #7]
 8006bbe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f003 ffef 	bl	800aba4 <USBD_LL_Init>

  return USBD_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d006      	beq.n	8006bf2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
 8006bf0:	e001      	b.n	8006bf6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bc80      	pop	{r7}
 8006c00:	4770      	bx	lr

08006c02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f004 f824 	bl	800ac58 <USBD_LL_Start>

  return USBD_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00c      	beq.n	8006c62 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	78fa      	ldrb	r2, [r7, #3]
 8006c52:	4611      	mov	r1, r2
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	78fa      	ldrb	r2, [r7, #3]
 8006c82:	4611      	mov	r1, r2
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	4798      	blx	r3

  return USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b082      	sub	sp, #8
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fecb 	bl	8007a40 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006cb8:	461a      	mov	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d00c      	beq.n	8006ce8 <USBD_LL_SetupStage+0x56>
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d302      	bcc.n	8006cd8 <USBD_LL_SetupStage+0x46>
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d010      	beq.n	8006cf8 <USBD_LL_SetupStage+0x66>
 8006cd6:	e017      	b.n	8006d08 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f9cb 	bl	800707c <USBD_StdDevReq>
      break;
 8006ce6:	e01a      	b.n	8006d1e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fa2d 	bl	8007150 <USBD_StdItfReq>
      break;
 8006cf6:	e012      	b.n	8006d1e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fa6b 	bl	80071dc <USBD_StdEPReq>
      break;
 8006d06:	e00a      	b.n	8006d1e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f003 fffe 	bl	800ad18 <USBD_LL_StallEP>
      break;
 8006d1c:	bf00      	nop
  }

  return USBD_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	460b      	mov	r3, r1
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d36:	7afb      	ldrb	r3, [r7, #11]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d14b      	bne.n	8006dd4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d42:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d134      	bne.n	8006db8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d919      	bls.n	8006d8e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	1ad2      	subs	r2, r2, r3
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d203      	bcs.n	8006d7c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	e002      	b.n	8006d82 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	461a      	mov	r2, r3
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 ff4c 	bl	8007c24 <USBD_CtlContinueRx>
 8006d8c:	e038      	b.n	8006e00 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d105      	bne.n	8006db0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 ff49 	bl	8007c48 <USBD_CtlSendStatus>
 8006db6:	e023      	b.n	8006e00 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d11e      	bne.n	8006e00 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006dca:	2100      	movs	r1, #0
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f003 ffa3 	bl	800ad18 <USBD_LL_StallEP>
 8006dd2:	e015      	b.n	8006e00 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00d      	beq.n	8006dfc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d108      	bne.n	8006dfc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	7afa      	ldrb	r2, [r7, #11]
 8006df4:	4611      	mov	r1, r2
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	4798      	blx	r3
 8006dfa:	e001      	b.n	8006e00 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e000      	b.n	8006e02 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b086      	sub	sp, #24
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	460b      	mov	r3, r1
 8006e14:	607a      	str	r2, [r7, #4]
 8006e16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e18:	7afb      	ldrb	r3, [r7, #11]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d17f      	bne.n	8006f1e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3314      	adds	r3, #20
 8006e22:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d15c      	bne.n	8006ee8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	68da      	ldr	r2, [r3, #12]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d915      	bls.n	8006e66 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	1ad2      	subs	r2, r2, r3
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	461a      	mov	r2, r3
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 feb6 	bl	8007bc4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e58:	2300      	movs	r3, #0
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f004 f806 	bl	800ae70 <USBD_LL_PrepareReceive>
 8006e64:	e04e      	b.n	8006f04 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	6912      	ldr	r2, [r2, #16]
 8006e6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e72:	fb02 f201 	mul.w	r2, r2, r1
 8006e76:	1a9b      	subs	r3, r3, r2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d11c      	bne.n	8006eb6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d316      	bcc.n	8006eb6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d20f      	bcs.n	8006eb6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e96:	2200      	movs	r2, #0
 8006e98:	2100      	movs	r1, #0
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 fe92 	bl	8007bc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2100      	movs	r1, #0
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f003 ffde 	bl	800ae70 <USBD_LL_PrepareReceive>
 8006eb4:	e026      	b.n	8006f04 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d105      	bne.n	8006ed8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ed8:	2180      	movs	r1, #128	; 0x80
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f003 ff1c 	bl	800ad18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fec4 	bl	8007c6e <USBD_CtlReceiveStatus>
 8006ee6:	e00d      	b.n	8006f04 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d004      	beq.n	8006efc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d103      	bne.n	8006f04 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006efc:	2180      	movs	r1, #128	; 0x80
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f003 ff0a 	bl	800ad18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d11d      	bne.n	8006f4a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7ff fe83 	bl	8006c1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f1c:	e015      	b.n	8006f4a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00d      	beq.n	8006f46 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d108      	bne.n	8006f46 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	7afa      	ldrb	r2, [r7, #11]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	4798      	blx	r3
 8006f44:	e001      	b.n	8006f4a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f46:	2302      	movs	r3, #2
 8006f48:	e000      	b.n	8006f4c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f5c:	2340      	movs	r3, #64	; 0x40
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2100      	movs	r1, #0
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f003 fe93 	bl	800ac8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2240      	movs	r2, #64	; 0x40
 8006f74:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f78:	2340      	movs	r3, #64	; 0x40
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2180      	movs	r1, #128	; 0x80
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f003 fe85 	bl	800ac8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2240      	movs	r2, #64	; 0x40
 8006f8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d009      	beq.n	8006fcc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6852      	ldr	r2, [r2, #4]
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	4798      	blx	r3
  }

  return USBD_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	78fa      	ldrb	r2, [r7, #3]
 8006fe6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bc80      	pop	{r7}
 8006ff2:	4770      	bx	lr

08006ff4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2204      	movs	r2, #4
 800700c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr

0800701c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702a:	2b04      	cmp	r3, #4
 800702c:	d105      	bne.n	800703a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	bc80      	pop	{r7}
 8007044:	4770      	bx	lr

08007046 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007054:	2b03      	cmp	r3, #3
 8007056:	d10b      	bne.n	8007070 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007092:	2b20      	cmp	r3, #32
 8007094:	d004      	beq.n	80070a0 <USBD_StdDevReq+0x24>
 8007096:	2b40      	cmp	r3, #64	; 0x40
 8007098:	d002      	beq.n	80070a0 <USBD_StdDevReq+0x24>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d008      	beq.n	80070b0 <USBD_StdDevReq+0x34>
 800709e:	e04c      	b.n	800713a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	4798      	blx	r3
      break;
 80070ae:	e049      	b.n	8007144 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b09      	cmp	r3, #9
 80070b6:	d83a      	bhi.n	800712e <USBD_StdDevReq+0xb2>
 80070b8:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <USBD_StdDevReq+0x44>)
 80070ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070be:	bf00      	nop
 80070c0:	08007111 	.word	0x08007111
 80070c4:	08007125 	.word	0x08007125
 80070c8:	0800712f 	.word	0x0800712f
 80070cc:	0800711b 	.word	0x0800711b
 80070d0:	0800712f 	.word	0x0800712f
 80070d4:	080070f3 	.word	0x080070f3
 80070d8:	080070e9 	.word	0x080070e9
 80070dc:	0800712f 	.word	0x0800712f
 80070e0:	08007107 	.word	0x08007107
 80070e4:	080070fd 	.word	0x080070fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f9d4 	bl	8007498 <USBD_GetDescriptor>
          break;
 80070f0:	e022      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fb37 	bl	8007768 <USBD_SetAddress>
          break;
 80070fa:	e01d      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fb74 	bl	80077ec <USBD_SetConfig>
          break;
 8007104:	e018      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fbfd 	bl	8007908 <USBD_GetConfig>
          break;
 800710e:	e013      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fc2c 	bl	8007970 <USBD_GetStatus>
          break;
 8007118:	e00e      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fc5a 	bl	80079d6 <USBD_SetFeature>
          break;
 8007122:	e009      	b.n	8007138 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fc69 	bl	80079fe <USBD_ClrFeature>
          break;
 800712c:	e004      	b.n	8007138 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fcc1 	bl	8007ab8 <USBD_CtlError>
          break;
 8007136:	bf00      	nop
      }
      break;
 8007138:	e004      	b.n	8007144 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fcbb 	bl	8007ab8 <USBD_CtlError>
      break;
 8007142:	bf00      	nop
  }

  return ret;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop

08007150 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007166:	2b20      	cmp	r3, #32
 8007168:	d003      	beq.n	8007172 <USBD_StdItfReq+0x22>
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	d001      	beq.n	8007172 <USBD_StdItfReq+0x22>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d12a      	bne.n	80071c8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007178:	3b01      	subs	r3, #1
 800717a:	2b02      	cmp	r3, #2
 800717c:	d81d      	bhi.n	80071ba <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	889b      	ldrh	r3, [r3, #4]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b01      	cmp	r3, #1
 8007186:	d813      	bhi.n	80071b0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	88db      	ldrh	r3, [r3, #6]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d110      	bne.n	80071c4 <USBD_StdItfReq+0x74>
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10d      	bne.n	80071c4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fd4d 	bl	8007c48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071ae:	e009      	b.n	80071c4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fc80 	bl	8007ab8 <USBD_CtlError>
          break;
 80071b8:	e004      	b.n	80071c4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fc7b 	bl	8007ab8 <USBD_CtlError>
          break;
 80071c2:	e000      	b.n	80071c6 <USBD_StdItfReq+0x76>
          break;
 80071c4:	bf00      	nop
      }
      break;
 80071c6:	e004      	b.n	80071d2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fc74 	bl	8007ab8 <USBD_CtlError>
      break;
 80071d0:	bf00      	nop
  }

  return USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	889b      	ldrh	r3, [r3, #4]
 80071ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	d004      	beq.n	8007206 <USBD_StdEPReq+0x2a>
 80071fc:	2b40      	cmp	r3, #64	; 0x40
 80071fe:	d002      	beq.n	8007206 <USBD_StdEPReq+0x2a>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d008      	beq.n	8007216 <USBD_StdEPReq+0x3a>
 8007204:	e13d      	b.n	8007482 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
      break;
 8007214:	e13a      	b.n	800748c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800721e:	2b20      	cmp	r3, #32
 8007220:	d10a      	bne.n	8007238 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4798      	blx	r3
 8007230:	4603      	mov	r3, r0
 8007232:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	e12a      	b.n	800748e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d03e      	beq.n	80072be <USBD_StdEPReq+0xe2>
 8007240:	2b03      	cmp	r3, #3
 8007242:	d002      	beq.n	800724a <USBD_StdEPReq+0x6e>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d070      	beq.n	800732a <USBD_StdEPReq+0x14e>
 8007248:	e115      	b.n	8007476 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007250:	2b02      	cmp	r3, #2
 8007252:	d002      	beq.n	800725a <USBD_StdEPReq+0x7e>
 8007254:	2b03      	cmp	r3, #3
 8007256:	d015      	beq.n	8007284 <USBD_StdEPReq+0xa8>
 8007258:	e02b      	b.n	80072b2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00c      	beq.n	800727a <USBD_StdEPReq+0x9e>
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	2b80      	cmp	r3, #128	; 0x80
 8007264:	d009      	beq.n	800727a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f003 fd54 	bl	800ad18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007270:	2180      	movs	r1, #128	; 0x80
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f003 fd50 	bl	800ad18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007278:	e020      	b.n	80072bc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fc1b 	bl	8007ab8 <USBD_CtlError>
              break;
 8007282:	e01b      	b.n	80072bc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	885b      	ldrh	r3, [r3, #2]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10e      	bne.n	80072aa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00b      	beq.n	80072aa <USBD_StdEPReq+0xce>
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	2b80      	cmp	r3, #128	; 0x80
 8007296:	d008      	beq.n	80072aa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	88db      	ldrh	r3, [r3, #6]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f003 fd37 	bl	800ad18 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fccc 	bl	8007c48 <USBD_CtlSendStatus>

              break;
 80072b0:	e004      	b.n	80072bc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fbff 	bl	8007ab8 <USBD_CtlError>
              break;
 80072ba:	bf00      	nop
          }
          break;
 80072bc:	e0e0      	b.n	8007480 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d002      	beq.n	80072ce <USBD_StdEPReq+0xf2>
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d015      	beq.n	80072f8 <USBD_StdEPReq+0x11c>
 80072cc:	e026      	b.n	800731c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00c      	beq.n	80072ee <USBD_StdEPReq+0x112>
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	2b80      	cmp	r3, #128	; 0x80
 80072d8:	d009      	beq.n	80072ee <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f003 fd1a 	bl	800ad18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80072e4:	2180      	movs	r1, #128	; 0x80
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f003 fd16 	bl	800ad18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072ec:	e01c      	b.n	8007328 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fbe1 	bl	8007ab8 <USBD_CtlError>
              break;
 80072f6:	e017      	b.n	8007328 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	885b      	ldrh	r3, [r3, #2]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d112      	bne.n	8007326 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f003 fd21 	bl	800ad56 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fc97 	bl	8007c48 <USBD_CtlSendStatus>
              }
              break;
 800731a:	e004      	b.n	8007326 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fbca 	bl	8007ab8 <USBD_CtlError>
              break;
 8007324:	e000      	b.n	8007328 <USBD_StdEPReq+0x14c>
              break;
 8007326:	bf00      	nop
          }
          break;
 8007328:	e0aa      	b.n	8007480 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	2b02      	cmp	r3, #2
 8007332:	d002      	beq.n	800733a <USBD_StdEPReq+0x15e>
 8007334:	2b03      	cmp	r3, #3
 8007336:	d032      	beq.n	800739e <USBD_StdEPReq+0x1c2>
 8007338:	e097      	b.n	800746a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <USBD_StdEPReq+0x174>
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	2b80      	cmp	r3, #128	; 0x80
 8007344:	d004      	beq.n	8007350 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fbb5 	bl	8007ab8 <USBD_CtlError>
                break;
 800734e:	e091      	b.n	8007474 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007354:	2b00      	cmp	r3, #0
 8007356:	da0b      	bge.n	8007370 <USBD_StdEPReq+0x194>
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	3310      	adds	r3, #16
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	3304      	adds	r3, #4
 800736e:	e00b      	b.n	8007388 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4413      	add	r3, r2
 8007386:	3304      	adds	r3, #4
 8007388:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2202      	movs	r2, #2
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fbf8 	bl	8007b8c <USBD_CtlSendData>
              break;
 800739c:	e06a      	b.n	8007474 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800739e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	da11      	bge.n	80073ca <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	f003 020f 	and.w	r2, r3, #15
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	440b      	add	r3, r1
 80073b8:	3318      	adds	r3, #24
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d117      	bne.n	80073f0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fb78 	bl	8007ab8 <USBD_CtlError>
                  break;
 80073c8:	e054      	b.n	8007474 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	f003 020f 	and.w	r2, r3, #15
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	4613      	mov	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	440b      	add	r3, r1
 80073dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d104      	bne.n	80073f0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fb65 	bl	8007ab8 <USBD_CtlError>
                  break;
 80073ee:	e041      	b.n	8007474 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da0b      	bge.n	8007410 <USBD_StdEPReq+0x234>
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	3310      	adds	r3, #16
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	4413      	add	r3, r2
 800740c:	3304      	adds	r3, #4
 800740e:	e00b      	b.n	8007428 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	4413      	add	r3, r2
 8007426:	3304      	adds	r3, #4
 8007428:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <USBD_StdEPReq+0x25a>
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	2b80      	cmp	r3, #128	; 0x80
 8007434:	d103      	bne.n	800743e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	e00e      	b.n	800745c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f003 fca6 	bl	800ad94 <USBD_LL_IsStallEP>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2201      	movs	r2, #1
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	e002      	b.n	800745c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2202      	movs	r2, #2
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fb92 	bl	8007b8c <USBD_CtlSendData>
              break;
 8007468:	e004      	b.n	8007474 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fb23 	bl	8007ab8 <USBD_CtlError>
              break;
 8007472:	bf00      	nop
          }
          break;
 8007474:	e004      	b.n	8007480 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fb1d 	bl	8007ab8 <USBD_CtlError>
          break;
 800747e:	bf00      	nop
      }
      break;
 8007480:	e004      	b.n	800748c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fb17 	bl	8007ab8 <USBD_CtlError>
      break;
 800748a:	bf00      	nop
  }

  return ret;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	885b      	ldrh	r3, [r3, #2]
 80074b2:	0a1b      	lsrs	r3, r3, #8
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	2b06      	cmp	r3, #6
 80074ba:	f200 8128 	bhi.w	800770e <USBD_GetDescriptor+0x276>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <USBD_GetDescriptor+0x2c>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074e1 	.word	0x080074e1
 80074c8:	080074f9 	.word	0x080074f9
 80074cc:	08007539 	.word	0x08007539
 80074d0:	0800770f 	.word	0x0800770f
 80074d4:	0800770f 	.word	0x0800770f
 80074d8:	080076af 	.word	0x080076af
 80074dc:	080076db 	.word	0x080076db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	7c12      	ldrb	r2, [r2, #16]
 80074ec:	f107 0108 	add.w	r1, r7, #8
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
 80074f4:	60f8      	str	r0, [r7, #12]
      break;
 80074f6:	e112      	b.n	800771e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	7c1b      	ldrb	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10d      	bne.n	800751c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007508:	f107 0208 	add.w	r2, r7, #8
 800750c:	4610      	mov	r0, r2
 800750e:	4798      	blx	r3
 8007510:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3301      	adds	r3, #1
 8007516:	2202      	movs	r2, #2
 8007518:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800751a:	e100      	b.n	800771e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	f107 0208 	add.w	r2, r7, #8
 8007528:	4610      	mov	r0, r2
 800752a:	4798      	blx	r3
 800752c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3301      	adds	r3, #1
 8007532:	2202      	movs	r2, #2
 8007534:	701a      	strb	r2, [r3, #0]
      break;
 8007536:	e0f2      	b.n	800771e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	885b      	ldrh	r3, [r3, #2]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b05      	cmp	r3, #5
 8007540:	f200 80ac 	bhi.w	800769c <USBD_GetDescriptor+0x204>
 8007544:	a201      	add	r2, pc, #4	; (adr r2, 800754c <USBD_GetDescriptor+0xb4>)
 8007546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754a:	bf00      	nop
 800754c:	08007565 	.word	0x08007565
 8007550:	08007599 	.word	0x08007599
 8007554:	080075cd 	.word	0x080075cd
 8007558:	08007601 	.word	0x08007601
 800755c:	08007635 	.word	0x08007635
 8007560:	08007669 	.word	0x08007669
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	7c12      	ldrb	r2, [r2, #16]
 800757c:	f107 0108 	add.w	r1, r7, #8
 8007580:	4610      	mov	r0, r2
 8007582:	4798      	blx	r3
 8007584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007586:	e091      	b.n	80076ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fa94 	bl	8007ab8 <USBD_CtlError>
            err++;
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	3301      	adds	r3, #1
 8007594:	72fb      	strb	r3, [r7, #11]
          break;
 8007596:	e089      	b.n	80076ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	7c12      	ldrb	r2, [r2, #16]
 80075b0:	f107 0108 	add.w	r1, r7, #8
 80075b4:	4610      	mov	r0, r2
 80075b6:	4798      	blx	r3
 80075b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ba:	e077      	b.n	80076ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fa7a 	bl	8007ab8 <USBD_CtlError>
            err++;
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	3301      	adds	r3, #1
 80075c8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ca:	e06f      	b.n	80076ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00b      	beq.n	80075f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	7c12      	ldrb	r2, [r2, #16]
 80075e4:	f107 0108 	add.w	r1, r7, #8
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
 80075ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ee:	e05d      	b.n	80076ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fa60 	bl	8007ab8 <USBD_CtlError>
            err++;
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	3301      	adds	r3, #1
 80075fc:	72fb      	strb	r3, [r7, #11]
          break;
 80075fe:	e055      	b.n	80076ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	7c12      	ldrb	r2, [r2, #16]
 8007618:	f107 0108 	add.w	r1, r7, #8
 800761c:	4610      	mov	r0, r2
 800761e:	4798      	blx	r3
 8007620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007622:	e043      	b.n	80076ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa46 	bl	8007ab8 <USBD_CtlError>
            err++;
 800762c:	7afb      	ldrb	r3, [r7, #11]
 800762e:	3301      	adds	r3, #1
 8007630:	72fb      	strb	r3, [r7, #11]
          break;
 8007632:	e03b      	b.n	80076ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00b      	beq.n	8007658 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	7c12      	ldrb	r2, [r2, #16]
 800764c:	f107 0108 	add.w	r1, r7, #8
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
 8007654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007656:	e029      	b.n	80076ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa2c 	bl	8007ab8 <USBD_CtlError>
            err++;
 8007660:	7afb      	ldrb	r3, [r7, #11]
 8007662:	3301      	adds	r3, #1
 8007664:	72fb      	strb	r3, [r7, #11]
          break;
 8007666:	e021      	b.n	80076ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	7c12      	ldrb	r2, [r2, #16]
 8007680:	f107 0108 	add.w	r1, r7, #8
 8007684:	4610      	mov	r0, r2
 8007686:	4798      	blx	r3
 8007688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800768a:	e00f      	b.n	80076ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa12 	bl	8007ab8 <USBD_CtlError>
            err++;
 8007694:	7afb      	ldrb	r3, [r7, #11]
 8007696:	3301      	adds	r3, #1
 8007698:	72fb      	strb	r3, [r7, #11]
          break;
 800769a:	e007      	b.n	80076ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa0a 	bl	8007ab8 <USBD_CtlError>
          err++;
 80076a4:	7afb      	ldrb	r3, [r7, #11]
 80076a6:	3301      	adds	r3, #1
 80076a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80076aa:	e038      	b.n	800771e <USBD_GetDescriptor+0x286>
 80076ac:	e037      	b.n	800771e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	7c1b      	ldrb	r3, [r3, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d109      	bne.n	80076ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076be:	f107 0208 	add.w	r2, r7, #8
 80076c2:	4610      	mov	r0, r2
 80076c4:	4798      	blx	r3
 80076c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076c8:	e029      	b.n	800771e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f9f3 	bl	8007ab8 <USBD_CtlError>
        err++;
 80076d2:	7afb      	ldrb	r3, [r7, #11]
 80076d4:	3301      	adds	r3, #1
 80076d6:	72fb      	strb	r3, [r7, #11]
      break;
 80076d8:	e021      	b.n	800771e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7c1b      	ldrb	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10d      	bne.n	80076fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ea:	f107 0208 	add.w	r2, r7, #8
 80076ee:	4610      	mov	r0, r2
 80076f0:	4798      	blx	r3
 80076f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3301      	adds	r3, #1
 80076f8:	2207      	movs	r2, #7
 80076fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076fc:	e00f      	b.n	800771e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f9d9 	bl	8007ab8 <USBD_CtlError>
        err++;
 8007706:	7afb      	ldrb	r3, [r7, #11]
 8007708:	3301      	adds	r3, #1
 800770a:	72fb      	strb	r3, [r7, #11]
      break;
 800770c:	e007      	b.n	800771e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f9d1 	bl	8007ab8 <USBD_CtlError>
      err++;
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	3301      	adds	r3, #1
 800771a:	72fb      	strb	r3, [r7, #11]
      break;
 800771c:	bf00      	nop
  }

  if (err != 0U)
 800771e:	7afb      	ldrb	r3, [r7, #11]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d11c      	bne.n	800775e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007724:	893b      	ldrh	r3, [r7, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d011      	beq.n	800774e <USBD_GetDescriptor+0x2b6>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	88db      	ldrh	r3, [r3, #6]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00d      	beq.n	800774e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	88da      	ldrh	r2, [r3, #6]
 8007736:	893b      	ldrh	r3, [r7, #8]
 8007738:	4293      	cmp	r3, r2
 800773a:	bf28      	it	cs
 800773c:	4613      	movcs	r3, r2
 800773e:	b29b      	uxth	r3, r3
 8007740:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007742:	893b      	ldrh	r3, [r7, #8]
 8007744:	461a      	mov	r2, r3
 8007746:	68f9      	ldr	r1, [r7, #12]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fa1f 	bl	8007b8c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	88db      	ldrh	r3, [r3, #6]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa76 	bl	8007c48 <USBD_CtlSendStatus>
 800775c:	e000      	b.n	8007760 <USBD_GetDescriptor+0x2c8>
    return;
 800775e:	bf00      	nop
    }
  }
}
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop

08007768 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	889b      	ldrh	r3, [r3, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d130      	bne.n	80077dc <USBD_SetAddress+0x74>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	88db      	ldrh	r3, [r3, #6]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d12c      	bne.n	80077dc <USBD_SetAddress+0x74>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	885b      	ldrh	r3, [r3, #2]
 8007786:	2b7f      	cmp	r3, #127	; 0x7f
 8007788:	d828      	bhi.n	80077dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	885b      	ldrh	r3, [r3, #2]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007794:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800779c:	2b03      	cmp	r3, #3
 800779e:	d104      	bne.n	80077aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f988 	bl	8007ab8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a8:	e01c      	b.n	80077e4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	7bfa      	ldrb	r2, [r7, #15]
 80077ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f003 fb18 	bl	800adec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fa43 	bl	8007c48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d0:	e008      	b.n	80077e4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077da:	e003      	b.n	80077e4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f96a 	bl	8007ab8 <USBD_CtlError>
  }
}
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	885b      	ldrh	r3, [r3, #2]
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	4b41      	ldr	r3, [pc, #260]	; (8007904 <USBD_SetConfig+0x118>)
 80077fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007800:	4b40      	ldr	r3, [pc, #256]	; (8007904 <USBD_SetConfig+0x118>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d904      	bls.n	8007812 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f954 	bl	8007ab8 <USBD_CtlError>
 8007810:	e075      	b.n	80078fe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007818:	2b02      	cmp	r3, #2
 800781a:	d002      	beq.n	8007822 <USBD_SetConfig+0x36>
 800781c:	2b03      	cmp	r3, #3
 800781e:	d023      	beq.n	8007868 <USBD_SetConfig+0x7c>
 8007820:	e062      	b.n	80078e8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007822:	4b38      	ldr	r3, [pc, #224]	; (8007904 <USBD_SetConfig+0x118>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d01a      	beq.n	8007860 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800782a:	4b36      	ldr	r3, [pc, #216]	; (8007904 <USBD_SetConfig+0x118>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2203      	movs	r2, #3
 8007838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800783c:	4b31      	ldr	r3, [pc, #196]	; (8007904 <USBD_SetConfig+0x118>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff f9f3 	bl	8006c2e <USBD_SetClassConfig>
 8007848:	4603      	mov	r3, r0
 800784a:	2b02      	cmp	r3, #2
 800784c:	d104      	bne.n	8007858 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f931 	bl	8007ab8 <USBD_CtlError>
            return;
 8007856:	e052      	b.n	80078fe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f9f5 	bl	8007c48 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800785e:	e04e      	b.n	80078fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f9f1 	bl	8007c48 <USBD_CtlSendStatus>
        break;
 8007866:	e04a      	b.n	80078fe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007868:	4b26      	ldr	r3, [pc, #152]	; (8007904 <USBD_SetConfig+0x118>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d112      	bne.n	8007896 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007878:	4b22      	ldr	r3, [pc, #136]	; (8007904 <USBD_SetConfig+0x118>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007882:	4b20      	ldr	r3, [pc, #128]	; (8007904 <USBD_SetConfig+0x118>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff f9ef 	bl	8006c6c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f9da 	bl	8007c48 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007894:	e033      	b.n	80078fe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007896:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <USBD_SetConfig+0x118>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d01d      	beq.n	80078e0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff f9dd 	bl	8006c6c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80078b2:	4b14      	ldr	r3, [pc, #80]	; (8007904 <USBD_SetConfig+0x118>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078bc:	4b11      	ldr	r3, [pc, #68]	; (8007904 <USBD_SetConfig+0x118>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff f9b3 	bl	8006c2e <USBD_SetClassConfig>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d104      	bne.n	80078d8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f8f1 	bl	8007ab8 <USBD_CtlError>
            return;
 80078d6:	e012      	b.n	80078fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9b5 	bl	8007c48 <USBD_CtlSendStatus>
        break;
 80078de:	e00e      	b.n	80078fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f9b1 	bl	8007c48 <USBD_CtlSendStatus>
        break;
 80078e6:	e00a      	b.n	80078fe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f8e4 	bl	8007ab8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80078f0:	4b04      	ldr	r3, [pc, #16]	; (8007904 <USBD_SetConfig+0x118>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff f9b8 	bl	8006c6c <USBD_ClrClassConfig>
        break;
 80078fc:	bf00      	nop
    }
  }
}
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000410 	.word	0x20000410

08007908 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	88db      	ldrh	r3, [r3, #6]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d004      	beq.n	8007924 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f8cb 	bl	8007ab8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007922:	e021      	b.n	8007968 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800792a:	2b01      	cmp	r3, #1
 800792c:	db17      	blt.n	800795e <USBD_GetConfig+0x56>
 800792e:	2b02      	cmp	r3, #2
 8007930:	dd02      	ble.n	8007938 <USBD_GetConfig+0x30>
 8007932:	2b03      	cmp	r3, #3
 8007934:	d00b      	beq.n	800794e <USBD_GetConfig+0x46>
 8007936:	e012      	b.n	800795e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3308      	adds	r3, #8
 8007942:	2201      	movs	r2, #1
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f920 	bl	8007b8c <USBD_CtlSendData>
        break;
 800794c:	e00c      	b.n	8007968 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3304      	adds	r3, #4
 8007952:	2201      	movs	r2, #1
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f918 	bl	8007b8c <USBD_CtlSendData>
        break;
 800795c:	e004      	b.n	8007968 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f8a9 	bl	8007ab8 <USBD_CtlError>
        break;
 8007966:	bf00      	nop
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007980:	3b01      	subs	r3, #1
 8007982:	2b02      	cmp	r3, #2
 8007984:	d81e      	bhi.n	80079c4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	88db      	ldrh	r3, [r3, #6]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d004      	beq.n	8007998 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f891 	bl	8007ab8 <USBD_CtlError>
        break;
 8007996:	e01a      	b.n	80079ce <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f043 0202 	orr.w	r2, r3, #2
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	330c      	adds	r3, #12
 80079b8:	2202      	movs	r2, #2
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f8e5 	bl	8007b8c <USBD_CtlSendData>
      break;
 80079c2:	e004      	b.n	80079ce <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f876 	bl	8007ab8 <USBD_CtlError>
      break;
 80079cc:	bf00      	nop
  }
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	885b      	ldrh	r3, [r3, #2]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d106      	bne.n	80079f6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f929 	bl	8007c48 <USBD_CtlSendStatus>
  }
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d80b      	bhi.n	8007a2c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	885b      	ldrh	r3, [r3, #2]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d10c      	bne.n	8007a36 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f90f 	bl	8007c48 <USBD_CtlSendStatus>
      }
      break;
 8007a2a:	e004      	b.n	8007a36 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f842 	bl	8007ab8 <USBD_CtlError>
      break;
 8007a34:	e000      	b.n	8007a38 <USBD_ClrFeature+0x3a>
      break;
 8007a36:	bf00      	nop
  }
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	781a      	ldrb	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	785a      	ldrb	r2, [r3, #1]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	3302      	adds	r3, #2
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	3303      	adds	r3, #3
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	021b      	lsls	r3, r3, #8
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	4413      	add	r3, r2
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	3305      	adds	r3, #5
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	021b      	lsls	r3, r3, #8
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	4413      	add	r3, r2
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	3306      	adds	r3, #6
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	3307      	adds	r3, #7
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	80da      	strh	r2, [r3, #6]

}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bc80      	pop	{r7}
 8007ab6:	4770      	bx	lr

08007ab8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ac2:	2180      	movs	r1, #128	; 0x80
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f003 f927 	bl	800ad18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007aca:	2100      	movs	r1, #0
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f003 f923 	bl	800ad18 <USBD_LL_StallEP>
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d032      	beq.n	8007b56 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f834 	bl	8007b5e <USBD_GetLen>
 8007af6:	4603      	mov	r3, r0
 8007af8:	3301      	adds	r3, #1
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	75fa      	strb	r2, [r7, #23]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4413      	add	r3, r2
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	7812      	ldrb	r2, [r2, #0]
 8007b14:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	75fa      	strb	r2, [r7, #23]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	4413      	add	r3, r2
 8007b22:	2203      	movs	r2, #3
 8007b24:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007b26:	e012      	b.n	8007b4e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	60fa      	str	r2, [r7, #12]
 8007b2e:	7dfa      	ldrb	r2, [r7, #23]
 8007b30:	1c51      	adds	r1, r2, #1
 8007b32:	75f9      	strb	r1, [r7, #23]
 8007b34:	4611      	mov	r1, r2
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	440a      	add	r2, r1
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	75fa      	strb	r2, [r7, #23]
 8007b44:	461a      	mov	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4413      	add	r3, r2
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1e8      	bne.n	8007b28 <USBD_GetString+0x4e>
    }
  }
}
 8007b56:	bf00      	nop
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b6a:	e005      	b.n	8007b78 <USBD_GetLen+0x1a>
  {
    len++;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	3301      	adds	r3, #1
 8007b76:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1f5      	bne.n	8007b6c <USBD_GetLen+0xe>
  }

  return len;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr

08007b8c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ba2:	88fa      	ldrh	r2, [r7, #6]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ba8:	88fa      	ldrh	r2, [r7, #6]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bae:	88fb      	ldrh	r3, [r7, #6]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f003 f938 	bl	800ae2a <USBD_LL_Transmit>

  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f003 f926 	bl	800ae2a <USBD_LL_Transmit>

  return USBD_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2203      	movs	r2, #3
 8007bfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bfe:	88fa      	ldrh	r2, [r7, #6]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007c06:	88fa      	ldrh	r2, [r7, #6]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	2100      	movs	r1, #0
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f003 f92b 	bl	800ae70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	2100      	movs	r1, #0
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f003 f919 	bl	800ae70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2204      	movs	r2, #4
 8007c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f003 f8e3 	bl	800ae2a <USBD_LL_Transmit>

  return USBD_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2205      	movs	r2, #5
 8007c7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c7e:	2300      	movs	r3, #0
 8007c80:	2200      	movs	r2, #0
 8007c82:	2100      	movs	r1, #0
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f003 f8f3 	bl	800ae70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c9a:	f3ef 8305 	mrs	r3, IPSR
 8007c9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10f      	bne.n	8007cc6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8007caa:	607b      	str	r3, [r7, #4]
  return(result);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d109      	bne.n	8007cc6 <osKernelInitialize+0x32>
 8007cb2:	4b10      	ldr	r3, [pc, #64]	; (8007cf4 <osKernelInitialize+0x60>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d109      	bne.n	8007cce <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cba:	f3ef 8311 	mrs	r3, BASEPRI
 8007cbe:	603b      	str	r3, [r7, #0]
  return(result);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007cc6:	f06f 0305 	mvn.w	r3, #5
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	e00c      	b.n	8007ce8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cce:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <osKernelInitialize+0x60>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d105      	bne.n	8007ce2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007cd6:	4b07      	ldr	r3, [pc, #28]	; (8007cf4 <osKernelInitialize+0x60>)
 8007cd8:	2201      	movs	r2, #1
 8007cda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	e002      	b.n	8007ce8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr
 8007cf4:	20000414 	.word	0x20000414

08007cf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cfe:	f3ef 8305 	mrs	r3, IPSR
 8007d02:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10f      	bne.n	8007d2a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d0e:	607b      	str	r3, [r7, #4]
  return(result);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d109      	bne.n	8007d2a <osKernelStart+0x32>
 8007d16:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <osKernelStart+0x64>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d109      	bne.n	8007d32 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8007d22:	603b      	str	r3, [r7, #0]
  return(result);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007d2a:	f06f 0305 	mvn.w	r3, #5
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	e00e      	b.n	8007d50 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <osKernelStart+0x64>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d107      	bne.n	8007d4a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007d3a:	4b08      	ldr	r3, [pc, #32]	; (8007d5c <osKernelStart+0x64>)
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007d40:	f001 f862 	bl	8008e08 <vTaskStartScheduler>
      stat = osOK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e002      	b.n	8007d50 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007d50:	68fb      	ldr	r3, [r7, #12]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000414 	.word	0x20000414

08007d60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b092      	sub	sp, #72	; 0x48
 8007d64:	af04      	add	r7, sp, #16
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d70:	f3ef 8305 	mrs	r3, IPSR
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f040 8094 	bne.w	8007ea6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d82:	623b      	str	r3, [r7, #32]
  return(result);
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f040 808d 	bne.w	8007ea6 <osThreadNew+0x146>
 8007d8c:	4b48      	ldr	r3, [pc, #288]	; (8007eb0 <osThreadNew+0x150>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d106      	bne.n	8007da2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d94:	f3ef 8311 	mrs	r3, BASEPRI
 8007d98:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f040 8082 	bne.w	8007ea6 <osThreadNew+0x146>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d07e      	beq.n	8007ea6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007da8:	2340      	movs	r3, #64	; 0x40
 8007daa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007dac:	2318      	movs	r3, #24
 8007dae:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007db0:	2300      	movs	r3, #0
 8007db2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007db4:	f107 031b 	add.w	r3, r7, #27
 8007db8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007dba:	f04f 33ff 	mov.w	r3, #4294967295
 8007dbe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d045      	beq.n	8007e52 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <osThreadNew+0x74>
        name = attr->name;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d008      	beq.n	8007dfa <osThreadNew+0x9a>
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	2b38      	cmp	r3, #56	; 0x38
 8007dec:	d805      	bhi.n	8007dfa <osThreadNew+0x9a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <osThreadNew+0x9e>
        return (NULL);
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e054      	b.n	8007ea8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	089b      	lsrs	r3, r3, #2
 8007e0c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00e      	beq.n	8007e34 <osThreadNew+0xd4>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	2b5b      	cmp	r3, #91	; 0x5b
 8007e1c:	d90a      	bls.n	8007e34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d006      	beq.n	8007e34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <osThreadNew+0xd4>
        mem = 1;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e32:	e010      	b.n	8007e56 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10c      	bne.n	8007e56 <osThreadNew+0xf6>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d108      	bne.n	8007e56 <osThreadNew+0xf6>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <osThreadNew+0xf6>
          mem = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e50:	e001      	b.n	8007e56 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d110      	bne.n	8007e7e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e64:	9202      	str	r2, [sp, #8]
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fe00 	bl	8008a78 <xTaskCreateStatic>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	e013      	b.n	8007ea6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d110      	bne.n	8007ea6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	f107 0314 	add.w	r3, r7, #20
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fe47 	bl	8008b2a <xTaskCreate>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d001      	beq.n	8007ea6 <osThreadNew+0x146>
          hTask = NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ea6:	697b      	ldr	r3, [r7, #20]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3738      	adds	r7, #56	; 0x38
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20000414 	.word	0x20000414

08007eb4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ebc:	f3ef 8305 	mrs	r3, IPSR
 8007ec0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ec2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10f      	bne.n	8007ee8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ecc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d109      	bne.n	8007ee8 <osDelay+0x34>
 8007ed4:	4b0d      	ldr	r3, [pc, #52]	; (8007f0c <osDelay+0x58>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d109      	bne.n	8007ef0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007edc:	f3ef 8311 	mrs	r3, BASEPRI
 8007ee0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <osDelay+0x3c>
    stat = osErrorISR;
 8007ee8:	f06f 0305 	mvn.w	r3, #5
 8007eec:	617b      	str	r3, [r7, #20]
 8007eee:	e007      	b.n	8007f00 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 ff50 	bl	8008da0 <vTaskDelay>
    }
  }

  return (stat);
 8007f00:	697b      	ldr	r3, [r7, #20]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000414 	.word	0x20000414

08007f10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a06      	ldr	r2, [pc, #24]	; (8007f38 <vApplicationGetIdleTaskMemory+0x28>)
 8007f20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	4a05      	ldr	r2, [pc, #20]	; (8007f3c <vApplicationGetIdleTaskMemory+0x2c>)
 8007f26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2240      	movs	r2, #64	; 0x40
 8007f2c:	601a      	str	r2, [r3, #0]
}
 8007f2e:	bf00      	nop
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr
 8007f38:	20000418 	.word	0x20000418
 8007f3c:	20000474 	.word	0x20000474

08007f40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4a06      	ldr	r2, [pc, #24]	; (8007f68 <vApplicationGetTimerTaskMemory+0x28>)
 8007f50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4a05      	ldr	r2, [pc, #20]	; (8007f6c <vApplicationGetTimerTaskMemory+0x2c>)
 8007f56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2280      	movs	r2, #128	; 0x80
 8007f5c:	601a      	str	r2, [r3, #0]
}
 8007f5e:	bf00      	nop
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr
 8007f68:	20000574 	.word	0x20000574
 8007f6c:	200005d0 	.word	0x200005d0

08007f70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f103 0208 	add.w	r2, r3, #8
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f04f 32ff 	mov.w	r2, #4294967295
 8007f88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f103 0208 	add.w	r2, r3, #8
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f103 0208 	add.w	r2, r3, #8
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr

08007fae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bc80      	pop	{r7}
 8007fc4:	4770      	bx	lr

08007fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	601a      	str	r2, [r3, #0]
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr

0800800c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008022:	d103      	bne.n	800802c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	e00c      	b.n	8008046 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3308      	adds	r3, #8
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	e002      	b.n	800803a <vListInsert+0x2e>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	429a      	cmp	r2, r3
 8008044:	d2f6      	bcs.n	8008034 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	601a      	str	r2, [r3, #0]
}
 8008072:	bf00      	nop
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	bc80      	pop	{r7}
 800807a:	4770      	bx	lr

0800807c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	6892      	ldr	r2, [r2, #8]
 8008092:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6852      	ldr	r2, [r2, #4]
 800809c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d103      	bne.n	80080b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689a      	ldr	r2, [r3, #8]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	1e5a      	subs	r2, r3, #1
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr
	...

080080d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d109      	bne.n	80080f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	60bb      	str	r3, [r7, #8]
 80080f6:	e7fe      	b.n	80080f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80080f8:	f001 ff96 	bl	800a028 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008104:	68f9      	ldr	r1, [r7, #12]
 8008106:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008108:	fb01 f303 	mul.w	r3, r1, r3
 800810c:	441a      	add	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008128:	3b01      	subs	r3, #1
 800812a:	68f9      	ldr	r1, [r7, #12]
 800812c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800812e:	fb01 f303 	mul.w	r3, r1, r3
 8008132:	441a      	add	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	22ff      	movs	r2, #255	; 0xff
 800813c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	22ff      	movs	r2, #255	; 0xff
 8008144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d114      	bne.n	8008178 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d01a      	beq.n	800818c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3310      	adds	r3, #16
 800815a:	4618      	mov	r0, r3
 800815c:	f001 f8d8 	bl	8009310 <xTaskRemoveFromEventList>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d012      	beq.n	800818c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008166:	4b0d      	ldr	r3, [pc, #52]	; (800819c <xQueueGenericReset+0xcc>)
 8008168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	e009      	b.n	800818c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3310      	adds	r3, #16
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fef7 	bl	8007f70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3324      	adds	r3, #36	; 0x24
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff fef2 	bl	8007f70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800818c:	f001 ff7a 	bl	800a084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008190:	2301      	movs	r3, #1
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	e000ed04 	.word	0xe000ed04

080081a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08e      	sub	sp, #56	; 0x38
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <xQueueGenericCreateStatic+0x28>
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80081c6:	e7fe      	b.n	80081c6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d109      	bne.n	80081e2 <xQueueGenericCreateStatic+0x42>
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	627b      	str	r3, [r7, #36]	; 0x24
 80081e0:	e7fe      	b.n	80081e0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <xQueueGenericCreateStatic+0x4e>
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <xQueueGenericCreateStatic+0x52>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e000      	b.n	80081f4 <xQueueGenericCreateStatic+0x54>
 80081f2:	2300      	movs	r3, #0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d109      	bne.n	800820c <xQueueGenericCreateStatic+0x6c>
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	623b      	str	r3, [r7, #32]
 800820a:	e7fe      	b.n	800820a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d102      	bne.n	8008218 <xQueueGenericCreateStatic+0x78>
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <xQueueGenericCreateStatic+0x7c>
 8008218:	2301      	movs	r3, #1
 800821a:	e000      	b.n	800821e <xQueueGenericCreateStatic+0x7e>
 800821c:	2300      	movs	r3, #0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d109      	bne.n	8008236 <xQueueGenericCreateStatic+0x96>
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	61fb      	str	r3, [r7, #28]
 8008234:	e7fe      	b.n	8008234 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008236:	2350      	movs	r3, #80	; 0x50
 8008238:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2b50      	cmp	r3, #80	; 0x50
 800823e:	d009      	beq.n	8008254 <xQueueGenericCreateStatic+0xb4>
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	61bb      	str	r3, [r7, #24]
 8008252:	e7fe      	b.n	8008252 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00d      	beq.n	800827a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800825e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008266:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	4613      	mov	r3, r2
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	68b9      	ldr	r1, [r7, #8]
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f805 	bl	8008284 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800827c:	4618      	mov	r0, r3
 800827e:	3730      	adds	r7, #48	; 0x30
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d103      	bne.n	80082a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e002      	b.n	80082a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80082b2:	2101      	movs	r1, #1
 80082b4:	69b8      	ldr	r0, [r7, #24]
 80082b6:	f7ff ff0b 	bl	80080d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	78fa      	ldrb	r2, [r7, #3]
 80082be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08e      	sub	sp, #56	; 0x38
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082da:	2300      	movs	r3, #0
 80082dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d109      	bne.n	80082fc <xQueueGenericSend+0x30>
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80082fa:	e7fe      	b.n	80082fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <xQueueGenericSend+0x3e>
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <xQueueGenericSend+0x42>
 800830a:	2301      	movs	r3, #1
 800830c:	e000      	b.n	8008310 <xQueueGenericSend+0x44>
 800830e:	2300      	movs	r3, #0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d109      	bne.n	8008328 <xQueueGenericSend+0x5c>
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	627b      	str	r3, [r7, #36]	; 0x24
 8008326:	e7fe      	b.n	8008326 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d103      	bne.n	8008336 <xQueueGenericSend+0x6a>
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <xQueueGenericSend+0x6e>
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <xQueueGenericSend+0x70>
 800833a:	2300      	movs	r3, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d109      	bne.n	8008354 <xQueueGenericSend+0x88>
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	623b      	str	r3, [r7, #32]
 8008352:	e7fe      	b.n	8008352 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008354:	f001 f996 	bl	8009684 <xTaskGetSchedulerState>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d102      	bne.n	8008364 <xQueueGenericSend+0x98>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <xQueueGenericSend+0x9c>
 8008364:	2301      	movs	r3, #1
 8008366:	e000      	b.n	800836a <xQueueGenericSend+0x9e>
 8008368:	2300      	movs	r3, #0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d109      	bne.n	8008382 <xQueueGenericSend+0xb6>
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	61fb      	str	r3, [r7, #28]
 8008380:	e7fe      	b.n	8008380 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008382:	f001 fe51 	bl	800a028 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838e:	429a      	cmp	r2, r3
 8008390:	d302      	bcc.n	8008398 <xQueueGenericSend+0xcc>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d129      	bne.n	80083ec <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	68b9      	ldr	r1, [r7, #8]
 800839c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800839e:	f000 f9ff 	bl	80087a0 <prvCopyDataToQueue>
 80083a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d010      	beq.n	80083ce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	3324      	adds	r3, #36	; 0x24
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 ffad 	bl	8009310 <xTaskRemoveFromEventList>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d013      	beq.n	80083e4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083bc:	4b3f      	ldr	r3, [pc, #252]	; (80084bc <xQueueGenericSend+0x1f0>)
 80083be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	e00a      	b.n	80083e4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80083ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80083d4:	4b39      	ldr	r3, [pc, #228]	; (80084bc <xQueueGenericSend+0x1f0>)
 80083d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083e4:	f001 fe4e 	bl	800a084 <vPortExitCritical>
				return pdPASS;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e063      	b.n	80084b4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083f2:	f001 fe47 	bl	800a084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	e05c      	b.n	80084b4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008400:	f107 0314 	add.w	r3, r7, #20
 8008404:	4618      	mov	r0, r3
 8008406:	f000 ffe5 	bl	80093d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800840a:	2301      	movs	r3, #1
 800840c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800840e:	f001 fe39 	bl	800a084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008412:	f000 fd5d 	bl	8008ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008416:	f001 fe07 	bl	800a028 <vPortEnterCritical>
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008420:	b25b      	sxtb	r3, r3
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008426:	d103      	bne.n	8008430 <xQueueGenericSend+0x164>
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008436:	b25b      	sxtb	r3, r3
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d103      	bne.n	8008446 <xQueueGenericSend+0x17a>
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008446:	f001 fe1d 	bl	800a084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800844a:	1d3a      	adds	r2, r7, #4
 800844c:	f107 0314 	add.w	r3, r7, #20
 8008450:	4611      	mov	r1, r2
 8008452:	4618      	mov	r0, r3
 8008454:	f000 ffd4 	bl	8009400 <xTaskCheckForTimeOut>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d124      	bne.n	80084a8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800845e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008460:	f000 fa96 	bl	8008990 <prvIsQueueFull>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d018      	beq.n	800849c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846c:	3310      	adds	r3, #16
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	4611      	mov	r1, r2
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fefe 	bl	8009274 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800847a:	f000 fa21 	bl	80088c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800847e:	f000 fd35 	bl	8008eec <xTaskResumeAll>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	f47f af7c 	bne.w	8008382 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800848a:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <xQueueGenericSend+0x1f0>)
 800848c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	e772      	b.n	8008382 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800849c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800849e:	f000 fa0f 	bl	80088c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084a2:	f000 fd23 	bl	8008eec <xTaskResumeAll>
 80084a6:	e76c      	b.n	8008382 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084aa:	f000 fa09 	bl	80088c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084ae:	f000 fd1d 	bl	8008eec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084b2:	2300      	movs	r3, #0
		}
	}
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3738      	adds	r7, #56	; 0x38
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	e000ed04 	.word	0xe000ed04

080084c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08e      	sub	sp, #56	; 0x38
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d109      	bne.n	80084ec <xQueueGenericSendFromISR+0x2c>
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	627b      	str	r3, [r7, #36]	; 0x24
 80084ea:	e7fe      	b.n	80084ea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d103      	bne.n	80084fa <xQueueGenericSendFromISR+0x3a>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <xQueueGenericSendFromISR+0x3e>
 80084fa:	2301      	movs	r3, #1
 80084fc:	e000      	b.n	8008500 <xQueueGenericSendFromISR+0x40>
 80084fe:	2300      	movs	r3, #0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <xQueueGenericSendFromISR+0x58>
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	623b      	str	r3, [r7, #32]
 8008516:	e7fe      	b.n	8008516 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d103      	bne.n	8008526 <xQueueGenericSendFromISR+0x66>
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008522:	2b01      	cmp	r3, #1
 8008524:	d101      	bne.n	800852a <xQueueGenericSendFromISR+0x6a>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <xQueueGenericSendFromISR+0x6c>
 800852a:	2300      	movs	r3, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d109      	bne.n	8008544 <xQueueGenericSendFromISR+0x84>
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	61fb      	str	r3, [r7, #28]
 8008542:	e7fe      	b.n	8008542 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008544:	f001 fe2a 	bl	800a19c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008548:	f3ef 8211 	mrs	r2, BASEPRI
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	61ba      	str	r2, [r7, #24]
 800855e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008560:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008562:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856c:	429a      	cmp	r2, r3
 800856e:	d302      	bcc.n	8008576 <xQueueGenericSendFromISR+0xb6>
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d12c      	bne.n	80085d0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800857c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008586:	f000 f90b 	bl	80087a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800858a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008592:	d112      	bne.n	80085ba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	d016      	beq.n	80085ca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	3324      	adds	r3, #36	; 0x24
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 feb5 	bl	8009310 <xTaskRemoveFromEventList>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00e      	beq.n	80085ca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00b      	beq.n	80085ca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	e007      	b.n	80085ca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085be:	3301      	adds	r3, #1
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	b25a      	sxtb	r2, r3
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80085ca:	2301      	movs	r3, #1
 80085cc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80085ce:	e001      	b.n	80085d4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085d0:	2300      	movs	r3, #0
 80085d2:	637b      	str	r3, [r7, #52]	; 0x34
 80085d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3738      	adds	r7, #56	; 0x38
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08c      	sub	sp, #48	; 0x30
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085f4:	2300      	movs	r3, #0
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d109      	bne.n	8008616 <xQueueReceive+0x2e>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	623b      	str	r3, [r7, #32]
 8008614:	e7fe      	b.n	8008614 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d103      	bne.n	8008624 <xQueueReceive+0x3c>
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <xQueueReceive+0x40>
 8008624:	2301      	movs	r3, #1
 8008626:	e000      	b.n	800862a <xQueueReceive+0x42>
 8008628:	2300      	movs	r3, #0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d109      	bne.n	8008642 <xQueueReceive+0x5a>
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	e7fe      	b.n	8008640 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008642:	f001 f81f 	bl	8009684 <xTaskGetSchedulerState>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d102      	bne.n	8008652 <xQueueReceive+0x6a>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <xQueueReceive+0x6e>
 8008652:	2301      	movs	r3, #1
 8008654:	e000      	b.n	8008658 <xQueueReceive+0x70>
 8008656:	2300      	movs	r3, #0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d109      	bne.n	8008670 <xQueueReceive+0x88>
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	e7fe      	b.n	800866e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008670:	f001 fcda 	bl	800a028 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01f      	beq.n	80086c0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008680:	68b9      	ldr	r1, [r7, #8]
 8008682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008684:	f000 f8f6 	bl	8008874 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	1e5a      	subs	r2, r3, #1
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00f      	beq.n	80086b8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	3310      	adds	r3, #16
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fe37 	bl	8009310 <xTaskRemoveFromEventList>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d007      	beq.n	80086b8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086a8:	4b3c      	ldr	r3, [pc, #240]	; (800879c <xQueueReceive+0x1b4>)
 80086aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086b8:	f001 fce4 	bl	800a084 <vPortExitCritical>
				return pdPASS;
 80086bc:	2301      	movs	r3, #1
 80086be:	e069      	b.n	8008794 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d103      	bne.n	80086ce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086c6:	f001 fcdd 	bl	800a084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e062      	b.n	8008794 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d106      	bne.n	80086e2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086d4:	f107 0310 	add.w	r3, r7, #16
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fe7b 	bl	80093d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086de:	2301      	movs	r3, #1
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086e2:	f001 fccf 	bl	800a084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086e6:	f000 fbf3 	bl	8008ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ea:	f001 fc9d 	bl	800a028 <vPortEnterCritical>
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086f4:	b25b      	sxtb	r3, r3
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fa:	d103      	bne.n	8008704 <xQueueReceive+0x11c>
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800870a:	b25b      	sxtb	r3, r3
 800870c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008710:	d103      	bne.n	800871a <xQueueReceive+0x132>
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800871a:	f001 fcb3 	bl	800a084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800871e:	1d3a      	adds	r2, r7, #4
 8008720:	f107 0310 	add.w	r3, r7, #16
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fe6a 	bl	8009400 <xTaskCheckForTimeOut>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d123      	bne.n	800877a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008734:	f000 f916 	bl	8008964 <prvIsQueueEmpty>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d017      	beq.n	800876e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	3324      	adds	r3, #36	; 0x24
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fd94 	bl	8009274 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800874c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874e:	f000 f8b7 	bl	80088c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008752:	f000 fbcb 	bl	8008eec <xTaskResumeAll>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d189      	bne.n	8008670 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800875c:	4b0f      	ldr	r3, [pc, #60]	; (800879c <xQueueReceive+0x1b4>)
 800875e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	e780      	b.n	8008670 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800876e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008770:	f000 f8a6 	bl	80088c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008774:	f000 fbba 	bl	8008eec <xTaskResumeAll>
 8008778:	e77a      	b.n	8008670 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800877a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800877c:	f000 f8a0 	bl	80088c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008780:	f000 fbb4 	bl	8008eec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008786:	f000 f8ed 	bl	8008964 <prvIsQueueEmpty>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	f43f af6f 	beq.w	8008670 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008792:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008794:	4618      	mov	r0, r3
 8008796:	3730      	adds	r7, #48	; 0x30
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	e000ed04 	.word	0xe000ed04

080087a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10d      	bne.n	80087da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d14d      	bne.n	8008862 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 ff78 	bl	80096c0 <xTaskPriorityDisinherit>
 80087d0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	605a      	str	r2, [r3, #4]
 80087d8:	e043      	b.n	8008862 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d119      	bne.n	8008814 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6898      	ldr	r0, [r3, #8]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e8:	461a      	mov	r2, r3
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	f004 ff00 	bl	800d5f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f8:	441a      	add	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	429a      	cmp	r2, r3
 8008808:	d32b      	bcc.n	8008862 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	609a      	str	r2, [r3, #8]
 8008812:	e026      	b.n	8008862 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	68d8      	ldr	r0, [r3, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881c:	461a      	mov	r2, r3
 800881e:	68b9      	ldr	r1, [r7, #8]
 8008820:	f004 fee6 	bl	800d5f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882c:	425b      	negs	r3, r3
 800882e:	441a      	add	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d207      	bcs.n	8008850 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	425b      	negs	r3, r3
 800884a:	441a      	add	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d105      	bne.n	8008862 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	3b01      	subs	r3, #1
 8008860:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800886a:	697b      	ldr	r3, [r7, #20]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	d018      	beq.n	80088b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888e:	441a      	add	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	429a      	cmp	r2, r3
 800889e:	d303      	bcc.n	80088a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68d9      	ldr	r1, [r3, #12]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b0:	461a      	mov	r2, r3
 80088b2:	6838      	ldr	r0, [r7, #0]
 80088b4:	f004 fe9c 	bl	800d5f0 <memcpy>
	}
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088c8:	f001 fbae 	bl	800a028 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088d4:	e011      	b.n	80088fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d012      	beq.n	8008904 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3324      	adds	r3, #36	; 0x24
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fd14 	bl	8009310 <xTaskRemoveFromEventList>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088ee:	f000 fde7 	bl	80094c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	dce9      	bgt.n	80088d6 <prvUnlockQueue+0x16>
 8008902:	e000      	b.n	8008906 <prvUnlockQueue+0x46>
					break;
 8008904:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	22ff      	movs	r2, #255	; 0xff
 800890a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800890e:	f001 fbb9 	bl	800a084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008912:	f001 fb89 	bl	800a028 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800891c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800891e:	e011      	b.n	8008944 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d012      	beq.n	800894e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3310      	adds	r3, #16
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fcef 	bl	8009310 <xTaskRemoveFromEventList>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008938:	f000 fdc2 	bl	80094c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	3b01      	subs	r3, #1
 8008940:	b2db      	uxtb	r3, r3
 8008942:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008948:	2b00      	cmp	r3, #0
 800894a:	dce9      	bgt.n	8008920 <prvUnlockQueue+0x60>
 800894c:	e000      	b.n	8008950 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800894e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	22ff      	movs	r2, #255	; 0xff
 8008954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008958:	f001 fb94 	bl	800a084 <vPortExitCritical>
}
 800895c:	bf00      	nop
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800896c:	f001 fb5c 	bl	800a028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008978:	2301      	movs	r3, #1
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	e001      	b.n	8008982 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008982:	f001 fb7f 	bl	800a084 <vPortExitCritical>

	return xReturn;
 8008986:	68fb      	ldr	r3, [r7, #12]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008998:	f001 fb46 	bl	800a028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d102      	bne.n	80089ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	e001      	b.n	80089b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089b2:	f001 fb67 	bl	800a084 <vPortExitCritical>

	return xReturn;
 80089b6:	68fb      	ldr	r3, [r7, #12]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ca:	2300      	movs	r3, #0
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	e014      	b.n	80089fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089d0:	4a0e      	ldr	r2, [pc, #56]	; (8008a0c <vQueueAddToRegistry+0x4c>)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10b      	bne.n	80089f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089dc:	490b      	ldr	r1, [pc, #44]	; (8008a0c <vQueueAddToRegistry+0x4c>)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089e6:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <vQueueAddToRegistry+0x4c>)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	4413      	add	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089f2:	e005      	b.n	8008a00 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b07      	cmp	r3, #7
 80089fe:	d9e7      	bls.n	80089d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a00:	bf00      	nop
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bc80      	pop	{r7}
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	20003340 	.word	0x20003340

08008a10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a20:	f001 fb02 	bl	800a028 <vPortEnterCritical>
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a2a:	b25b      	sxtb	r3, r3
 8008a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a30:	d103      	bne.n	8008a3a <vQueueWaitForMessageRestricted+0x2a>
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a40:	b25b      	sxtb	r3, r3
 8008a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a46:	d103      	bne.n	8008a50 <vQueueWaitForMessageRestricted+0x40>
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a50:	f001 fb18 	bl	800a084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d106      	bne.n	8008a6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	3324      	adds	r3, #36	; 0x24
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 fc29 	bl	80092bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a6a:	6978      	ldr	r0, [r7, #20]
 8008a6c:	f7ff ff28 	bl	80088c0 <prvUnlockQueue>
	}
 8008a70:	bf00      	nop
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08e      	sub	sp, #56	; 0x38
 8008a7c:	af04      	add	r7, sp, #16
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d109      	bne.n	8008aa0 <xTaskCreateStatic+0x28>
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	623b      	str	r3, [r7, #32]
 8008a9e:	e7fe      	b.n	8008a9e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d109      	bne.n	8008aba <xTaskCreateStatic+0x42>
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	61fb      	str	r3, [r7, #28]
 8008ab8:	e7fe      	b.n	8008ab8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008aba:	235c      	movs	r3, #92	; 0x5c
 8008abc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	2b5c      	cmp	r3, #92	; 0x5c
 8008ac2:	d009      	beq.n	8008ad8 <xTaskCreateStatic+0x60>
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	61bb      	str	r3, [r7, #24]
 8008ad6:	e7fe      	b.n	8008ad6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d01e      	beq.n	8008b1c <xTaskCreateStatic+0xa4>
 8008ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01b      	beq.n	8008b1c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	2202      	movs	r2, #2
 8008af2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008af6:	2300      	movs	r3, #0
 8008af8:	9303      	str	r3, [sp, #12]
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	9302      	str	r3, [sp, #8]
 8008afe:	f107 0314 	add.w	r3, r7, #20
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 f850 	bl	8008bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b16:	f000 f8d3 	bl	8008cc0 <prvAddNewTaskToReadyList>
 8008b1a:	e001      	b.n	8008b20 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b20:	697b      	ldr	r3, [r7, #20]
	}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3728      	adds	r7, #40	; 0x28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b08c      	sub	sp, #48	; 0x30
 8008b2e:	af04      	add	r7, sp, #16
 8008b30:	60f8      	str	r0, [r7, #12]
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	603b      	str	r3, [r7, #0]
 8008b36:	4613      	mov	r3, r2
 8008b38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b3a:	88fb      	ldrh	r3, [r7, #6]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 fb68 	bl	800a214 <pvPortMalloc>
 8008b44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00e      	beq.n	8008b6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008b4c:	205c      	movs	r0, #92	; 0x5c
 8008b4e:	f001 fb61 	bl	800a214 <pvPortMalloc>
 8008b52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8008b60:	e005      	b.n	8008b6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b62:	6978      	ldr	r0, [r7, #20]
 8008b64:	f001 fc18 	bl	800a398 <vPortFree>
 8008b68:	e001      	b.n	8008b6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d017      	beq.n	8008ba4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b7c:	88fa      	ldrh	r2, [r7, #6]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9303      	str	r3, [sp, #12]
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	9302      	str	r3, [sp, #8]
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68b9      	ldr	r1, [r7, #8]
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 f80e 	bl	8008bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b98:	69f8      	ldr	r0, [r7, #28]
 8008b9a:	f000 f891 	bl	8008cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	61bb      	str	r3, [r7, #24]
 8008ba2:	e002      	b.n	8008baa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008baa:	69bb      	ldr	r3, [r7, #24]
	}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3720      	adds	r7, #32
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	461a      	mov	r2, r3
 8008bcc:	21a5      	movs	r1, #165	; 0xa5
 8008bce:	f004 fd33 	bl	800d638 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	f023 0307 	bic.w	r3, r3, #7
 8008bea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <prvInitialiseNewTask+0x56>
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	617b      	str	r3, [r7, #20]
 8008c08:	e7fe      	b.n	8008c08 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	e012      	b.n	8008c36 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	4413      	add	r3, r2
 8008c16:	7819      	ldrb	r1, [r3, #0]
 8008c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	3334      	adds	r3, #52	; 0x34
 8008c20:	460a      	mov	r2, r1
 8008c22:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	4413      	add	r3, r2
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d006      	beq.n	8008c3e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	3301      	adds	r3, #1
 8008c34:	61fb      	str	r3, [r7, #28]
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	2b0f      	cmp	r3, #15
 8008c3a:	d9e9      	bls.n	8008c10 <prvInitialiseNewTask+0x5c>
 8008c3c:	e000      	b.n	8008c40 <prvInitialiseNewTask+0x8c>
		{
			break;
 8008c3e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	2b37      	cmp	r3, #55	; 0x37
 8008c4c:	d901      	bls.n	8008c52 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c4e:	2337      	movs	r3, #55	; 0x37
 8008c50:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	2200      	movs	r2, #0
 8008c62:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	3304      	adds	r3, #4
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff f9a0 	bl	8007fae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	3318      	adds	r3, #24
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7ff f99b 	bl	8007fae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c8c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	2200      	movs	r2, #0
 8008c92:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	68f9      	ldr	r1, [r7, #12]
 8008ca0:	69b8      	ldr	r0, [r7, #24]
 8008ca2:	f001 f8d7 	bl	8009e54 <pxPortInitialiseStack>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cb8:	bf00      	nop
 8008cba:	3720      	adds	r7, #32
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cc8:	f001 f9ae 	bl	800a028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ccc:	4b2d      	ldr	r3, [pc, #180]	; (8008d84 <prvAddNewTaskToReadyList+0xc4>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	4a2c      	ldr	r2, [pc, #176]	; (8008d84 <prvAddNewTaskToReadyList+0xc4>)
 8008cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cd6:	4b2c      	ldr	r3, [pc, #176]	; (8008d88 <prvAddNewTaskToReadyList+0xc8>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d109      	bne.n	8008cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cde:	4a2a      	ldr	r2, [pc, #168]	; (8008d88 <prvAddNewTaskToReadyList+0xc8>)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ce4:	4b27      	ldr	r3, [pc, #156]	; (8008d84 <prvAddNewTaskToReadyList+0xc4>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d110      	bne.n	8008d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cec:	f000 fc0c 	bl	8009508 <prvInitialiseTaskLists>
 8008cf0:	e00d      	b.n	8008d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cf2:	4b26      	ldr	r3, [pc, #152]	; (8008d8c <prvAddNewTaskToReadyList+0xcc>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d109      	bne.n	8008d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cfa:	4b23      	ldr	r3, [pc, #140]	; (8008d88 <prvAddNewTaskToReadyList+0xc8>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d802      	bhi.n	8008d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d08:	4a1f      	ldr	r2, [pc, #124]	; (8008d88 <prvAddNewTaskToReadyList+0xc8>)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d0e:	4b20      	ldr	r3, [pc, #128]	; (8008d90 <prvAddNewTaskToReadyList+0xd0>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3301      	adds	r3, #1
 8008d14:	4a1e      	ldr	r2, [pc, #120]	; (8008d90 <prvAddNewTaskToReadyList+0xd0>)
 8008d16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d18:	4b1d      	ldr	r3, [pc, #116]	; (8008d90 <prvAddNewTaskToReadyList+0xd0>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d24:	4b1b      	ldr	r3, [pc, #108]	; (8008d94 <prvAddNewTaskToReadyList+0xd4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d903      	bls.n	8008d34 <prvAddNewTaskToReadyList+0x74>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	4a18      	ldr	r2, [pc, #96]	; (8008d94 <prvAddNewTaskToReadyList+0xd4>)
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d38:	4613      	mov	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4a15      	ldr	r2, [pc, #84]	; (8008d98 <prvAddNewTaskToReadyList+0xd8>)
 8008d42:	441a      	add	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3304      	adds	r3, #4
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	f7ff f93b 	bl	8007fc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d50:	f001 f998 	bl	800a084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d54:	4b0d      	ldr	r3, [pc, #52]	; (8008d8c <prvAddNewTaskToReadyList+0xcc>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00e      	beq.n	8008d7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <prvAddNewTaskToReadyList+0xc8>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d207      	bcs.n	8008d7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d6a:	4b0c      	ldr	r3, [pc, #48]	; (8008d9c <prvAddNewTaskToReadyList+0xdc>)
 8008d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20000ca4 	.word	0x20000ca4
 8008d88:	200007d0 	.word	0x200007d0
 8008d8c:	20000cb0 	.word	0x20000cb0
 8008d90:	20000cc0 	.word	0x20000cc0
 8008d94:	20000cac 	.word	0x20000cac
 8008d98:	200007d4 	.word	0x200007d4
 8008d9c:	e000ed04 	.word	0xe000ed04

08008da0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d016      	beq.n	8008de0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008db2:	4b13      	ldr	r3, [pc, #76]	; (8008e00 <vTaskDelay+0x60>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d009      	beq.n	8008dce <vTaskDelay+0x2e>
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	60bb      	str	r3, [r7, #8]
 8008dcc:	e7fe      	b.n	8008dcc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008dce:	f000 f87f 	bl	8008ed0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fcdf 	bl	8009798 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dda:	f000 f887 	bl	8008eec <xTaskResumeAll>
 8008dde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d107      	bne.n	8008df6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008de6:	4b07      	ldr	r3, [pc, #28]	; (8008e04 <vTaskDelay+0x64>)
 8008de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000ccc 	.word	0x20000ccc
 8008e04:	e000ed04 	.word	0xe000ed04

08008e08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e16:	463a      	mov	r2, r7
 8008e18:	1d39      	adds	r1, r7, #4
 8008e1a:	f107 0308 	add.w	r3, r7, #8
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7ff f876 	bl	8007f10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	9202      	str	r2, [sp, #8]
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	2300      	movs	r3, #0
 8008e34:	460a      	mov	r2, r1
 8008e36:	4920      	ldr	r1, [pc, #128]	; (8008eb8 <vTaskStartScheduler+0xb0>)
 8008e38:	4820      	ldr	r0, [pc, #128]	; (8008ebc <vTaskStartScheduler+0xb4>)
 8008e3a:	f7ff fe1d 	bl	8008a78 <xTaskCreateStatic>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	4b1f      	ldr	r3, [pc, #124]	; (8008ec0 <vTaskStartScheduler+0xb8>)
 8008e42:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e44:	4b1e      	ldr	r3, [pc, #120]	; (8008ec0 <vTaskStartScheduler+0xb8>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	e001      	b.n	8008e56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d102      	bne.n	8008e62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e5c:	f000 fcf0 	bl	8009840 <xTimerCreateTimerTask>
 8008e60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d115      	bne.n	8008e94 <vTaskStartScheduler+0x8c>
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e7a:	4b12      	ldr	r3, [pc, #72]	; (8008ec4 <vTaskStartScheduler+0xbc>)
 8008e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e82:	4b11      	ldr	r3, [pc, #68]	; (8008ec8 <vTaskStartScheduler+0xc0>)
 8008e84:	2201      	movs	r2, #1
 8008e86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008e88:	4b10      	ldr	r3, [pc, #64]	; (8008ecc <vTaskStartScheduler+0xc4>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e8e:	f001 f85b 	bl	8009f48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e92:	e00d      	b.n	8008eb0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9a:	d109      	bne.n	8008eb0 <vTaskStartScheduler+0xa8>
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	60fb      	str	r3, [r7, #12]
 8008eae:	e7fe      	b.n	8008eae <vTaskStartScheduler+0xa6>
}
 8008eb0:	bf00      	nop
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	0800e960 	.word	0x0800e960
 8008ebc:	080094d9 	.word	0x080094d9
 8008ec0:	20000cc8 	.word	0x20000cc8
 8008ec4:	20000cc4 	.word	0x20000cc4
 8008ec8:	20000cb0 	.word	0x20000cb0
 8008ecc:	20000ca8 	.word	0x20000ca8

08008ed0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008ed4:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <vTaskSuspendAll+0x18>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	4a03      	ldr	r2, [pc, #12]	; (8008ee8 <vTaskSuspendAll+0x18>)
 8008edc:	6013      	str	r3, [r2, #0]
}
 8008ede:	bf00      	nop
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20000ccc 	.word	0x20000ccc

08008eec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008efa:	4b41      	ldr	r3, [pc, #260]	; (8009000 <xTaskResumeAll+0x114>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d109      	bne.n	8008f16 <xTaskResumeAll+0x2a>
 8008f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	e7fe      	b.n	8008f14 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f16:	f001 f887 	bl	800a028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f1a:	4b39      	ldr	r3, [pc, #228]	; (8009000 <xTaskResumeAll+0x114>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	4a37      	ldr	r2, [pc, #220]	; (8009000 <xTaskResumeAll+0x114>)
 8008f22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f24:	4b36      	ldr	r3, [pc, #216]	; (8009000 <xTaskResumeAll+0x114>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d162      	bne.n	8008ff2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f2c:	4b35      	ldr	r3, [pc, #212]	; (8009004 <xTaskResumeAll+0x118>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d05e      	beq.n	8008ff2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f34:	e02f      	b.n	8008f96 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008f36:	4b34      	ldr	r3, [pc, #208]	; (8009008 <xTaskResumeAll+0x11c>)
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3318      	adds	r3, #24
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff f89a 	bl	800807c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff f895 	bl	800807c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f56:	4b2d      	ldr	r3, [pc, #180]	; (800900c <xTaskResumeAll+0x120>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d903      	bls.n	8008f66 <xTaskResumeAll+0x7a>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f62:	4a2a      	ldr	r2, [pc, #168]	; (800900c <xTaskResumeAll+0x120>)
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4a27      	ldr	r2, [pc, #156]	; (8009010 <xTaskResumeAll+0x124>)
 8008f74:	441a      	add	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	f7ff f822 	bl	8007fc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f86:	4b23      	ldr	r3, [pc, #140]	; (8009014 <xTaskResumeAll+0x128>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d302      	bcc.n	8008f96 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008f90:	4b21      	ldr	r3, [pc, #132]	; (8009018 <xTaskResumeAll+0x12c>)
 8008f92:	2201      	movs	r2, #1
 8008f94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f96:	4b1c      	ldr	r3, [pc, #112]	; (8009008 <xTaskResumeAll+0x11c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1cb      	bne.n	8008f36 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008fa4:	f000 fb4a 	bl	800963c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008fa8:	4b1c      	ldr	r3, [pc, #112]	; (800901c <xTaskResumeAll+0x130>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d010      	beq.n	8008fd6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fb4:	f000 f844 	bl	8009040 <xTaskIncrementTick>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008fbe:	4b16      	ldr	r3, [pc, #88]	; (8009018 <xTaskResumeAll+0x12c>)
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1f1      	bne.n	8008fb4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008fd0:	4b12      	ldr	r3, [pc, #72]	; (800901c <xTaskResumeAll+0x130>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fd6:	4b10      	ldr	r3, [pc, #64]	; (8009018 <xTaskResumeAll+0x12c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d009      	beq.n	8008ff2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fe2:	4b0f      	ldr	r3, [pc, #60]	; (8009020 <xTaskResumeAll+0x134>)
 8008fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ff2:	f001 f847 	bl	800a084 <vPortExitCritical>

	return xAlreadyYielded;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20000ccc 	.word	0x20000ccc
 8009004:	20000ca4 	.word	0x20000ca4
 8009008:	20000c64 	.word	0x20000c64
 800900c:	20000cac 	.word	0x20000cac
 8009010:	200007d4 	.word	0x200007d4
 8009014:	200007d0 	.word	0x200007d0
 8009018:	20000cb8 	.word	0x20000cb8
 800901c:	20000cb4 	.word	0x20000cb4
 8009020:	e000ed04 	.word	0xe000ed04

08009024 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800902a:	4b04      	ldr	r3, [pc, #16]	; (800903c <xTaskGetTickCount+0x18>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009030:	687b      	ldr	r3, [r7, #4]
}
 8009032:	4618      	mov	r0, r3
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	bc80      	pop	{r7}
 800903a:	4770      	bx	lr
 800903c:	20000ca8 	.word	0x20000ca8

08009040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904a:	4b51      	ldr	r3, [pc, #324]	; (8009190 <xTaskIncrementTick+0x150>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	f040 808d 	bne.w	800916e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009054:	4b4f      	ldr	r3, [pc, #316]	; (8009194 <xTaskIncrementTick+0x154>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3301      	adds	r3, #1
 800905a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800905c:	4a4d      	ldr	r2, [pc, #308]	; (8009194 <xTaskIncrementTick+0x154>)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d11f      	bne.n	80090a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009068:	4b4b      	ldr	r3, [pc, #300]	; (8009198 <xTaskIncrementTick+0x158>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d009      	beq.n	8009086 <xTaskIncrementTick+0x46>
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	603b      	str	r3, [r7, #0]
 8009084:	e7fe      	b.n	8009084 <xTaskIncrementTick+0x44>
 8009086:	4b44      	ldr	r3, [pc, #272]	; (8009198 <xTaskIncrementTick+0x158>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	4b43      	ldr	r3, [pc, #268]	; (800919c <xTaskIncrementTick+0x15c>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a41      	ldr	r2, [pc, #260]	; (8009198 <xTaskIncrementTick+0x158>)
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	4a41      	ldr	r2, [pc, #260]	; (800919c <xTaskIncrementTick+0x15c>)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	4b41      	ldr	r3, [pc, #260]	; (80091a0 <xTaskIncrementTick+0x160>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3301      	adds	r3, #1
 80090a0:	4a3f      	ldr	r2, [pc, #252]	; (80091a0 <xTaskIncrementTick+0x160>)
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	f000 faca 	bl	800963c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090a8:	4b3e      	ldr	r3, [pc, #248]	; (80091a4 <xTaskIncrementTick+0x164>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d34e      	bcc.n	8009150 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090b2:	4b39      	ldr	r3, [pc, #228]	; (8009198 <xTaskIncrementTick+0x158>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <xTaskIncrementTick+0x80>
 80090bc:	2301      	movs	r3, #1
 80090be:	e000      	b.n	80090c2 <xTaskIncrementTick+0x82>
 80090c0:	2300      	movs	r3, #0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d004      	beq.n	80090d0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090c6:	4b37      	ldr	r3, [pc, #220]	; (80091a4 <xTaskIncrementTick+0x164>)
 80090c8:	f04f 32ff 	mov.w	r2, #4294967295
 80090cc:	601a      	str	r2, [r3, #0]
					break;
 80090ce:	e03f      	b.n	8009150 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80090d0:	4b31      	ldr	r3, [pc, #196]	; (8009198 <xTaskIncrementTick+0x158>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d203      	bcs.n	80090f0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090e8:	4a2e      	ldr	r2, [pc, #184]	; (80091a4 <xTaskIncrementTick+0x164>)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6013      	str	r3, [r2, #0]
						break;
 80090ee:	e02f      	b.n	8009150 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	3304      	adds	r3, #4
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe ffc1 	bl	800807c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d004      	beq.n	800910c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	3318      	adds	r3, #24
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe ffb8 	bl	800807c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009110:	4b25      	ldr	r3, [pc, #148]	; (80091a8 <xTaskIncrementTick+0x168>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	429a      	cmp	r2, r3
 8009116:	d903      	bls.n	8009120 <xTaskIncrementTick+0xe0>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	4a22      	ldr	r2, [pc, #136]	; (80091a8 <xTaskIncrementTick+0x168>)
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4a1f      	ldr	r2, [pc, #124]	; (80091ac <xTaskIncrementTick+0x16c>)
 800912e:	441a      	add	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	3304      	adds	r3, #4
 8009134:	4619      	mov	r1, r3
 8009136:	4610      	mov	r0, r2
 8009138:	f7fe ff45 	bl	8007fc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009140:	4b1b      	ldr	r3, [pc, #108]	; (80091b0 <xTaskIncrementTick+0x170>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009146:	429a      	cmp	r2, r3
 8009148:	d3b3      	bcc.n	80090b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800914a:	2301      	movs	r3, #1
 800914c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800914e:	e7b0      	b.n	80090b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009150:	4b17      	ldr	r3, [pc, #92]	; (80091b0 <xTaskIncrementTick+0x170>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009156:	4915      	ldr	r1, [pc, #84]	; (80091ac <xTaskIncrementTick+0x16c>)
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d907      	bls.n	8009178 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009168:	2301      	movs	r3, #1
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	e004      	b.n	8009178 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800916e:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <xTaskIncrementTick+0x174>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3301      	adds	r3, #1
 8009174:	4a0f      	ldr	r2, [pc, #60]	; (80091b4 <xTaskIncrementTick+0x174>)
 8009176:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009178:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <xTaskIncrementTick+0x178>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009180:	2301      	movs	r3, #1
 8009182:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009184:	697b      	ldr	r3, [r7, #20]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20000ccc 	.word	0x20000ccc
 8009194:	20000ca8 	.word	0x20000ca8
 8009198:	20000c5c 	.word	0x20000c5c
 800919c:	20000c60 	.word	0x20000c60
 80091a0:	20000cbc 	.word	0x20000cbc
 80091a4:	20000cc4 	.word	0x20000cc4
 80091a8:	20000cac 	.word	0x20000cac
 80091ac:	200007d4 	.word	0x200007d4
 80091b0:	200007d0 	.word	0x200007d0
 80091b4:	20000cb4 	.word	0x20000cb4
 80091b8:	20000cb8 	.word	0x20000cb8

080091bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091c2:	4b27      	ldr	r3, [pc, #156]	; (8009260 <vTaskSwitchContext+0xa4>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091ca:	4b26      	ldr	r3, [pc, #152]	; (8009264 <vTaskSwitchContext+0xa8>)
 80091cc:	2201      	movs	r2, #1
 80091ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091d0:	e040      	b.n	8009254 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80091d2:	4b24      	ldr	r3, [pc, #144]	; (8009264 <vTaskSwitchContext+0xa8>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80091d8:	4b23      	ldr	r3, [pc, #140]	; (8009268 <vTaskSwitchContext+0xac>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60fb      	str	r3, [r7, #12]
 80091de:	e00f      	b.n	8009200 <vTaskSwitchContext+0x44>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d109      	bne.n	80091fa <vTaskSwitchContext+0x3e>
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	607b      	str	r3, [r7, #4]
 80091f8:	e7fe      	b.n	80091f8 <vTaskSwitchContext+0x3c>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	491a      	ldr	r1, [pc, #104]	; (800926c <vTaskSwitchContext+0xb0>)
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	440b      	add	r3, r1
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0e5      	beq.n	80091e0 <vTaskSwitchContext+0x24>
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4a13      	ldr	r2, [pc, #76]	; (800926c <vTaskSwitchContext+0xb0>)
 8009220:	4413      	add	r3, r2
 8009222:	60bb      	str	r3, [r7, #8]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	605a      	str	r2, [r3, #4]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	3308      	adds	r3, #8
 8009236:	429a      	cmp	r2, r3
 8009238:	d104      	bne.n	8009244 <vTaskSwitchContext+0x88>
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	605a      	str	r2, [r3, #4]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	4a09      	ldr	r2, [pc, #36]	; (8009270 <vTaskSwitchContext+0xb4>)
 800924c:	6013      	str	r3, [r2, #0]
 800924e:	4a06      	ldr	r2, [pc, #24]	; (8009268 <vTaskSwitchContext+0xac>)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6013      	str	r3, [r2, #0]
}
 8009254:	bf00      	nop
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	bc80      	pop	{r7}
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	20000ccc 	.word	0x20000ccc
 8009264:	20000cb8 	.word	0x20000cb8
 8009268:	20000cac 	.word	0x20000cac
 800926c:	200007d4 	.word	0x200007d4
 8009270:	200007d0 	.word	0x200007d0

08009274 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d109      	bne.n	8009298 <vTaskPlaceOnEventList+0x24>
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	e7fe      	b.n	8009296 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009298:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <vTaskPlaceOnEventList+0x44>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3318      	adds	r3, #24
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7fe feb3 	bl	800800c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092a6:	2101      	movs	r1, #1
 80092a8:	6838      	ldr	r0, [r7, #0]
 80092aa:	f000 fa75 	bl	8009798 <prvAddCurrentTaskToDelayedList>
}
 80092ae:	bf00      	nop
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	200007d0 	.word	0x200007d0

080092bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d109      	bne.n	80092e2 <vTaskPlaceOnEventListRestricted+0x26>
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	e7fe      	b.n	80092e0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092e2:	4b0a      	ldr	r3, [pc, #40]	; (800930c <vTaskPlaceOnEventListRestricted+0x50>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3318      	adds	r3, #24
 80092e8:	4619      	mov	r1, r3
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f7fe fe6b 	bl	8007fc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80092f6:	f04f 33ff 	mov.w	r3, #4294967295
 80092fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	68b8      	ldr	r0, [r7, #8]
 8009300:	f000 fa4a 	bl	8009798 <prvAddCurrentTaskToDelayedList>
	}
 8009304:	bf00      	nop
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	200007d0 	.word	0x200007d0

08009310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d109      	bne.n	800933a <xTaskRemoveFromEventList+0x2a>
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	e7fe      	b.n	8009338 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	3318      	adds	r3, #24
 800933e:	4618      	mov	r0, r3
 8009340:	f7fe fe9c 	bl	800807c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009344:	4b1d      	ldr	r3, [pc, #116]	; (80093bc <xTaskRemoveFromEventList+0xac>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d11d      	bne.n	8009388 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	3304      	adds	r3, #4
 8009350:	4618      	mov	r0, r3
 8009352:	f7fe fe93 	bl	800807c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935a:	4b19      	ldr	r3, [pc, #100]	; (80093c0 <xTaskRemoveFromEventList+0xb0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	429a      	cmp	r2, r3
 8009360:	d903      	bls.n	800936a <xTaskRemoveFromEventList+0x5a>
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009366:	4a16      	ldr	r2, [pc, #88]	; (80093c0 <xTaskRemoveFromEventList+0xb0>)
 8009368:	6013      	str	r3, [r2, #0]
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4a13      	ldr	r2, [pc, #76]	; (80093c4 <xTaskRemoveFromEventList+0xb4>)
 8009378:	441a      	add	r2, r3
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	3304      	adds	r3, #4
 800937e:	4619      	mov	r1, r3
 8009380:	4610      	mov	r0, r2
 8009382:	f7fe fe20 	bl	8007fc6 <vListInsertEnd>
 8009386:	e005      	b.n	8009394 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	3318      	adds	r3, #24
 800938c:	4619      	mov	r1, r3
 800938e:	480e      	ldr	r0, [pc, #56]	; (80093c8 <xTaskRemoveFromEventList+0xb8>)
 8009390:	f7fe fe19 	bl	8007fc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009398:	4b0c      	ldr	r3, [pc, #48]	; (80093cc <xTaskRemoveFromEventList+0xbc>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	429a      	cmp	r2, r3
 80093a0:	d905      	bls.n	80093ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093a2:	2301      	movs	r3, #1
 80093a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093a6:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <xTaskRemoveFromEventList+0xc0>)
 80093a8:	2201      	movs	r2, #1
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	e001      	b.n	80093b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80093ae:	2300      	movs	r3, #0
 80093b0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80093b2:	697b      	ldr	r3, [r7, #20]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3718      	adds	r7, #24
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20000ccc 	.word	0x20000ccc
 80093c0:	20000cac 	.word	0x20000cac
 80093c4:	200007d4 	.word	0x200007d4
 80093c8:	20000c64 	.word	0x20000c64
 80093cc:	200007d0 	.word	0x200007d0
 80093d0:	20000cb8 	.word	0x20000cb8

080093d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093dc:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <vTaskInternalSetTimeOutState+0x24>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093e4:	4b05      	ldr	r3, [pc, #20]	; (80093fc <vTaskInternalSetTimeOutState+0x28>)
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	605a      	str	r2, [r3, #4]
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bc80      	pop	{r7}
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	20000cbc 	.word	0x20000cbc
 80093fc:	20000ca8 	.word	0x20000ca8

08009400 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d109      	bne.n	8009424 <xTaskCheckForTimeOut+0x24>
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	613b      	str	r3, [r7, #16]
 8009422:	e7fe      	b.n	8009422 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d109      	bne.n	800943e <xTaskCheckForTimeOut+0x3e>
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	e7fe      	b.n	800943c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800943e:	f000 fdf3 	bl	800a028 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009442:	4b1d      	ldr	r3, [pc, #116]	; (80094b8 <xTaskCheckForTimeOut+0xb8>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	69ba      	ldr	r2, [r7, #24]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	d102      	bne.n	8009462 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800945c:	2300      	movs	r3, #0
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e023      	b.n	80094aa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	4b15      	ldr	r3, [pc, #84]	; (80094bc <xTaskCheckForTimeOut+0xbc>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	429a      	cmp	r2, r3
 800946c:	d007      	beq.n	800947e <xTaskCheckForTimeOut+0x7e>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	69ba      	ldr	r2, [r7, #24]
 8009474:	429a      	cmp	r2, r3
 8009476:	d302      	bcc.n	800947e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009478:	2301      	movs	r3, #1
 800947a:	61fb      	str	r3, [r7, #28]
 800947c:	e015      	b.n	80094aa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	429a      	cmp	r2, r3
 8009486:	d20b      	bcs.n	80094a0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	1ad2      	subs	r2, r2, r3
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7ff ff9d 	bl	80093d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800949a:	2300      	movs	r3, #0
 800949c:	61fb      	str	r3, [r7, #28]
 800949e:	e004      	b.n	80094aa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2200      	movs	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094a6:	2301      	movs	r3, #1
 80094a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094aa:	f000 fdeb 	bl	800a084 <vPortExitCritical>

	return xReturn;
 80094ae:	69fb      	ldr	r3, [r7, #28]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3720      	adds	r7, #32
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20000ca8 	.word	0x20000ca8
 80094bc:	20000cbc 	.word	0x20000cbc

080094c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094c0:	b480      	push	{r7}
 80094c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094c4:	4b03      	ldr	r3, [pc, #12]	; (80094d4 <vTaskMissedYield+0x14>)
 80094c6:	2201      	movs	r2, #1
 80094c8:	601a      	str	r2, [r3, #0]
}
 80094ca:	bf00      	nop
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bc80      	pop	{r7}
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20000cb8 	.word	0x20000cb8

080094d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094e0:	f000 f852 	bl	8009588 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094e4:	4b06      	ldr	r3, [pc, #24]	; (8009500 <prvIdleTask+0x28>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d9f9      	bls.n	80094e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094ec:	4b05      	ldr	r3, [pc, #20]	; (8009504 <prvIdleTask+0x2c>)
 80094ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094fc:	e7f0      	b.n	80094e0 <prvIdleTask+0x8>
 80094fe:	bf00      	nop
 8009500:	200007d4 	.word	0x200007d4
 8009504:	e000ed04 	.word	0xe000ed04

08009508 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800950e:	2300      	movs	r3, #0
 8009510:	607b      	str	r3, [r7, #4]
 8009512:	e00c      	b.n	800952e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4a12      	ldr	r2, [pc, #72]	; (8009568 <prvInitialiseTaskLists+0x60>)
 8009520:	4413      	add	r3, r2
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe fd24 	bl	8007f70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3301      	adds	r3, #1
 800952c:	607b      	str	r3, [r7, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b37      	cmp	r3, #55	; 0x37
 8009532:	d9ef      	bls.n	8009514 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009534:	480d      	ldr	r0, [pc, #52]	; (800956c <prvInitialiseTaskLists+0x64>)
 8009536:	f7fe fd1b 	bl	8007f70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800953a:	480d      	ldr	r0, [pc, #52]	; (8009570 <prvInitialiseTaskLists+0x68>)
 800953c:	f7fe fd18 	bl	8007f70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009540:	480c      	ldr	r0, [pc, #48]	; (8009574 <prvInitialiseTaskLists+0x6c>)
 8009542:	f7fe fd15 	bl	8007f70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009546:	480c      	ldr	r0, [pc, #48]	; (8009578 <prvInitialiseTaskLists+0x70>)
 8009548:	f7fe fd12 	bl	8007f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800954c:	480b      	ldr	r0, [pc, #44]	; (800957c <prvInitialiseTaskLists+0x74>)
 800954e:	f7fe fd0f 	bl	8007f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009552:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <prvInitialiseTaskLists+0x78>)
 8009554:	4a05      	ldr	r2, [pc, #20]	; (800956c <prvInitialiseTaskLists+0x64>)
 8009556:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009558:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <prvInitialiseTaskLists+0x7c>)
 800955a:	4a05      	ldr	r2, [pc, #20]	; (8009570 <prvInitialiseTaskLists+0x68>)
 800955c:	601a      	str	r2, [r3, #0]
}
 800955e:	bf00      	nop
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	200007d4 	.word	0x200007d4
 800956c:	20000c34 	.word	0x20000c34
 8009570:	20000c48 	.word	0x20000c48
 8009574:	20000c64 	.word	0x20000c64
 8009578:	20000c78 	.word	0x20000c78
 800957c:	20000c90 	.word	0x20000c90
 8009580:	20000c5c 	.word	0x20000c5c
 8009584:	20000c60 	.word	0x20000c60

08009588 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800958e:	e019      	b.n	80095c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009590:	f000 fd4a 	bl	800a028 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009594:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <prvCheckTasksWaitingTermination+0x4c>)
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3304      	adds	r3, #4
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fe fd6b 	bl	800807c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095a6:	4b0c      	ldr	r3, [pc, #48]	; (80095d8 <prvCheckTasksWaitingTermination+0x50>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	4a0a      	ldr	r2, [pc, #40]	; (80095d8 <prvCheckTasksWaitingTermination+0x50>)
 80095ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095b0:	4b0a      	ldr	r3, [pc, #40]	; (80095dc <prvCheckTasksWaitingTermination+0x54>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	4a09      	ldr	r2, [pc, #36]	; (80095dc <prvCheckTasksWaitingTermination+0x54>)
 80095b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095ba:	f000 fd63 	bl	800a084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f80e 	bl	80095e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095c4:	4b05      	ldr	r3, [pc, #20]	; (80095dc <prvCheckTasksWaitingTermination+0x54>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e1      	bne.n	8009590 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095cc:	bf00      	nop
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	20000c78 	.word	0x20000c78
 80095d8:	20000ca4 	.word	0x20000ca4
 80095dc:	20000c8c 	.word	0x20000c8c

080095e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d108      	bne.n	8009604 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 fece 	bl	800a398 <vPortFree>
				vPortFree( pxTCB );
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fecb 	bl	800a398 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009602:	e017      	b.n	8009634 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800960a:	2b01      	cmp	r3, #1
 800960c:	d103      	bne.n	8009616 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fec2 	bl	800a398 <vPortFree>
	}
 8009614:	e00e      	b.n	8009634 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800961c:	2b02      	cmp	r3, #2
 800961e:	d009      	beq.n	8009634 <prvDeleteTCB+0x54>
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	60fb      	str	r3, [r7, #12]
 8009632:	e7fe      	b.n	8009632 <prvDeleteTCB+0x52>
	}
 8009634:	bf00      	nop
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009642:	4b0e      	ldr	r3, [pc, #56]	; (800967c <prvResetNextTaskUnblockTime+0x40>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <prvResetNextTaskUnblockTime+0x14>
 800964c:	2301      	movs	r3, #1
 800964e:	e000      	b.n	8009652 <prvResetNextTaskUnblockTime+0x16>
 8009650:	2300      	movs	r3, #0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d004      	beq.n	8009660 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009656:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <prvResetNextTaskUnblockTime+0x44>)
 8009658:	f04f 32ff 	mov.w	r2, #4294967295
 800965c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800965e:	e008      	b.n	8009672 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009660:	4b06      	ldr	r3, [pc, #24]	; (800967c <prvResetNextTaskUnblockTime+0x40>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	4a04      	ldr	r2, [pc, #16]	; (8009680 <prvResetNextTaskUnblockTime+0x44>)
 8009670:	6013      	str	r3, [r2, #0]
}
 8009672:	bf00      	nop
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	bc80      	pop	{r7}
 800967a:	4770      	bx	lr
 800967c:	20000c5c 	.word	0x20000c5c
 8009680:	20000cc4 	.word	0x20000cc4

08009684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800968a:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <xTaskGetSchedulerState+0x34>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d102      	bne.n	8009698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009692:	2301      	movs	r3, #1
 8009694:	607b      	str	r3, [r7, #4]
 8009696:	e008      	b.n	80096aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009698:	4b08      	ldr	r3, [pc, #32]	; (80096bc <xTaskGetSchedulerState+0x38>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d102      	bne.n	80096a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096a0:	2302      	movs	r3, #2
 80096a2:	607b      	str	r3, [r7, #4]
 80096a4:	e001      	b.n	80096aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096a6:	2300      	movs	r3, #0
 80096a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096aa:	687b      	ldr	r3, [r7, #4]
	}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bc80      	pop	{r7}
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	20000cb0 	.word	0x20000cb0
 80096bc:	20000ccc 	.word	0x20000ccc

080096c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096cc:	2300      	movs	r3, #0
 80096ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d054      	beq.n	8009780 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096d6:	4b2d      	ldr	r3, [pc, #180]	; (800978c <xTaskPriorityDisinherit+0xcc>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d009      	beq.n	80096f4 <xTaskPriorityDisinherit+0x34>
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	e7fe      	b.n	80096f2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d109      	bne.n	8009710 <xTaskPriorityDisinherit+0x50>
 80096fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	60bb      	str	r3, [r7, #8]
 800970e:	e7fe      	b.n	800970e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009714:	1e5a      	subs	r2, r3, #1
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009722:	429a      	cmp	r2, r3
 8009724:	d02c      	beq.n	8009780 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800972a:	2b00      	cmp	r3, #0
 800972c:	d128      	bne.n	8009780 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	3304      	adds	r3, #4
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe fca2 	bl	800807c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009750:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <xTaskPriorityDisinherit+0xd0>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	429a      	cmp	r2, r3
 8009756:	d903      	bls.n	8009760 <xTaskPriorityDisinherit+0xa0>
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	4a0c      	ldr	r2, [pc, #48]	; (8009790 <xTaskPriorityDisinherit+0xd0>)
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4a09      	ldr	r2, [pc, #36]	; (8009794 <xTaskPriorityDisinherit+0xd4>)
 800976e:	441a      	add	r2, r3
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	3304      	adds	r3, #4
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f7fe fc25 	bl	8007fc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800977c:	2301      	movs	r3, #1
 800977e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009780:	697b      	ldr	r3, [r7, #20]
	}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	200007d0 	.word	0x200007d0
 8009790:	20000cac 	.word	0x20000cac
 8009794:	200007d4 	.word	0x200007d4

08009798 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097a2:	4b21      	ldr	r3, [pc, #132]	; (8009828 <prvAddCurrentTaskToDelayedList+0x90>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097a8:	4b20      	ldr	r3, [pc, #128]	; (800982c <prvAddCurrentTaskToDelayedList+0x94>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3304      	adds	r3, #4
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe fc64 	bl	800807c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ba:	d10a      	bne.n	80097d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d007      	beq.n	80097d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097c2:	4b1a      	ldr	r3, [pc, #104]	; (800982c <prvAddCurrentTaskToDelayedList+0x94>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3304      	adds	r3, #4
 80097c8:	4619      	mov	r1, r3
 80097ca:	4819      	ldr	r0, [pc, #100]	; (8009830 <prvAddCurrentTaskToDelayedList+0x98>)
 80097cc:	f7fe fbfb 	bl	8007fc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097d0:	e026      	b.n	8009820 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4413      	add	r3, r2
 80097d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097da:	4b14      	ldr	r3, [pc, #80]	; (800982c <prvAddCurrentTaskToDelayedList+0x94>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d209      	bcs.n	80097fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097ea:	4b12      	ldr	r3, [pc, #72]	; (8009834 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	4b0f      	ldr	r3, [pc, #60]	; (800982c <prvAddCurrentTaskToDelayedList+0x94>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3304      	adds	r3, #4
 80097f4:	4619      	mov	r1, r3
 80097f6:	4610      	mov	r0, r2
 80097f8:	f7fe fc08 	bl	800800c <vListInsert>
}
 80097fc:	e010      	b.n	8009820 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097fe:	4b0e      	ldr	r3, [pc, #56]	; (8009838 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	4b0a      	ldr	r3, [pc, #40]	; (800982c <prvAddCurrentTaskToDelayedList+0x94>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3304      	adds	r3, #4
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f7fe fbfe 	bl	800800c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009810:	4b0a      	ldr	r3, [pc, #40]	; (800983c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	429a      	cmp	r2, r3
 8009818:	d202      	bcs.n	8009820 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800981a:	4a08      	ldr	r2, [pc, #32]	; (800983c <prvAddCurrentTaskToDelayedList+0xa4>)
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	6013      	str	r3, [r2, #0]
}
 8009820:	bf00      	nop
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000ca8 	.word	0x20000ca8
 800982c:	200007d0 	.word	0x200007d0
 8009830:	20000c90 	.word	0x20000c90
 8009834:	20000c60 	.word	0x20000c60
 8009838:	20000c5c 	.word	0x20000c5c
 800983c:	20000cc4 	.word	0x20000cc4

08009840 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b08a      	sub	sp, #40	; 0x28
 8009844:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009846:	2300      	movs	r3, #0
 8009848:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800984a:	f000 fac3 	bl	8009dd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800984e:	4b1c      	ldr	r3, [pc, #112]	; (80098c0 <xTimerCreateTimerTask+0x80>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d021      	beq.n	800989a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009856:	2300      	movs	r3, #0
 8009858:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800985a:	2300      	movs	r3, #0
 800985c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800985e:	1d3a      	adds	r2, r7, #4
 8009860:	f107 0108 	add.w	r1, r7, #8
 8009864:	f107 030c 	add.w	r3, r7, #12
 8009868:	4618      	mov	r0, r3
 800986a:	f7fe fb69 	bl	8007f40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	9202      	str	r2, [sp, #8]
 8009876:	9301      	str	r3, [sp, #4]
 8009878:	2302      	movs	r3, #2
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	2300      	movs	r3, #0
 800987e:	460a      	mov	r2, r1
 8009880:	4910      	ldr	r1, [pc, #64]	; (80098c4 <xTimerCreateTimerTask+0x84>)
 8009882:	4811      	ldr	r0, [pc, #68]	; (80098c8 <xTimerCreateTimerTask+0x88>)
 8009884:	f7ff f8f8 	bl	8008a78 <xTaskCreateStatic>
 8009888:	4602      	mov	r2, r0
 800988a:	4b10      	ldr	r3, [pc, #64]	; (80098cc <xTimerCreateTimerTask+0x8c>)
 800988c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800988e:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <xTimerCreateTimerTask+0x8c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009896:	2301      	movs	r3, #1
 8009898:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d109      	bne.n	80098b4 <xTimerCreateTimerTask+0x74>
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	613b      	str	r3, [r7, #16]
 80098b2:	e7fe      	b.n	80098b2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80098b4:	697b      	ldr	r3, [r7, #20]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3718      	adds	r7, #24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20000d00 	.word	0x20000d00
 80098c4:	0800e968 	.word	0x0800e968
 80098c8:	080099e9 	.word	0x080099e9
 80098cc:	20000d04 	.word	0x20000d04

080098d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b08a      	sub	sp, #40	; 0x28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
 80098dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098de:	2300      	movs	r3, #0
 80098e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d109      	bne.n	80098fc <xTimerGenericCommand+0x2c>
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	623b      	str	r3, [r7, #32]
 80098fa:	e7fe      	b.n	80098fa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098fc:	4b19      	ldr	r3, [pc, #100]	; (8009964 <xTimerGenericCommand+0x94>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d02a      	beq.n	800995a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2b05      	cmp	r3, #5
 8009914:	dc18      	bgt.n	8009948 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009916:	f7ff feb5 	bl	8009684 <xTaskGetSchedulerState>
 800991a:	4603      	mov	r3, r0
 800991c:	2b02      	cmp	r3, #2
 800991e:	d109      	bne.n	8009934 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009920:	4b10      	ldr	r3, [pc, #64]	; (8009964 <xTimerGenericCommand+0x94>)
 8009922:	6818      	ldr	r0, [r3, #0]
 8009924:	f107 0110 	add.w	r1, r7, #16
 8009928:	2300      	movs	r3, #0
 800992a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992c:	f7fe fcce 	bl	80082cc <xQueueGenericSend>
 8009930:	6278      	str	r0, [r7, #36]	; 0x24
 8009932:	e012      	b.n	800995a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009934:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <xTimerGenericCommand+0x94>)
 8009936:	6818      	ldr	r0, [r3, #0]
 8009938:	f107 0110 	add.w	r1, r7, #16
 800993c:	2300      	movs	r3, #0
 800993e:	2200      	movs	r2, #0
 8009940:	f7fe fcc4 	bl	80082cc <xQueueGenericSend>
 8009944:	6278      	str	r0, [r7, #36]	; 0x24
 8009946:	e008      	b.n	800995a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009948:	4b06      	ldr	r3, [pc, #24]	; (8009964 <xTimerGenericCommand+0x94>)
 800994a:	6818      	ldr	r0, [r3, #0]
 800994c:	f107 0110 	add.w	r1, r7, #16
 8009950:	2300      	movs	r3, #0
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	f7fe fdb4 	bl	80084c0 <xQueueGenericSendFromISR>
 8009958:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800995c:	4618      	mov	r0, r3
 800995e:	3728      	adds	r7, #40	; 0x28
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20000d00 	.word	0x20000d00

08009968 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b088      	sub	sp, #32
 800996c:	af02      	add	r7, sp, #8
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009972:	4b1c      	ldr	r3, [pc, #112]	; (80099e4 <prvProcessExpiredTimer+0x7c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	3304      	adds	r3, #4
 8009980:	4618      	mov	r0, r3
 8009982:	f7fe fb7b 	bl	800807c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d121      	bne.n	80099d2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	699a      	ldr	r2, [r3, #24]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	18d1      	adds	r1, r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	6978      	ldr	r0, [r7, #20]
 800999c:	f000 f8c8 	bl	8009b30 <prvInsertTimerInActiveList>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d015      	beq.n	80099d2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099a6:	2300      	movs	r3, #0
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	2300      	movs	r3, #0
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	2100      	movs	r1, #0
 80099b0:	6978      	ldr	r0, [r7, #20]
 80099b2:	f7ff ff8d 	bl	80098d0 <xTimerGenericCommand>
 80099b6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d109      	bne.n	80099d2 <prvProcessExpiredTimer+0x6a>
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	e7fe      	b.n	80099d0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d6:	6978      	ldr	r0, [r7, #20]
 80099d8:	4798      	blx	r3
}
 80099da:	bf00      	nop
 80099dc:	3718      	adds	r7, #24
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20000cf8 	.word	0x20000cf8

080099e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099f0:	f107 0308 	add.w	r3, r7, #8
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 f857 	bl	8009aa8 <prvGetNextExpireTime>
 80099fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	4619      	mov	r1, r3
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f803 	bl	8009a0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a06:	f000 f8d5 	bl	8009bb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a0a:	e7f1      	b.n	80099f0 <prvTimerTask+0x8>

08009a0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a16:	f7ff fa5b 	bl	8008ed0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a1a:	f107 0308 	add.w	r3, r7, #8
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 f866 	bl	8009af0 <prvSampleTimeNow>
 8009a24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d130      	bne.n	8009a8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10a      	bne.n	8009a48 <prvProcessTimerOrBlockTask+0x3c>
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d806      	bhi.n	8009a48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a3a:	f7ff fa57 	bl	8008eec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a3e:	68f9      	ldr	r1, [r7, #12]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7ff ff91 	bl	8009968 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a46:	e024      	b.n	8009a92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d008      	beq.n	8009a60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a4e:	4b13      	ldr	r3, [pc, #76]	; (8009a9c <prvProcessTimerOrBlockTask+0x90>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	bf0c      	ite	eq
 8009a58:	2301      	moveq	r3, #1
 8009a5a:	2300      	movne	r3, #0
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a60:	4b0f      	ldr	r3, [pc, #60]	; (8009aa0 <prvProcessTimerOrBlockTask+0x94>)
 8009a62:	6818      	ldr	r0, [r3, #0]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	f7fe ffcf 	bl	8008a10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a72:	f7ff fa3b 	bl	8008eec <xTaskResumeAll>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a7c:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <prvProcessTimerOrBlockTask+0x98>)
 8009a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	f3bf 8f6f 	isb	sy
}
 8009a8c:	e001      	b.n	8009a92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a8e:	f7ff fa2d 	bl	8008eec <xTaskResumeAll>
}
 8009a92:	bf00      	nop
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20000cfc 	.word	0x20000cfc
 8009aa0:	20000d00 	.word	0x20000d00
 8009aa4:	e000ed04 	.word	0xe000ed04

08009aa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ab0:	4b0e      	ldr	r3, [pc, #56]	; (8009aec <prvGetNextExpireTime+0x44>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	bf0c      	ite	eq
 8009aba:	2301      	moveq	r3, #1
 8009abc:	2300      	movne	r3, #0
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d105      	bne.n	8009ada <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ace:	4b07      	ldr	r3, [pc, #28]	; (8009aec <prvGetNextExpireTime+0x44>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	60fb      	str	r3, [r7, #12]
 8009ad8:	e001      	b.n	8009ade <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ade:	68fb      	ldr	r3, [r7, #12]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bc80      	pop	{r7}
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	20000cf8 	.word	0x20000cf8

08009af0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009af8:	f7ff fa94 	bl	8009024 <xTaskGetTickCount>
 8009afc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009afe:	4b0b      	ldr	r3, [pc, #44]	; (8009b2c <prvSampleTimeNow+0x3c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d205      	bcs.n	8009b14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b08:	f000 f904 	bl	8009d14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	e002      	b.n	8009b1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b1a:	4a04      	ldr	r2, [pc, #16]	; (8009b2c <prvSampleTimeNow+0x3c>)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b20:	68fb      	ldr	r3, [r7, #12]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000d08 	.word	0x20000d08

08009b30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d812      	bhi.n	8009b7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	1ad2      	subs	r2, r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d302      	bcc.n	8009b6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b64:	2301      	movs	r3, #1
 8009b66:	617b      	str	r3, [r7, #20]
 8009b68:	e01b      	b.n	8009ba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b6a:	4b10      	ldr	r3, [pc, #64]	; (8009bac <prvInsertTimerInActiveList+0x7c>)
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3304      	adds	r3, #4
 8009b72:	4619      	mov	r1, r3
 8009b74:	4610      	mov	r0, r2
 8009b76:	f7fe fa49 	bl	800800c <vListInsert>
 8009b7a:	e012      	b.n	8009ba2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d206      	bcs.n	8009b92 <prvInsertTimerInActiveList+0x62>
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d302      	bcc.n	8009b92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	e007      	b.n	8009ba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b92:	4b07      	ldr	r3, [pc, #28]	; (8009bb0 <prvInsertTimerInActiveList+0x80>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f7fe fa35 	bl	800800c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ba2:	697b      	ldr	r3, [r7, #20]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	20000cfc 	.word	0x20000cfc
 8009bb0:	20000cf8 	.word	0x20000cf8

08009bb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08e      	sub	sp, #56	; 0x38
 8009bb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bba:	e099      	b.n	8009cf0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	da17      	bge.n	8009bf2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bc2:	1d3b      	adds	r3, r7, #4
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d109      	bne.n	8009be2 <prvProcessReceivedCommands+0x2e>
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	e7fe      	b.n	8009be0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009be8:	6850      	ldr	r0, [r2, #4]
 8009bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bec:	6892      	ldr	r2, [r2, #8]
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	db7a      	blt.n	8009cee <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d004      	beq.n	8009c0e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c06:	3304      	adds	r3, #4
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe fa37 	bl	800807c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c0e:	463b      	mov	r3, r7
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff ff6d 	bl	8009af0 <prvSampleTimeNow>
 8009c16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b09      	cmp	r3, #9
 8009c1c:	d868      	bhi.n	8009cf0 <prvProcessReceivedCommands+0x13c>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <prvProcessReceivedCommands+0x70>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c4d 	.word	0x08009c4d
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009cf1 	.word	0x08009cf1
 8009c34:	08009ca7 	.word	0x08009ca7
 8009c38:	08009cdd 	.word	0x08009cdd
 8009c3c:	08009c4d 	.word	0x08009c4d
 8009c40:	08009c4d 	.word	0x08009c4d
 8009c44:	08009cf1 	.word	0x08009cf1
 8009c48:	08009ca7 	.word	0x08009ca7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	18d1      	adds	r1, r2, r3
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c5a:	f7ff ff69 	bl	8009b30 <prvInsertTimerInActiveList>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d045      	beq.n	8009cf0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c6a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d13d      	bne.n	8009cf0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	441a      	add	r2, r3
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	2300      	movs	r3, #0
 8009c82:	2100      	movs	r1, #0
 8009c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c86:	f7ff fe23 	bl	80098d0 <xTimerGenericCommand>
 8009c8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d12e      	bne.n	8009cf0 <prvProcessReceivedCommands+0x13c>
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	61bb      	str	r3, [r7, #24]
 8009ca4:	e7fe      	b.n	8009ca4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <prvProcessReceivedCommands+0x114>
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	617b      	str	r3, [r7, #20]
 8009cc6:	e7fe      	b.n	8009cc6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	699a      	ldr	r2, [r3, #24]
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	18d1      	adds	r1, r2, r3
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd6:	f7ff ff2b 	bl	8009b30 <prvInsertTimerInActiveList>
					break;
 8009cda:	e009      	b.n	8009cf0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d104      	bne.n	8009cf0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8009ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce8:	f000 fb56 	bl	800a398 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009cec:	e000      	b.n	8009cf0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009cee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cf0:	4b07      	ldr	r3, [pc, #28]	; (8009d10 <prvProcessReceivedCommands+0x15c>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	1d39      	adds	r1, r7, #4
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe fc75 	bl	80085e8 <xQueueReceive>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f47f af5b 	bne.w	8009bbc <prvProcessReceivedCommands+0x8>
	}
}
 8009d06:	bf00      	nop
 8009d08:	3730      	adds	r7, #48	; 0x30
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20000d00 	.word	0x20000d00

08009d14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b088      	sub	sp, #32
 8009d18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d1a:	e044      	b.n	8009da6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d1c:	4b2b      	ldr	r3, [pc, #172]	; (8009dcc <prvSwitchTimerLists+0xb8>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d26:	4b29      	ldr	r3, [pc, #164]	; (8009dcc <prvSwitchTimerLists+0xb8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3304      	adds	r3, #4
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fe f9a1 	bl	800807c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d12d      	bne.n	8009da6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	4413      	add	r3, r2
 8009d52:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d90e      	bls.n	8009d7a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d68:	4b18      	ldr	r3, [pc, #96]	; (8009dcc <prvSwitchTimerLists+0xb8>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	4619      	mov	r1, r3
 8009d72:	4610      	mov	r0, r2
 8009d74:	f7fe f94a 	bl	800800c <vListInsert>
 8009d78:	e015      	b.n	8009da6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	2100      	movs	r1, #0
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f7ff fda3 	bl	80098d0 <xTimerGenericCommand>
 8009d8a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d109      	bne.n	8009da6 <prvSwitchTimerLists+0x92>
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	603b      	str	r3, [r7, #0]
 8009da4:	e7fe      	b.n	8009da4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009da6:	4b09      	ldr	r3, [pc, #36]	; (8009dcc <prvSwitchTimerLists+0xb8>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1b5      	bne.n	8009d1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009db0:	4b06      	ldr	r3, [pc, #24]	; (8009dcc <prvSwitchTimerLists+0xb8>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009db6:	4b06      	ldr	r3, [pc, #24]	; (8009dd0 <prvSwitchTimerLists+0xbc>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a04      	ldr	r2, [pc, #16]	; (8009dcc <prvSwitchTimerLists+0xb8>)
 8009dbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009dbe:	4a04      	ldr	r2, [pc, #16]	; (8009dd0 <prvSwitchTimerLists+0xbc>)
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	6013      	str	r3, [r2, #0]
}
 8009dc4:	bf00      	nop
 8009dc6:	3718      	adds	r7, #24
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	20000cf8 	.word	0x20000cf8
 8009dd0:	20000cfc 	.word	0x20000cfc

08009dd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009dda:	f000 f925 	bl	800a028 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009dde:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <prvCheckForValidListAndQueue+0x60>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d120      	bne.n	8009e28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009de6:	4814      	ldr	r0, [pc, #80]	; (8009e38 <prvCheckForValidListAndQueue+0x64>)
 8009de8:	f7fe f8c2 	bl	8007f70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009dec:	4813      	ldr	r0, [pc, #76]	; (8009e3c <prvCheckForValidListAndQueue+0x68>)
 8009dee:	f7fe f8bf 	bl	8007f70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009df2:	4b13      	ldr	r3, [pc, #76]	; (8009e40 <prvCheckForValidListAndQueue+0x6c>)
 8009df4:	4a10      	ldr	r2, [pc, #64]	; (8009e38 <prvCheckForValidListAndQueue+0x64>)
 8009df6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009df8:	4b12      	ldr	r3, [pc, #72]	; (8009e44 <prvCheckForValidListAndQueue+0x70>)
 8009dfa:	4a10      	ldr	r2, [pc, #64]	; (8009e3c <prvCheckForValidListAndQueue+0x68>)
 8009dfc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	4b11      	ldr	r3, [pc, #68]	; (8009e48 <prvCheckForValidListAndQueue+0x74>)
 8009e04:	4a11      	ldr	r2, [pc, #68]	; (8009e4c <prvCheckForValidListAndQueue+0x78>)
 8009e06:	2110      	movs	r1, #16
 8009e08:	200a      	movs	r0, #10
 8009e0a:	f7fe f9c9 	bl	80081a0 <xQueueGenericCreateStatic>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	4b08      	ldr	r3, [pc, #32]	; (8009e34 <prvCheckForValidListAndQueue+0x60>)
 8009e12:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e14:	4b07      	ldr	r3, [pc, #28]	; (8009e34 <prvCheckForValidListAndQueue+0x60>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e1c:	4b05      	ldr	r3, [pc, #20]	; (8009e34 <prvCheckForValidListAndQueue+0x60>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	490b      	ldr	r1, [pc, #44]	; (8009e50 <prvCheckForValidListAndQueue+0x7c>)
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe fdcc 	bl	80089c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e28:	f000 f92c 	bl	800a084 <vPortExitCritical>
}
 8009e2c:	bf00      	nop
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000d00 	.word	0x20000d00
 8009e38:	20000cd0 	.word	0x20000cd0
 8009e3c:	20000ce4 	.word	0x20000ce4
 8009e40:	20000cf8 	.word	0x20000cf8
 8009e44:	20000cfc 	.word	0x20000cfc
 8009e48:	20000dac 	.word	0x20000dac
 8009e4c:	20000d0c 	.word	0x20000d0c
 8009e50:	0800e970 	.word	0x0800e970

08009e54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3b04      	subs	r3, #4
 8009e64:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3b04      	subs	r3, #4
 8009e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f023 0201 	bic.w	r2, r3, #1
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3b04      	subs	r3, #4
 8009e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e84:	4a08      	ldr	r2, [pc, #32]	; (8009ea8 <pxPortInitialiseStack+0x54>)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3b14      	subs	r3, #20
 8009e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3b20      	subs	r3, #32
 8009e9a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bc80      	pop	{r7}
 8009ea6:	4770      	bx	lr
 8009ea8:	08009ead 	.word	0x08009ead

08009eac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009eb6:	4b10      	ldr	r3, [pc, #64]	; (8009ef8 <prvTaskExitError+0x4c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ebe:	d009      	beq.n	8009ed4 <prvTaskExitError+0x28>
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	e7fe      	b.n	8009ed2 <prvTaskExitError+0x26>
 8009ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ee6:	bf00      	nop
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0fc      	beq.n	8009ee8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009eee:	bf00      	nop
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bc80      	pop	{r7}
 8009ef6:	4770      	bx	lr
 8009ef8:	2000011c 	.word	0x2000011c
 8009efc:	00000000 	.word	0x00000000

08009f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f00:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <pxCurrentTCBConst2>)
 8009f02:	6819      	ldr	r1, [r3, #0]
 8009f04:	6808      	ldr	r0, [r1, #0]
 8009f06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f0a:	f380 8809 	msr	PSP, r0
 8009f0e:	f3bf 8f6f 	isb	sy
 8009f12:	f04f 0000 	mov.w	r0, #0
 8009f16:	f380 8811 	msr	BASEPRI, r0
 8009f1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009f1e:	4770      	bx	lr

08009f20 <pxCurrentTCBConst2>:
 8009f20:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f24:	bf00      	nop
 8009f26:	bf00      	nop

08009f28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009f28:	4806      	ldr	r0, [pc, #24]	; (8009f44 <prvPortStartFirstTask+0x1c>)
 8009f2a:	6800      	ldr	r0, [r0, #0]
 8009f2c:	6800      	ldr	r0, [r0, #0]
 8009f2e:	f380 8808 	msr	MSP, r0
 8009f32:	b662      	cpsie	i
 8009f34:	b661      	cpsie	f
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	df00      	svc	0
 8009f40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f42:	bf00      	nop
 8009f44:	e000ed08 	.word	0xe000ed08

08009f48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f4e:	4b31      	ldr	r3, [pc, #196]	; (800a014 <xPortStartScheduler+0xcc>)
 8009f50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	22ff      	movs	r2, #255	; 0xff
 8009f5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f68:	78fb      	ldrb	r3, [r7, #3]
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	4b29      	ldr	r3, [pc, #164]	; (800a018 <xPortStartScheduler+0xd0>)
 8009f74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f76:	4b29      	ldr	r3, [pc, #164]	; (800a01c <xPortStartScheduler+0xd4>)
 8009f78:	2207      	movs	r2, #7
 8009f7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f7c:	e009      	b.n	8009f92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009f7e:	4b27      	ldr	r3, [pc, #156]	; (800a01c <xPortStartScheduler+0xd4>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3b01      	subs	r3, #1
 8009f84:	4a25      	ldr	r2, [pc, #148]	; (800a01c <xPortStartScheduler+0xd4>)
 8009f86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	005b      	lsls	r3, r3, #1
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f92:	78fb      	ldrb	r3, [r7, #3]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f9a:	2b80      	cmp	r3, #128	; 0x80
 8009f9c:	d0ef      	beq.n	8009f7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f9e:	4b1f      	ldr	r3, [pc, #124]	; (800a01c <xPortStartScheduler+0xd4>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f1c3 0307 	rsb	r3, r3, #7
 8009fa6:	2b04      	cmp	r3, #4
 8009fa8:	d009      	beq.n	8009fbe <xPortStartScheduler+0x76>
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	60bb      	str	r3, [r7, #8]
 8009fbc:	e7fe      	b.n	8009fbc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fbe:	4b17      	ldr	r3, [pc, #92]	; (800a01c <xPortStartScheduler+0xd4>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	021b      	lsls	r3, r3, #8
 8009fc4:	4a15      	ldr	r2, [pc, #84]	; (800a01c <xPortStartScheduler+0xd4>)
 8009fc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fc8:	4b14      	ldr	r3, [pc, #80]	; (800a01c <xPortStartScheduler+0xd4>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fd0:	4a12      	ldr	r2, [pc, #72]	; (800a01c <xPortStartScheduler+0xd4>)
 8009fd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fdc:	4b10      	ldr	r3, [pc, #64]	; (800a020 <xPortStartScheduler+0xd8>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a0f      	ldr	r2, [pc, #60]	; (800a020 <xPortStartScheduler+0xd8>)
 8009fe2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009fe6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fe8:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <xPortStartScheduler+0xd8>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a0c      	ldr	r2, [pc, #48]	; (800a020 <xPortStartScheduler+0xd8>)
 8009fee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ff2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ff4:	f000 f8b0 	bl	800a158 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ff8:	4b0a      	ldr	r3, [pc, #40]	; (800a024 <xPortStartScheduler+0xdc>)
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ffe:	f7ff ff93 	bl	8009f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a002:	f7ff f8db 	bl	80091bc <vTaskSwitchContext>
	prvTaskExitError();
 800a006:	f7ff ff51 	bl	8009eac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	e000e400 	.word	0xe000e400
 800a018:	20000dfc 	.word	0x20000dfc
 800a01c:	20000e00 	.word	0x20000e00
 800a020:	e000ed20 	.word	0xe000ed20
 800a024:	2000011c 	.word	0x2000011c

0800a028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a040:	4b0e      	ldr	r3, [pc, #56]	; (800a07c <vPortEnterCritical+0x54>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3301      	adds	r3, #1
 800a046:	4a0d      	ldr	r2, [pc, #52]	; (800a07c <vPortEnterCritical+0x54>)
 800a048:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a04a:	4b0c      	ldr	r3, [pc, #48]	; (800a07c <vPortEnterCritical+0x54>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d10e      	bne.n	800a070 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a052:	4b0b      	ldr	r3, [pc, #44]	; (800a080 <vPortEnterCritical+0x58>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d009      	beq.n	800a070 <vPortEnterCritical+0x48>
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	603b      	str	r3, [r7, #0]
 800a06e:	e7fe      	b.n	800a06e <vPortEnterCritical+0x46>
	}
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	bc80      	pop	{r7}
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	2000011c 	.word	0x2000011c
 800a080:	e000ed04 	.word	0xe000ed04

0800a084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a08a:	4b10      	ldr	r3, [pc, #64]	; (800a0cc <vPortExitCritical+0x48>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d109      	bne.n	800a0a6 <vPortExitCritical+0x22>
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	607b      	str	r3, [r7, #4]
 800a0a4:	e7fe      	b.n	800a0a4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a0a6:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <vPortExitCritical+0x48>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	4a07      	ldr	r2, [pc, #28]	; (800a0cc <vPortExitCritical+0x48>)
 800a0ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0b0:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <vPortExitCritical+0x48>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d104      	bne.n	800a0c2 <vPortExitCritical+0x3e>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0c2:	bf00      	nop
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bc80      	pop	{r7}
 800a0ca:	4770      	bx	lr
 800a0cc:	2000011c 	.word	0x2000011c

0800a0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0d0:	f3ef 8009 	mrs	r0, PSP
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	4b0d      	ldr	r3, [pc, #52]	; (800a110 <pxCurrentTCBConst>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a0e0:	6010      	str	r0, [r2, #0]
 800a0e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a0e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a0ea:	f380 8811 	msr	BASEPRI, r0
 800a0ee:	f7ff f865 	bl	80091bc <vTaskSwitchContext>
 800a0f2:	f04f 0000 	mov.w	r0, #0
 800a0f6:	f380 8811 	msr	BASEPRI, r0
 800a0fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a0fe:	6819      	ldr	r1, [r3, #0]
 800a100:	6808      	ldr	r0, [r1, #0]
 800a102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a106:	f380 8809 	msr	PSP, r0
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	4770      	bx	lr

0800a110 <pxCurrentTCBConst>:
 800a110:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop

0800a118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a130:	f7fe ff86 	bl	8009040 <xTaskIncrementTick>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a13a:	4b06      	ldr	r3, [pc, #24]	; (800a154 <SysTick_Handler+0x3c>)
 800a13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	2300      	movs	r3, #0
 800a144:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	e000ed04 	.word	0xe000ed04

0800a158 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a158:	b480      	push	{r7}
 800a15a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a15c:	4b0a      	ldr	r3, [pc, #40]	; (800a188 <vPortSetupTimerInterrupt+0x30>)
 800a15e:	2200      	movs	r2, #0
 800a160:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a162:	4b0a      	ldr	r3, [pc, #40]	; (800a18c <vPortSetupTimerInterrupt+0x34>)
 800a164:	2200      	movs	r2, #0
 800a166:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a168:	4b09      	ldr	r3, [pc, #36]	; (800a190 <vPortSetupTimerInterrupt+0x38>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a09      	ldr	r2, [pc, #36]	; (800a194 <vPortSetupTimerInterrupt+0x3c>)
 800a16e:	fba2 2303 	umull	r2, r3, r2, r3
 800a172:	099b      	lsrs	r3, r3, #6
 800a174:	4a08      	ldr	r2, [pc, #32]	; (800a198 <vPortSetupTimerInterrupt+0x40>)
 800a176:	3b01      	subs	r3, #1
 800a178:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a17a:	4b03      	ldr	r3, [pc, #12]	; (800a188 <vPortSetupTimerInterrupt+0x30>)
 800a17c:	2207      	movs	r2, #7
 800a17e:	601a      	str	r2, [r3, #0]
}
 800a180:	bf00      	nop
 800a182:	46bd      	mov	sp, r7
 800a184:	bc80      	pop	{r7}
 800a186:	4770      	bx	lr
 800a188:	e000e010 	.word	0xe000e010
 800a18c:	e000e018 	.word	0xe000e018
 800a190:	20000000 	.word	0x20000000
 800a194:	10624dd3 	.word	0x10624dd3
 800a198:	e000e014 	.word	0xe000e014

0800a19c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1a2:	f3ef 8305 	mrs	r3, IPSR
 800a1a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b0f      	cmp	r3, #15
 800a1ac:	d913      	bls.n	800a1d6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1ae:	4a15      	ldr	r2, [pc, #84]	; (800a204 <vPortValidateInterruptPriority+0x68>)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1b8:	4b13      	ldr	r3, [pc, #76]	; (800a208 <vPortValidateInterruptPriority+0x6c>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	7afa      	ldrb	r2, [r7, #11]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d209      	bcs.n	800a1d6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	607b      	str	r3, [r7, #4]
 800a1d4:	e7fe      	b.n	800a1d4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1d6:	4b0d      	ldr	r3, [pc, #52]	; (800a20c <vPortValidateInterruptPriority+0x70>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a1de:	4b0c      	ldr	r3, [pc, #48]	; (800a210 <vPortValidateInterruptPriority+0x74>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d909      	bls.n	800a1fa <vPortValidateInterruptPriority+0x5e>
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	603b      	str	r3, [r7, #0]
 800a1f8:	e7fe      	b.n	800a1f8 <vPortValidateInterruptPriority+0x5c>
	}
 800a1fa:	bf00      	nop
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bc80      	pop	{r7}
 800a202:	4770      	bx	lr
 800a204:	e000e3f0 	.word	0xe000e3f0
 800a208:	20000dfc 	.word	0x20000dfc
 800a20c:	e000ed0c 	.word	0xe000ed0c
 800a210:	20000e00 	.word	0x20000e00

0800a214 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b08a      	sub	sp, #40	; 0x28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a21c:	2300      	movs	r3, #0
 800a21e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a220:	f7fe fe56 	bl	8008ed0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a224:	4b57      	ldr	r3, [pc, #348]	; (800a384 <pvPortMalloc+0x170>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a22c:	f000 f90c 	bl	800a448 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a230:	4b55      	ldr	r3, [pc, #340]	; (800a388 <pvPortMalloc+0x174>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4013      	ands	r3, r2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f040 808c 	bne.w	800a356 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01c      	beq.n	800a27e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a244:	2208      	movs	r2, #8
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4413      	add	r3, r2
 800a24a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f003 0307 	and.w	r3, r3, #7
 800a252:	2b00      	cmp	r3, #0
 800a254:	d013      	beq.n	800a27e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f023 0307 	bic.w	r3, r3, #7
 800a25c:	3308      	adds	r3, #8
 800a25e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	2b00      	cmp	r3, #0
 800a268:	d009      	beq.n	800a27e <pvPortMalloc+0x6a>
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	e7fe      	b.n	800a27c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d068      	beq.n	800a356 <pvPortMalloc+0x142>
 800a284:	4b41      	ldr	r3, [pc, #260]	; (800a38c <pvPortMalloc+0x178>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d863      	bhi.n	800a356 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a28e:	4b40      	ldr	r3, [pc, #256]	; (800a390 <pvPortMalloc+0x17c>)
 800a290:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a292:	4b3f      	ldr	r3, [pc, #252]	; (800a390 <pvPortMalloc+0x17c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a298:	e004      	b.n	800a2a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d903      	bls.n	800a2b6 <pvPortMalloc+0xa2>
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1f1      	bne.n	800a29a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2b6:	4b33      	ldr	r3, [pc, #204]	; (800a384 <pvPortMalloc+0x170>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d04a      	beq.n	800a356 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2208      	movs	r2, #8
 800a2c6:	4413      	add	r3, r2
 800a2c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	1ad2      	subs	r2, r2, r3
 800a2da:	2308      	movs	r3, #8
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d91e      	bls.n	800a320 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	f003 0307 	and.w	r3, r3, #7
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d009      	beq.n	800a308 <pvPortMalloc+0xf4>
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	613b      	str	r3, [r7, #16]
 800a306:	e7fe      	b.n	800a306 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a31a:	69b8      	ldr	r0, [r7, #24]
 800a31c:	f000 f8f6 	bl	800a50c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a320:	4b1a      	ldr	r3, [pc, #104]	; (800a38c <pvPortMalloc+0x178>)
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	4a18      	ldr	r2, [pc, #96]	; (800a38c <pvPortMalloc+0x178>)
 800a32c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a32e:	4b17      	ldr	r3, [pc, #92]	; (800a38c <pvPortMalloc+0x178>)
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	4b18      	ldr	r3, [pc, #96]	; (800a394 <pvPortMalloc+0x180>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d203      	bcs.n	800a342 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a33a:	4b14      	ldr	r3, [pc, #80]	; (800a38c <pvPortMalloc+0x178>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a15      	ldr	r2, [pc, #84]	; (800a394 <pvPortMalloc+0x180>)
 800a340:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	4b10      	ldr	r3, [pc, #64]	; (800a388 <pvPortMalloc+0x174>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	431a      	orrs	r2, r3
 800a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a356:	f7fe fdc9 	bl	8008eec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	f003 0307 	and.w	r3, r3, #7
 800a360:	2b00      	cmp	r3, #0
 800a362:	d009      	beq.n	800a378 <pvPortMalloc+0x164>
 800a364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	e7fe      	b.n	800a376 <pvPortMalloc+0x162>
	return pvReturn;
 800a378:	69fb      	ldr	r3, [r7, #28]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3728      	adds	r7, #40	; 0x28
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20002e0c 	.word	0x20002e0c
 800a388:	20002e18 	.word	0x20002e18
 800a38c:	20002e10 	.word	0x20002e10
 800a390:	20002e04 	.word	0x20002e04
 800a394:	20002e14 	.word	0x20002e14

0800a398 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d046      	beq.n	800a438 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3aa:	2308      	movs	r3, #8
 800a3ac:	425b      	negs	r3, r3
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	4b20      	ldr	r3, [pc, #128]	; (800a440 <vPortFree+0xa8>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d109      	bne.n	800a3da <vPortFree+0x42>
 800a3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	e7fe      	b.n	800a3d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d009      	beq.n	800a3f6 <vPortFree+0x5e>
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	60bb      	str	r3, [r7, #8]
 800a3f4:	e7fe      	b.n	800a3f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	4b11      	ldr	r3, [pc, #68]	; (800a440 <vPortFree+0xa8>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4013      	ands	r3, r2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d019      	beq.n	800a438 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d115      	bne.n	800a438 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <vPortFree+0xa8>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	43db      	mvns	r3, r3
 800a416:	401a      	ands	r2, r3
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a41c:	f7fe fd58 	bl	8008ed0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	4b07      	ldr	r3, [pc, #28]	; (800a444 <vPortFree+0xac>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4413      	add	r3, r2
 800a42a:	4a06      	ldr	r2, [pc, #24]	; (800a444 <vPortFree+0xac>)
 800a42c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a42e:	6938      	ldr	r0, [r7, #16]
 800a430:	f000 f86c 	bl	800a50c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a434:	f7fe fd5a 	bl	8008eec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a438:	bf00      	nop
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20002e18 	.word	0x20002e18
 800a444:	20002e10 	.word	0x20002e10

0800a448 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a44e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a452:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a454:	4b27      	ldr	r3, [pc, #156]	; (800a4f4 <prvHeapInit+0xac>)
 800a456:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f003 0307 	and.w	r3, r3, #7
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00c      	beq.n	800a47c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	3307      	adds	r3, #7
 800a466:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f023 0307 	bic.w	r3, r3, #7
 800a46e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	4a1f      	ldr	r2, [pc, #124]	; (800a4f4 <prvHeapInit+0xac>)
 800a478:	4413      	add	r3, r2
 800a47a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a480:	4a1d      	ldr	r2, [pc, #116]	; (800a4f8 <prvHeapInit+0xb0>)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a486:	4b1c      	ldr	r3, [pc, #112]	; (800a4f8 <prvHeapInit+0xb0>)
 800a488:	2200      	movs	r2, #0
 800a48a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	4413      	add	r3, r2
 800a492:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a494:	2208      	movs	r2, #8
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	1a9b      	subs	r3, r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f023 0307 	bic.w	r3, r3, #7
 800a4a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	4a15      	ldr	r2, [pc, #84]	; (800a4fc <prvHeapInit+0xb4>)
 800a4a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4aa:	4b14      	ldr	r3, [pc, #80]	; (800a4fc <prvHeapInit+0xb4>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4b2:	4b12      	ldr	r3, [pc, #72]	; (800a4fc <prvHeapInit+0xb4>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	1ad2      	subs	r2, r2, r3
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4c8:	4b0c      	ldr	r3, [pc, #48]	; (800a4fc <prvHeapInit+0xb4>)
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	4a0a      	ldr	r2, [pc, #40]	; (800a500 <prvHeapInit+0xb8>)
 800a4d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	4a09      	ldr	r2, [pc, #36]	; (800a504 <prvHeapInit+0xbc>)
 800a4de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4e0:	4b09      	ldr	r3, [pc, #36]	; (800a508 <prvHeapInit+0xc0>)
 800a4e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a4e6:	601a      	str	r2, [r3, #0]
}
 800a4e8:	bf00      	nop
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	20000e04 	.word	0x20000e04
 800a4f8:	20002e04 	.word	0x20002e04
 800a4fc:	20002e0c 	.word	0x20002e0c
 800a500:	20002e14 	.word	0x20002e14
 800a504:	20002e10 	.word	0x20002e10
 800a508:	20002e18 	.word	0x20002e18

0800a50c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a514:	4b27      	ldr	r3, [pc, #156]	; (800a5b4 <prvInsertBlockIntoFreeList+0xa8>)
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	e002      	b.n	800a520 <prvInsertBlockIntoFreeList+0x14>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	429a      	cmp	r2, r3
 800a528:	d8f7      	bhi.n	800a51a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	4413      	add	r3, r2
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d108      	bne.n	800a54e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	685a      	ldr	r2, [r3, #4]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	441a      	add	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	441a      	add	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d118      	bne.n	800a594 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	4b14      	ldr	r3, [pc, #80]	; (800a5b8 <prvInsertBlockIntoFreeList+0xac>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d00d      	beq.n	800a58a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	441a      	add	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	e008      	b.n	800a59c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a58a:	4b0b      	ldr	r3, [pc, #44]	; (800a5b8 <prvInsertBlockIntoFreeList+0xac>)
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	601a      	str	r2, [r3, #0]
 800a592:	e003      	b.n	800a59c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d002      	beq.n	800a5aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5aa:	bf00      	nop
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bc80      	pop	{r7}
 800a5b2:	4770      	bx	lr
 800a5b4:	20002e04 	.word	0x20002e04
 800a5b8:	20002e0c 	.word	0x20002e0c

0800a5bc <ResetUsbConnection>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void ResetUsbConnection(){
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5c2:	463b      	mov	r3, r7
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	605a      	str	r2, [r3, #4]
 800a5ca:	609a      	str	r2, [r3, #8]
 800a5cc:	60da      	str	r2, [r3, #12]
    // ?????????????? ??? DP ??? ?????
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a5ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5d8:	2302      	movs	r3, #2
 800a5da:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5dc:	463b      	mov	r3, r7
 800a5de:	4619      	mov	r1, r3
 800a5e0:	480e      	ldr	r0, [pc, #56]	; (800a61c <ResetUsbConnection+0x60>)
 800a5e2:	f7f6 fb8d 	bl	8000d00 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // ????????? DP ? "?????"
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a5ec:	480b      	ldr	r0, [pc, #44]	; (800a61c <ResetUsbConnection+0x60>)
 800a5ee:	f7f6 fcf8 	bl	8000fe2 <HAL_GPIO_WritePin>
	//for(uint16_t i = 0; i < 10000; i++) {}; // ??????? ????
	HAL_Delay(1000);
 800a5f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a5f6:	f7f6 fa81 	bl	8000afc <HAL_Delay>

	// ?????????????????? ??? ??? ?????? ? USB
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a602:	463b      	mov	r3, r7
 800a604:	4619      	mov	r1, r3
 800a606:	4805      	ldr	r0, [pc, #20]	; (800a61c <ResetUsbConnection+0x60>)
 800a608:	f7f6 fb7a 	bl	8000d00 <HAL_GPIO_Init>
	//for(uint16_t i = 0; i < 10000; i++) {}; // ??????? ????
	HAL_Delay(100);
 800a60c:	2064      	movs	r0, #100	; 0x64
 800a60e:	f7f6 fa75 	bl	8000afc <HAL_Delay>

}
 800a612:	bf00      	nop
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	40010800 	.word	0x40010800

0800a620 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	ResetUsbConnection();
 800a624:	f7ff ffca 	bl	800a5bc <ResetUsbConnection>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a628:	2200      	movs	r2, #0
 800a62a:	4912      	ldr	r1, [pc, #72]	; (800a674 <MX_USB_DEVICE_Init+0x54>)
 800a62c:	4812      	ldr	r0, [pc, #72]	; (800a678 <MX_USB_DEVICE_Init+0x58>)
 800a62e:	f7fc faa4 	bl	8006b7a <USBD_Init>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800a638:	f7f5 ffd4 	bl	80005e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a63c:	490f      	ldr	r1, [pc, #60]	; (800a67c <MX_USB_DEVICE_Init+0x5c>)
 800a63e:	480e      	ldr	r0, [pc, #56]	; (800a678 <MX_USB_DEVICE_Init+0x58>)
 800a640:	f7fc fac6 	bl	8006bd0 <USBD_RegisterClass>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800a64a:	f7f5 ffcb 	bl	80005e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a64e:	490c      	ldr	r1, [pc, #48]	; (800a680 <MX_USB_DEVICE_Init+0x60>)
 800a650:	4809      	ldr	r0, [pc, #36]	; (800a678 <MX_USB_DEVICE_Init+0x58>)
 800a652:	f7fc f9f7 	bl	8006a44 <USBD_CDC_RegisterInterface>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800a65c:	f7f5 ffc2 	bl	80005e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a660:	4805      	ldr	r0, [pc, #20]	; (800a678 <MX_USB_DEVICE_Init+0x58>)
 800a662:	f7fc face 	bl	8006c02 <USBD_Start>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800a66c:	f7f5 ffba 	bl	80005e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a670:	bf00      	nop
 800a672:	bd80      	pop	{r7, pc}
 800a674:	20000130 	.word	0x20000130
 800a678:	20003380 	.word	0x20003380
 800a67c:	20000018 	.word	0x20000018
 800a680:	20000120 	.word	0x20000120

0800a684 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a688:	2200      	movs	r2, #0
 800a68a:	4905      	ldr	r1, [pc, #20]	; (800a6a0 <CDC_Init_FS+0x1c>)
 800a68c:	4805      	ldr	r0, [pc, #20]	; (800a6a4 <CDC_Init_FS+0x20>)
 800a68e:	f7fc f9ef 	bl	8006a70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a692:	4905      	ldr	r1, [pc, #20]	; (800a6a8 <CDC_Init_FS+0x24>)
 800a694:	4803      	ldr	r0, [pc, #12]	; (800a6a4 <CDC_Init_FS+0x20>)
 800a696:	f7fc fa04 	bl	8006aa2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a69a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20003844 	.word	0x20003844
 800a6a4:	20003380 	.word	0x20003380
 800a6a8:	20003644 	.word	0x20003644

0800a6ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a6b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bc80      	pop	{r7}
 800a6b8:	4770      	bx	lr
	...

0800a6bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	6039      	str	r1, [r7, #0]
 800a6c6:	71fb      	strb	r3, [r7, #7]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a6cc:	79fb      	ldrb	r3, [r7, #7]
 800a6ce:	2b23      	cmp	r3, #35	; 0x23
 800a6d0:	d84a      	bhi.n	800a768 <CDC_Control_FS+0xac>
 800a6d2:	a201      	add	r2, pc, #4	; (adr r2, 800a6d8 <CDC_Control_FS+0x1c>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a769 	.word	0x0800a769
 800a6dc:	0800a769 	.word	0x0800a769
 800a6e0:	0800a769 	.word	0x0800a769
 800a6e4:	0800a769 	.word	0x0800a769
 800a6e8:	0800a769 	.word	0x0800a769
 800a6ec:	0800a769 	.word	0x0800a769
 800a6f0:	0800a769 	.word	0x0800a769
 800a6f4:	0800a769 	.word	0x0800a769
 800a6f8:	0800a769 	.word	0x0800a769
 800a6fc:	0800a769 	.word	0x0800a769
 800a700:	0800a769 	.word	0x0800a769
 800a704:	0800a769 	.word	0x0800a769
 800a708:	0800a769 	.word	0x0800a769
 800a70c:	0800a769 	.word	0x0800a769
 800a710:	0800a769 	.word	0x0800a769
 800a714:	0800a769 	.word	0x0800a769
 800a718:	0800a769 	.word	0x0800a769
 800a71c:	0800a769 	.word	0x0800a769
 800a720:	0800a769 	.word	0x0800a769
 800a724:	0800a769 	.word	0x0800a769
 800a728:	0800a769 	.word	0x0800a769
 800a72c:	0800a769 	.word	0x0800a769
 800a730:	0800a769 	.word	0x0800a769
 800a734:	0800a769 	.word	0x0800a769
 800a738:	0800a769 	.word	0x0800a769
 800a73c:	0800a769 	.word	0x0800a769
 800a740:	0800a769 	.word	0x0800a769
 800a744:	0800a769 	.word	0x0800a769
 800a748:	0800a769 	.word	0x0800a769
 800a74c:	0800a769 	.word	0x0800a769
 800a750:	0800a769 	.word	0x0800a769
 800a754:	0800a769 	.word	0x0800a769
 800a758:	0800a769 	.word	0x0800a769
 800a75c:	0800a769 	.word	0x0800a769
 800a760:	0800a769 	.word	0x0800a769
 800a764:	0800a769 	.word	0x0800a769
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a768:	bf00      	nop
  }

  return (USBD_OK);
 800a76a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	bc80      	pop	{r7}
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop

0800a778 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	//showKeyCodes(Buf, Len);
  //CDC_Receive_FS_ProcessNext(Buf);
	putBufPtr(Buf, Len);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 fd05 	bl	800c194 <putBufPtr>
  return (USBD_OK);
 800a78a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a7a4:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <CDC_Transmit_FS+0x48>)
 800a7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d001      	beq.n	800a7ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e00b      	b.n	800a7d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a7ba:	887b      	ldrh	r3, [r7, #2]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	4806      	ldr	r0, [pc, #24]	; (800a7dc <CDC_Transmit_FS+0x48>)
 800a7c2:	f7fc f955 	bl	8006a70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7c6:	4805      	ldr	r0, [pc, #20]	; (800a7dc <CDC_Transmit_FS+0x48>)
 800a7c8:	f7fc f97e 	bl	8006ac8 <USBD_CDC_TransmitPacket>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20003380 	.word	0x20003380

0800a7e0 <CDC_Receive_FS_ProcessNext>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Receive_FS_ProcessNext(uint8_t* Buf){
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a7e8:	6879      	ldr	r1, [r7, #4]
 800a7ea:	4805      	ldr	r0, [pc, #20]	; (800a800 <CDC_Receive_FS_ProcessNext+0x20>)
 800a7ec:	f7fc f959 	bl	8006aa2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a7f0:	4803      	ldr	r0, [pc, #12]	; (800a800 <CDC_Receive_FS_ProcessNext+0x20>)
 800a7f2:	f7fc f998 	bl	8006b26 <USBD_CDC_ReceivePacket>
};	
 800a7f6:	bf00      	nop
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	20003380 	.word	0x20003380

0800a804 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4603      	mov	r3, r0
 800a80c:	6039      	str	r1, [r7, #0]
 800a80e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2212      	movs	r2, #18
 800a814:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a816:	4b03      	ldr	r3, [pc, #12]	; (800a824 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bc80      	pop	{r7}
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	2000014c 	.word	0x2000014c

0800a828 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	4603      	mov	r3, r0
 800a830:	6039      	str	r1, [r7, #0]
 800a832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2204      	movs	r2, #4
 800a838:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a83a:	4b03      	ldr	r3, [pc, #12]	; (800a848 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	bc80      	pop	{r7}
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	20000160 	.word	0x20000160

0800a84c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	4603      	mov	r3, r0
 800a854:	6039      	str	r1, [r7, #0]
 800a856:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a858:	79fb      	ldrb	r3, [r7, #7]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d105      	bne.n	800a86a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	4907      	ldr	r1, [pc, #28]	; (800a880 <USBD_FS_ProductStrDescriptor+0x34>)
 800a862:	4808      	ldr	r0, [pc, #32]	; (800a884 <USBD_FS_ProductStrDescriptor+0x38>)
 800a864:	f7fd f939 	bl	8007ada <USBD_GetString>
 800a868:	e004      	b.n	800a874 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	4904      	ldr	r1, [pc, #16]	; (800a880 <USBD_FS_ProductStrDescriptor+0x34>)
 800a86e:	4805      	ldr	r0, [pc, #20]	; (800a884 <USBD_FS_ProductStrDescriptor+0x38>)
 800a870:	f7fd f933 	bl	8007ada <USBD_GetString>
  }
  return USBD_StrDesc;
 800a874:	4b02      	ldr	r3, [pc, #8]	; (800a880 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20003a44 	.word	0x20003a44
 800a884:	0800e978 	.word	0x0800e978

0800a888 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	4603      	mov	r3, r0
 800a890:	6039      	str	r1, [r7, #0]
 800a892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	4904      	ldr	r1, [pc, #16]	; (800a8a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a898:	4804      	ldr	r0, [pc, #16]	; (800a8ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a89a:	f7fd f91e 	bl	8007ada <USBD_GetString>
  return USBD_StrDesc;
 800a89e:	4b02      	ldr	r3, [pc, #8]	; (800a8a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	20003a44 	.word	0x20003a44
 800a8ac:	0800e990 	.word	0x0800e990

0800a8b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	6039      	str	r1, [r7, #0]
 800a8ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	221a      	movs	r2, #26
 800a8c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a8c2:	f000 f843 	bl	800a94c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a8c6:	4b02      	ldr	r3, [pc, #8]	; (800a8d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	20000164 	.word	0x20000164

0800a8d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	4603      	mov	r3, r0
 800a8dc:	6039      	str	r1, [r7, #0]
 800a8de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a8e0:	79fb      	ldrb	r3, [r7, #7]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d105      	bne.n	800a8f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	4907      	ldr	r1, [pc, #28]	; (800a908 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8ea:	4808      	ldr	r0, [pc, #32]	; (800a90c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8ec:	f7fd f8f5 	bl	8007ada <USBD_GetString>
 800a8f0:	e004      	b.n	800a8fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	4904      	ldr	r1, [pc, #16]	; (800a908 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8f6:	4805      	ldr	r0, [pc, #20]	; (800a90c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8f8:	f7fd f8ef 	bl	8007ada <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8fc:	4b02      	ldr	r3, [pc, #8]	; (800a908 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20003a44 	.word	0x20003a44
 800a90c:	0800e9a4 	.word	0x0800e9a4

0800a910 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	4603      	mov	r3, r0
 800a918:	6039      	str	r1, [r7, #0]
 800a91a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a91c:	79fb      	ldrb	r3, [r7, #7]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d105      	bne.n	800a92e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	4907      	ldr	r1, [pc, #28]	; (800a944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a926:	4808      	ldr	r0, [pc, #32]	; (800a948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a928:	f7fd f8d7 	bl	8007ada <USBD_GetString>
 800a92c:	e004      	b.n	800a938 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	4904      	ldr	r1, [pc, #16]	; (800a944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a932:	4805      	ldr	r0, [pc, #20]	; (800a948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a934:	f7fd f8d1 	bl	8007ada <USBD_GetString>
  }
  return USBD_StrDesc;
 800a938:	4b02      	ldr	r3, [pc, #8]	; (800a944 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	20003a44 	.word	0x20003a44
 800a948:	0800e9b0 	.word	0x0800e9b0

0800a94c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a952:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <Get_SerialNum+0x44>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a958:	4b0e      	ldr	r3, [pc, #56]	; (800a994 <Get_SerialNum+0x48>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a95e:	4b0e      	ldr	r3, [pc, #56]	; (800a998 <Get_SerialNum+0x4c>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4413      	add	r3, r2
 800a96a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d009      	beq.n	800a986 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a972:	2208      	movs	r2, #8
 800a974:	4909      	ldr	r1, [pc, #36]	; (800a99c <Get_SerialNum+0x50>)
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 f814 	bl	800a9a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a97c:	2204      	movs	r2, #4
 800a97e:	4908      	ldr	r1, [pc, #32]	; (800a9a0 <Get_SerialNum+0x54>)
 800a980:	68b8      	ldr	r0, [r7, #8]
 800a982:	f000 f80f 	bl	800a9a4 <IntToUnicode>
  }
}
 800a986:	bf00      	nop
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	1ffff7e8 	.word	0x1ffff7e8
 800a994:	1ffff7ec 	.word	0x1ffff7ec
 800a998:	1ffff7f0 	.word	0x1ffff7f0
 800a99c:	20000166 	.word	0x20000166
 800a9a0:	20000176 	.word	0x20000176

0800a9a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b087      	sub	sp, #28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	75fb      	strb	r3, [r7, #23]
 800a9ba:	e027      	b.n	800aa0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	0f1b      	lsrs	r3, r3, #28
 800a9c0:	2b09      	cmp	r3, #9
 800a9c2:	d80b      	bhi.n	800a9dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	0f1b      	lsrs	r3, r3, #28
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	440b      	add	r3, r1
 800a9d4:	3230      	adds	r2, #48	; 0x30
 800a9d6:	b2d2      	uxtb	r2, r2
 800a9d8:	701a      	strb	r2, [r3, #0]
 800a9da:	e00a      	b.n	800a9f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	0f1b      	lsrs	r3, r3, #28
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	7dfb      	ldrb	r3, [r7, #23]
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	440b      	add	r3, r1
 800a9ec:	3237      	adds	r2, #55	; 0x37
 800a9ee:	b2d2      	uxtb	r2, r2
 800a9f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	011b      	lsls	r3, r3, #4
 800a9f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
 800a9fa:	005b      	lsls	r3, r3, #1
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	4413      	add	r3, r2
 800aa02:	2200      	movs	r2, #0
 800aa04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa06:	7dfb      	ldrb	r3, [r7, #23]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	75fb      	strb	r3, [r7, #23]
 800aa0c:	7dfa      	ldrb	r2, [r7, #23]
 800aa0e:	79fb      	ldrb	r3, [r7, #7]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d3d3      	bcc.n	800a9bc <IntToUnicode+0x18>
  }
}
 800aa14:	bf00      	nop
 800aa16:	371c      	adds	r7, #28
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bc80      	pop	{r7}
 800aa1c:	4770      	bx	lr
	...

0800aa20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a0d      	ldr	r2, [pc, #52]	; (800aa64 <HAL_PCD_MspInit+0x44>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d113      	bne.n	800aa5a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aa32:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <HAL_PCD_MspInit+0x48>)
 800aa34:	69db      	ldr	r3, [r3, #28]
 800aa36:	4a0c      	ldr	r2, [pc, #48]	; (800aa68 <HAL_PCD_MspInit+0x48>)
 800aa38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa3c:	61d3      	str	r3, [r2, #28]
 800aa3e:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <HAL_PCD_MspInit+0x48>)
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	2105      	movs	r1, #5
 800aa4e:	2014      	movs	r0, #20
 800aa50:	f7f6 f92b 	bl	8000caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800aa54:	2014      	movs	r0, #20
 800aa56:	f7f6 f944 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa5a:	bf00      	nop
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	40005c00 	.word	0x40005c00
 800aa68:	40021000 	.word	0x40021000

0800aa6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800aa80:	4619      	mov	r1, r3
 800aa82:	4610      	mov	r0, r2
 800aa84:	f7fc f905 	bl	8006c92 <USBD_LL_SetupStage>
}
 800aa88:	bf00      	nop
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aaa2:	78fa      	ldrb	r2, [r7, #3]
 800aaa4:	6879      	ldr	r1, [r7, #4]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	440b      	add	r3, r1
 800aab0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	78fb      	ldrb	r3, [r7, #3]
 800aab8:	4619      	mov	r1, r3
 800aaba:	f7fc f935 	bl	8006d28 <USBD_LL_DataOutStage>
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b082      	sub	sp, #8
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	460b      	mov	r3, r1
 800aad0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aad8:	78fa      	ldrb	r2, [r7, #3]
 800aada:	6879      	ldr	r1, [r7, #4]
 800aadc:	4613      	mov	r3, r2
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4413      	add	r3, r2
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	440b      	add	r3, r1
 800aae6:	333c      	adds	r3, #60	; 0x3c
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	4619      	mov	r1, r3
 800aaee:	f7fc f98c 	bl	8006e0a <USBD_LL_DataInStage>
}
 800aaf2:	bf00      	nop
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b082      	sub	sp, #8
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fc fa9c 	bl	8007046 <USBD_LL_SOF>
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d001      	beq.n	800ab2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab2a:	f7f5 fd5b 	bl	80005e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab34:	7bfa      	ldrb	r2, [r7, #15]
 800ab36:	4611      	mov	r1, r2
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fc fa4c 	bl	8006fd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fc fa05 	bl	8006f54 <USBD_LL_Reset>
}
 800ab4a:	bf00      	nop
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fc fa46 	bl	8006ff4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab70:	4b04      	ldr	r3, [pc, #16]	; (800ab84 <HAL_PCD_SuspendCallback+0x30>)
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	4a03      	ldr	r2, [pc, #12]	; (800ab84 <HAL_PCD_SuspendCallback+0x30>)
 800ab76:	f043 0306 	orr.w	r3, r3, #6
 800ab7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	e000ed00 	.word	0xe000ed00

0800ab88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fc fa40 	bl	800701c <USBD_LL_Resume>
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800abac:	4a28      	ldr	r2, [pc, #160]	; (800ac50 <USBD_LL_Init+0xac>)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a26      	ldr	r2, [pc, #152]	; (800ac50 <USBD_LL_Init+0xac>)
 800abb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800abbc:	4b24      	ldr	r3, [pc, #144]	; (800ac50 <USBD_LL_Init+0xac>)
 800abbe:	4a25      	ldr	r2, [pc, #148]	; (800ac54 <USBD_LL_Init+0xb0>)
 800abc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800abc2:	4b23      	ldr	r3, [pc, #140]	; (800ac50 <USBD_LL_Init+0xac>)
 800abc4:	2208      	movs	r2, #8
 800abc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800abc8:	4b21      	ldr	r3, [pc, #132]	; (800ac50 <USBD_LL_Init+0xac>)
 800abca:	2202      	movs	r2, #2
 800abcc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800abce:	4b20      	ldr	r3, [pc, #128]	; (800ac50 <USBD_LL_Init+0xac>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800abd4:	4b1e      	ldr	r3, [pc, #120]	; (800ac50 <USBD_LL_Init+0xac>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800abda:	4b1d      	ldr	r3, [pc, #116]	; (800ac50 <USBD_LL_Init+0xac>)
 800abdc:	2200      	movs	r2, #0
 800abde:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800abe0:	481b      	ldr	r0, [pc, #108]	; (800ac50 <USBD_LL_Init+0xac>)
 800abe2:	f7f6 fa2f 	bl	8001044 <HAL_PCD_Init>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800abec:	f7f5 fcfa 	bl	80005e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abf6:	2318      	movs	r3, #24
 800abf8:	2200      	movs	r2, #0
 800abfa:	2100      	movs	r1, #0
 800abfc:	f7f7 fd63 	bl	80026c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac06:	2358      	movs	r3, #88	; 0x58
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2180      	movs	r1, #128	; 0x80
 800ac0c:	f7f7 fd5b 	bl	80026c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac16:	23c0      	movs	r3, #192	; 0xc0
 800ac18:	2200      	movs	r2, #0
 800ac1a:	2181      	movs	r1, #129	; 0x81
 800ac1c:	f7f7 fd53 	bl	80026c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac26:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	2101      	movs	r1, #1
 800ac2e:	f7f7 fd4a 	bl	80026c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	2182      	movs	r1, #130	; 0x82
 800ac40:	f7f7 fd41 	bl	80026c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	20003c44 	.word	0x20003c44
 800ac54:	40005c00 	.word	0x40005c00

0800ac58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac64:	2300      	movs	r3, #0
 800ac66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7f6 faf3 	bl	800125a <HAL_PCD_Start>
 800ac74:	4603      	mov	r3, r0
 800ac76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 f94e 	bl	800af1c <USBD_Get_USB_Status>
 800ac80:	4603      	mov	r3, r0
 800ac82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	4608      	mov	r0, r1
 800ac98:	4611      	mov	r1, r2
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	70fb      	strb	r3, [r7, #3]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70bb      	strb	r3, [r7, #2]
 800aca4:	4613      	mov	r3, r2
 800aca6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acb6:	78bb      	ldrb	r3, [r7, #2]
 800acb8:	883a      	ldrh	r2, [r7, #0]
 800acba:	78f9      	ldrb	r1, [r7, #3]
 800acbc:	f7f6 fc6d 	bl	800159a <HAL_PCD_EP_Open>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 f928 	bl	800af1c <USBD_Get_USB_Status>
 800accc:	4603      	mov	r3, r0
 800acce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	460b      	mov	r3, r1
 800ace4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acf4:	78fa      	ldrb	r2, [r7, #3]
 800acf6:	4611      	mov	r1, r2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7f6 fcb4 	bl	8001666 <HAL_PCD_EP_Close>
 800acfe:	4603      	mov	r3, r0
 800ad00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad02:	7bfb      	ldrb	r3, [r7, #15]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 f909 	bl	800af1c <USBD_Get_USB_Status>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad32:	78fa      	ldrb	r2, [r7, #3]
 800ad34:	4611      	mov	r1, r2
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f6 fd74 	bl	8001824 <HAL_PCD_EP_SetStall>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 f8ea 	bl	800af1c <USBD_Get_USB_Status>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	460b      	mov	r3, r1
 800ad60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad62:	2300      	movs	r3, #0
 800ad64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad66:	2300      	movs	r3, #0
 800ad68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad70:	78fa      	ldrb	r2, [r7, #3]
 800ad72:	4611      	mov	r1, r2
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7f6 fdb5 	bl	80018e4 <HAL_PCD_EP_ClrStall>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 f8cb 	bl	800af1c <USBD_Get_USB_Status>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ada6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ada8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adac:	2b00      	cmp	r3, #0
 800adae:	da0c      	bge.n	800adca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adb6:	68f9      	ldr	r1, [r7, #12]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	4613      	mov	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4413      	add	r3, r2
 800adc0:	00db      	lsls	r3, r3, #3
 800adc2:	440b      	add	r3, r1
 800adc4:	3302      	adds	r3, #2
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	e00b      	b.n	800ade2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800adca:	78fb      	ldrb	r3, [r7, #3]
 800adcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800add0:	68f9      	ldr	r1, [r7, #12]
 800add2:	4613      	mov	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	00db      	lsls	r3, r3, #3
 800adda:	440b      	add	r3, r1
 800addc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ade0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bc80      	pop	{r7}
 800adea:	4770      	bx	lr

0800adec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae06:	78fa      	ldrb	r2, [r7, #3]
 800ae08:	4611      	mov	r1, r2
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7f6 fba0 	bl	8001550 <HAL_PCD_SetAddress>
 800ae10:	4603      	mov	r3, r0
 800ae12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 f880 	bl	800af1c <USBD_Get_USB_Status>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b086      	sub	sp, #24
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	461a      	mov	r2, r3
 800ae36:	460b      	mov	r3, r1
 800ae38:	72fb      	strb	r3, [r7, #11]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae4c:	893b      	ldrh	r3, [r7, #8]
 800ae4e:	7af9      	ldrb	r1, [r7, #11]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	f7f6 fca4 	bl	800179e <HAL_PCD_EP_Transmit>
 800ae56:	4603      	mov	r3, r0
 800ae58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f000 f85d 	bl	800af1c <USBD_Get_USB_Status>
 800ae62:	4603      	mov	r3, r0
 800ae64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae66:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3718      	adds	r7, #24
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	607a      	str	r2, [r7, #4]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	72fb      	strb	r3, [r7, #11]
 800ae80:	4613      	mov	r3, r2
 800ae82:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae92:	893b      	ldrh	r3, [r7, #8]
 800ae94:	7af9      	ldrb	r1, [r7, #11]
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	f7f6 fc2d 	bl	80016f6 <HAL_PCD_EP_Receive>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aea0:	7dfb      	ldrb	r3, [r7, #23]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 f83a 	bl	800af1c <USBD_Get_USB_Status>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aeac:	7dbb      	ldrb	r3, [r7, #22]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3718      	adds	r7, #24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	460b      	mov	r3, r1
 800aec0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aec8:	78fa      	ldrb	r2, [r7, #3]
 800aeca:	4611      	mov	r1, r2
 800aecc:	4618      	mov	r0, r3
 800aece:	f7f6 fc4f 	bl	8001770 <HAL_PCD_EP_GetRxCount>
 800aed2:	4603      	mov	r3, r0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aee4:	4b02      	ldr	r3, [pc, #8]	; (800aef0 <USBD_static_malloc+0x14>)
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bc80      	pop	{r7}
 800aeee:	4770      	bx	lr
 800aef0:	20002e1c 	.word	0x20002e1c

0800aef4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]

}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	bc80      	pop	{r7}
 800af04:	4770      	bx	lr

0800af06 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af06:	b480      	push	{r7}
 800af08:	b083      	sub	sp, #12
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	460b      	mov	r3, r1
 800af10:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800af12:	bf00      	nop
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	bc80      	pop	{r7}
 800af1a:	4770      	bx	lr

0800af1c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	4603      	mov	r3, r0
 800af24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af2a:	79fb      	ldrb	r3, [r7, #7]
 800af2c:	2b03      	cmp	r3, #3
 800af2e:	d817      	bhi.n	800af60 <USBD_Get_USB_Status+0x44>
 800af30:	a201      	add	r2, pc, #4	; (adr r2, 800af38 <USBD_Get_USB_Status+0x1c>)
 800af32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af36:	bf00      	nop
 800af38:	0800af49 	.word	0x0800af49
 800af3c:	0800af4f 	.word	0x0800af4f
 800af40:	0800af55 	.word	0x0800af55
 800af44:	0800af5b 	.word	0x0800af5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	73fb      	strb	r3, [r7, #15]
    break;
 800af4c:	e00b      	b.n	800af66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af4e:	2302      	movs	r3, #2
 800af50:	73fb      	strb	r3, [r7, #15]
    break;
 800af52:	e008      	b.n	800af66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af54:	2301      	movs	r3, #1
 800af56:	73fb      	strb	r3, [r7, #15]
    break;
 800af58:	e005      	b.n	800af66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af5a:	2302      	movs	r3, #2
 800af5c:	73fb      	strb	r3, [r7, #15]
    break;
 800af5e:	e002      	b.n	800af66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af60:	2302      	movs	r3, #2
 800af62:	73fb      	strb	r3, [r7, #15]
    break;
 800af64:	bf00      	nop
  }
  return usb_status;
 800af66:	7bfb      	ldrb	r3, [r7, #15]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bc80      	pop	{r7}
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop

0800af74 <EEPROM_SPI_INIT>:
/**
 * @brief Init EEPROM SPI
 *
 * @param hspi Pointer to SPI struct handler
 */
void EEPROM_SPI_INIT(SPI_HandleTypeDef * hspi) {
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
    EEPROM_SPI = hspi;
 800af7c:	4a03      	ldr	r2, [pc, #12]	; (800af8c <EEPROM_SPI_INIT+0x18>)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6013      	str	r3, [r2, #0]
}
 800af82:	bf00      	nop
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	bc80      	pop	{r7}
 800af8a:	4770      	bx	lr
 800af8c:	20003f30 	.word	0x20003f30

0800af90 <EEPROM_SPI_WritePage>:
  * @param  WriteAddr: EEPROM's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the EEPROM, must be equal
  *         or less than "EEPROM_PAGESIZE" value.
  * @retval EepromOperations value: EEPROM_STATUS_COMPLETE or EEPROM_STATUS_ERROR
  */
EepromOperations EEPROM_SPI_WritePage(uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite) {
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	460b      	mov	r3, r1
 800af9a:	807b      	strh	r3, [r7, #2]
 800af9c:	4613      	mov	r3, r2
 800af9e:	803b      	strh	r3, [r7, #0]
    while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 800afa0:	e002      	b.n	800afa8 <EEPROM_SPI_WritePage+0x18>
        osDelay(1);
 800afa2:	2001      	movs	r0, #1
 800afa4:	f7fc ff86 	bl	8007eb4 <osDelay>
    while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 800afa8:	4b25      	ldr	r3, [pc, #148]	; (800b040 <EEPROM_SPI_WritePage+0xb0>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d1f5      	bne.n	800afa2 <EEPROM_SPI_WritePage+0x12>
    }

    HAL_StatusTypeDef spiTransmitStatus;

    sEE_WriteEnable();
 800afb6:	f000 f981 	bl	800b2bc <sEE_WriteEnable>
    /*
        We gonna send commands in one packet of 3 bytes
     */
    uint8_t header[3];

    header[0] = EEPROM_WRITE;   // Send "Write to Memory" instruction
 800afba:	2302      	movs	r3, #2
 800afbc:	723b      	strb	r3, [r7, #8]
    header[1] = WriteAddr >> 8; // Send 16-bit address
 800afbe:	887b      	ldrh	r3, [r7, #2]
 800afc0:	0a1b      	lsrs	r3, r3, #8
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	727b      	strb	r3, [r7, #9]
    header[2] = WriteAddr;
 800afc8:	887b      	ldrh	r3, [r7, #2]
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	72bb      	strb	r3, [r7, #10]

    // Select the EEPROM: Chip Select low
    EEPROM_CS_LOW();
 800afce:	2200      	movs	r2, #0
 800afd0:	2101      	movs	r1, #1
 800afd2:	481c      	ldr	r0, [pc, #112]	; (800b044 <EEPROM_SPI_WritePage+0xb4>)
 800afd4:	f7f6 f805 	bl	8000fe2 <HAL_GPIO_WritePin>

    EEPROM_SPI_SendInstruction((uint8_t*)header, 3);
 800afd8:	f107 0308 	add.w	r3, r7, #8
 800afdc:	2103      	movs	r1, #3
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 f9d6 	bl	800b390 <EEPROM_SPI_SendInstruction>

    // Make 5 attemtps to write the data
    for (uint8_t i = 0; i < 5; i++) {
 800afe4:	2300      	movs	r3, #0
 800afe6:	73bb      	strb	r3, [r7, #14]
 800afe8:	e011      	b.n	800b00e <EEPROM_SPI_WritePage+0x7e>
        spiTransmitStatus = HAL_SPI_Transmit(EEPROM_SPI, pBuffer, NumByteToWrite, 100);
 800afea:	4b15      	ldr	r3, [pc, #84]	; (800b040 <EEPROM_SPI_WritePage+0xb0>)
 800afec:	6818      	ldr	r0, [r3, #0]
 800afee:	883a      	ldrh	r2, [r7, #0]
 800aff0:	2364      	movs	r3, #100	; 0x64
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	f7f8 fb0b 	bl	800360e <HAL_SPI_Transmit>
 800aff8:	4603      	mov	r3, r0
 800affa:	73fb      	strb	r3, [r7, #15]

        if (spiTransmitStatus == HAL_BUSY) {
 800affc:	7bfb      	ldrb	r3, [r7, #15]
 800affe:	2b02      	cmp	r3, #2
 800b000:	d109      	bne.n	800b016 <EEPROM_SPI_WritePage+0x86>
            osDelay(5);
 800b002:	2005      	movs	r0, #5
 800b004:	f7fc ff56 	bl	8007eb4 <osDelay>
    for (uint8_t i = 0; i < 5; i++) {
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	3301      	adds	r3, #1
 800b00c:	73bb      	strb	r3, [r7, #14]
 800b00e:	7bbb      	ldrb	r3, [r7, #14]
 800b010:	2b04      	cmp	r3, #4
 800b012:	d9ea      	bls.n	800afea <EEPROM_SPI_WritePage+0x5a>
 800b014:	e000      	b.n	800b018 <EEPROM_SPI_WritePage+0x88>
        } else {
            break;
 800b016:	bf00      	nop
        }
    }

    // Deselect the EEPROM: Chip Select high
    EEPROM_CS_HIGH();
 800b018:	2201      	movs	r2, #1
 800b01a:	2101      	movs	r1, #1
 800b01c:	4809      	ldr	r0, [pc, #36]	; (800b044 <EEPROM_SPI_WritePage+0xb4>)
 800b01e:	f7f5 ffe0 	bl	8000fe2 <HAL_GPIO_WritePin>

    // Wait the end of EEPROM writing
    EEPROM_SPI_WaitStandbyState();
 800b022:	f000 f97f 	bl	800b324 <EEPROM_SPI_WaitStandbyState>

    // Disable the write access to the EEPROM
    sEE_WriteDisable();
 800b026:	f000 f963 	bl	800b2f0 <sEE_WriteDisable>

    if (spiTransmitStatus == HAL_ERROR) {
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d101      	bne.n	800b034 <EEPROM_SPI_WritePage+0xa4>
        return EEPROM_STATUS_ERROR;
 800b030:	2302      	movs	r3, #2
 800b032:	e000      	b.n	800b036 <EEPROM_SPI_WritePage+0xa6>
    } else {
        return EEPROM_STATUS_COMPLETE;
 800b034:	2301      	movs	r3, #1
    }
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	20003f30 	.word	0x20003f30
 800b044:	40010c00 	.word	0x40010c00

0800b048 <EEPROM_SPI_WriteBuffer>:
  *         to the EEPROM.
  * @param  WriteAddr: EEPROM's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the EEPROM.
  * @retval EepromOperations value: EEPROM_STATUS_COMPLETE or EEPROM_STATUS_ERROR
  */
EepromOperations EEPROM_SPI_WriteBuffer(uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite) {
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	807b      	strh	r3, [r7, #2]
 800b054:	4613      	mov	r3, r2
 800b056:	803b      	strh	r3, [r7, #0]
    uint16_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 800b058:	2300      	movs	r3, #0
 800b05a:	82fb      	strh	r3, [r7, #22]
 800b05c:	2300      	movs	r3, #0
 800b05e:	827b      	strh	r3, [r7, #18]
 800b060:	2300      	movs	r3, #0
 800b062:	823b      	strh	r3, [r7, #16]
 800b064:	2300      	movs	r3, #0
 800b066:	81fb      	strh	r3, [r7, #14]
 800b068:	2300      	movs	r3, #0
 800b06a:	81bb      	strh	r3, [r7, #12]
    uint16_t sEE_DataNum = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	817b      	strh	r3, [r7, #10]

    EepromOperations pageWriteStatus = EEPROM_STATUS_PENDING;
 800b070:	2300      	movs	r3, #0
 800b072:	757b      	strb	r3, [r7, #21]

    Addr = WriteAddr % EEPROM_PAGESIZE;
 800b074:	887b      	ldrh	r3, [r7, #2]
 800b076:	f003 031f 	and.w	r3, r3, #31
 800b07a:	823b      	strh	r3, [r7, #16]
    count = EEPROM_PAGESIZE - Addr;
 800b07c:	8a3b      	ldrh	r3, [r7, #16]
 800b07e:	f1c3 0320 	rsb	r3, r3, #32
 800b082:	81fb      	strh	r3, [r7, #14]
    NumOfPage =  NumByteToWrite / EEPROM_PAGESIZE;
 800b084:	883b      	ldrh	r3, [r7, #0]
 800b086:	095b      	lsrs	r3, r3, #5
 800b088:	82fb      	strh	r3, [r7, #22]
    NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 800b08a:	883b      	ldrh	r3, [r7, #0]
 800b08c:	f003 031f 	and.w	r3, r3, #31
 800b090:	827b      	strh	r3, [r7, #18]

    if (Addr == 0) { /* WriteAddr is EEPROM_PAGESIZE aligned  */
 800b092:	8a3b      	ldrh	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d13c      	bne.n	800b112 <EEPROM_SPI_WriteBuffer+0xca>
        if (NumOfPage == 0) { /* NumByteToWrite < EEPROM_PAGESIZE */
 800b098:	8afb      	ldrh	r3, [r7, #22]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d124      	bne.n	800b0e8 <EEPROM_SPI_WriteBuffer+0xa0>
            sEE_DataNum = NumByteToWrite;
 800b09e:	883b      	ldrh	r3, [r7, #0]
 800b0a0:	817b      	strh	r3, [r7, #10]
            pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800b0a2:	897a      	ldrh	r2, [r7, #10]
 800b0a4:	887b      	ldrh	r3, [r7, #2]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff ff71 	bl	800af90 <EEPROM_SPI_WritePage>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	757b      	strb	r3, [r7, #21]

            if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800b0b2:	7d7b      	ldrb	r3, [r7, #21]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	f000 80b7 	beq.w	800b228 <EEPROM_SPI_WriteBuffer+0x1e0>
                return pageWriteStatus;
 800b0ba:	7d7b      	ldrb	r3, [r7, #21]
 800b0bc:	e0b5      	b.n	800b22a <EEPROM_SPI_WriteBuffer+0x1e2>
            }

        } else { /* NumByteToWrite > EEPROM_PAGESIZE */
            while (NumOfPage--) {
                sEE_DataNum = EEPROM_PAGESIZE;
 800b0be:	2320      	movs	r3, #32
 800b0c0:	817b      	strh	r3, [r7, #10]
                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800b0c2:	897a      	ldrh	r2, [r7, #10]
 800b0c4:	887b      	ldrh	r3, [r7, #2]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff ff61 	bl	800af90 <EEPROM_SPI_WritePage>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	757b      	strb	r3, [r7, #21]

                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800b0d2:	7d7b      	ldrb	r3, [r7, #21]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d001      	beq.n	800b0dc <EEPROM_SPI_WriteBuffer+0x94>
                    return pageWriteStatus;
 800b0d8:	7d7b      	ldrb	r3, [r7, #21]
 800b0da:	e0a6      	b.n	800b22a <EEPROM_SPI_WriteBuffer+0x1e2>
                }

                WriteAddr +=  EEPROM_PAGESIZE;
 800b0dc:	887b      	ldrh	r3, [r7, #2]
 800b0de:	3320      	adds	r3, #32
 800b0e0:	807b      	strh	r3, [r7, #2]
                pBuffer += EEPROM_PAGESIZE;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	3320      	adds	r3, #32
 800b0e6:	607b      	str	r3, [r7, #4]
            while (NumOfPage--) {
 800b0e8:	8afb      	ldrh	r3, [r7, #22]
 800b0ea:	1e5a      	subs	r2, r3, #1
 800b0ec:	82fa      	strh	r2, [r7, #22]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1e5      	bne.n	800b0be <EEPROM_SPI_WriteBuffer+0x76>
            }

            sEE_DataNum = NumOfSingle;
 800b0f2:	8a7b      	ldrh	r3, [r7, #18]
 800b0f4:	817b      	strh	r3, [r7, #10]
            pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800b0f6:	897a      	ldrh	r2, [r7, #10]
 800b0f8:	887b      	ldrh	r3, [r7, #2]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff ff47 	bl	800af90 <EEPROM_SPI_WritePage>
 800b102:	4603      	mov	r3, r0
 800b104:	757b      	strb	r3, [r7, #21]

            if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800b106:	7d7b      	ldrb	r3, [r7, #21]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	f000 808d 	beq.w	800b228 <EEPROM_SPI_WriteBuffer+0x1e0>
                return pageWriteStatus;
 800b10e:	7d7b      	ldrb	r3, [r7, #21]
 800b110:	e08b      	b.n	800b22a <EEPROM_SPI_WriteBuffer+0x1e2>
            }
        }
    } else { /* WriteAddr is not EEPROM_PAGESIZE aligned  */
        if (NumOfPage == 0) { /* NumByteToWrite < EEPROM_PAGESIZE */
 800b112:	8afb      	ldrh	r3, [r7, #22]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d138      	bne.n	800b18a <EEPROM_SPI_WriteBuffer+0x142>
            if (NumOfSingle > count) { /* (NumByteToWrite + WriteAddr) > EEPROM_PAGESIZE */
 800b118:	8a7a      	ldrh	r2, [r7, #18]
 800b11a:	89fb      	ldrh	r3, [r7, #14]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d925      	bls.n	800b16c <EEPROM_SPI_WriteBuffer+0x124>
                temp = NumOfSingle - count;
 800b120:	8a7a      	ldrh	r2, [r7, #18]
 800b122:	89fb      	ldrh	r3, [r7, #14]
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	81bb      	strh	r3, [r7, #12]
                sEE_DataNum = count;
 800b128:	89fb      	ldrh	r3, [r7, #14]
 800b12a:	817b      	strh	r3, [r7, #10]
                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800b12c:	897a      	ldrh	r2, [r7, #10]
 800b12e:	887b      	ldrh	r3, [r7, #2]
 800b130:	4619      	mov	r1, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7ff ff2c 	bl	800af90 <EEPROM_SPI_WritePage>
 800b138:	4603      	mov	r3, r0
 800b13a:	757b      	strb	r3, [r7, #21]

                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800b13c:	7d7b      	ldrb	r3, [r7, #21]
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d001      	beq.n	800b146 <EEPROM_SPI_WriteBuffer+0xfe>
                    return pageWriteStatus;
 800b142:	7d7b      	ldrb	r3, [r7, #21]
 800b144:	e071      	b.n	800b22a <EEPROM_SPI_WriteBuffer+0x1e2>
                }

                WriteAddr +=  count;
 800b146:	887a      	ldrh	r2, [r7, #2]
 800b148:	89fb      	ldrh	r3, [r7, #14]
 800b14a:	4413      	add	r3, r2
 800b14c:	807b      	strh	r3, [r7, #2]
                pBuffer += count;
 800b14e:	89fb      	ldrh	r3, [r7, #14]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	4413      	add	r3, r2
 800b154:	607b      	str	r3, [r7, #4]

                sEE_DataNum = temp;
 800b156:	89bb      	ldrh	r3, [r7, #12]
 800b158:	817b      	strh	r3, [r7, #10]
                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800b15a:	897a      	ldrh	r2, [r7, #10]
 800b15c:	887b      	ldrh	r3, [r7, #2]
 800b15e:	4619      	mov	r1, r3
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff ff15 	bl	800af90 <EEPROM_SPI_WritePage>
 800b166:	4603      	mov	r3, r0
 800b168:	757b      	strb	r3, [r7, #21]
 800b16a:	e009      	b.n	800b180 <EEPROM_SPI_WriteBuffer+0x138>
            } else {
                sEE_DataNum = NumByteToWrite;
 800b16c:	883b      	ldrh	r3, [r7, #0]
 800b16e:	817b      	strh	r3, [r7, #10]
                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800b170:	897a      	ldrh	r2, [r7, #10]
 800b172:	887b      	ldrh	r3, [r7, #2]
 800b174:	4619      	mov	r1, r3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7ff ff0a 	bl	800af90 <EEPROM_SPI_WritePage>
 800b17c:	4603      	mov	r3, r0
 800b17e:	757b      	strb	r3, [r7, #21]
            }

            if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800b180:	7d7b      	ldrb	r3, [r7, #21]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d050      	beq.n	800b228 <EEPROM_SPI_WriteBuffer+0x1e0>
                return pageWriteStatus;
 800b186:	7d7b      	ldrb	r3, [r7, #21]
 800b188:	e04f      	b.n	800b22a <EEPROM_SPI_WriteBuffer+0x1e2>
            }
        } else { /* NumByteToWrite > EEPROM_PAGESIZE */
            NumByteToWrite -= count;
 800b18a:	883a      	ldrh	r2, [r7, #0]
 800b18c:	89fb      	ldrh	r3, [r7, #14]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	803b      	strh	r3, [r7, #0]
            NumOfPage =  NumByteToWrite / EEPROM_PAGESIZE;
 800b192:	883b      	ldrh	r3, [r7, #0]
 800b194:	095b      	lsrs	r3, r3, #5
 800b196:	82fb      	strh	r3, [r7, #22]
            NumOfSingle = NumByteToWrite % EEPROM_PAGESIZE;
 800b198:	883b      	ldrh	r3, [r7, #0]
 800b19a:	f003 031f 	and.w	r3, r3, #31
 800b19e:	827b      	strh	r3, [r7, #18]

            sEE_DataNum = count;
 800b1a0:	89fb      	ldrh	r3, [r7, #14]
 800b1a2:	817b      	strh	r3, [r7, #10]

            pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800b1a4:	897a      	ldrh	r2, [r7, #10]
 800b1a6:	887b      	ldrh	r3, [r7, #2]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7ff fef0 	bl	800af90 <EEPROM_SPI_WritePage>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	757b      	strb	r3, [r7, #21]

            if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800b1b4:	7d7b      	ldrb	r3, [r7, #21]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d001      	beq.n	800b1be <EEPROM_SPI_WriteBuffer+0x176>
                return pageWriteStatus;
 800b1ba:	7d7b      	ldrb	r3, [r7, #21]
 800b1bc:	e035      	b.n	800b22a <EEPROM_SPI_WriteBuffer+0x1e2>
            }

            WriteAddr +=  count;
 800b1be:	887a      	ldrh	r2, [r7, #2]
 800b1c0:	89fb      	ldrh	r3, [r7, #14]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	807b      	strh	r3, [r7, #2]
            pBuffer += count;
 800b1c6:	89fb      	ldrh	r3, [r7, #14]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	607b      	str	r3, [r7, #4]

            while (NumOfPage--) {
 800b1ce:	e014      	b.n	800b1fa <EEPROM_SPI_WriteBuffer+0x1b2>
                sEE_DataNum = EEPROM_PAGESIZE;
 800b1d0:	2320      	movs	r3, #32
 800b1d2:	817b      	strh	r3, [r7, #10]

                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800b1d4:	897a      	ldrh	r2, [r7, #10]
 800b1d6:	887b      	ldrh	r3, [r7, #2]
 800b1d8:	4619      	mov	r1, r3
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7ff fed8 	bl	800af90 <EEPROM_SPI_WritePage>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	757b      	strb	r3, [r7, #21]

                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800b1e4:	7d7b      	ldrb	r3, [r7, #21]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d001      	beq.n	800b1ee <EEPROM_SPI_WriteBuffer+0x1a6>
                    return pageWriteStatus;
 800b1ea:	7d7b      	ldrb	r3, [r7, #21]
 800b1ec:	e01d      	b.n	800b22a <EEPROM_SPI_WriteBuffer+0x1e2>
                }

                WriteAddr +=  EEPROM_PAGESIZE;
 800b1ee:	887b      	ldrh	r3, [r7, #2]
 800b1f0:	3320      	adds	r3, #32
 800b1f2:	807b      	strh	r3, [r7, #2]
                pBuffer += EEPROM_PAGESIZE;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	3320      	adds	r3, #32
 800b1f8:	607b      	str	r3, [r7, #4]
            while (NumOfPage--) {
 800b1fa:	8afb      	ldrh	r3, [r7, #22]
 800b1fc:	1e5a      	subs	r2, r3, #1
 800b1fe:	82fa      	strh	r2, [r7, #22]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1e5      	bne.n	800b1d0 <EEPROM_SPI_WriteBuffer+0x188>
            }

            if (NumOfSingle != 0) {
 800b204:	8a7b      	ldrh	r3, [r7, #18]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00e      	beq.n	800b228 <EEPROM_SPI_WriteBuffer+0x1e0>
                sEE_DataNum = NumOfSingle;
 800b20a:	8a7b      	ldrh	r3, [r7, #18]
 800b20c:	817b      	strh	r3, [r7, #10]

                pageWriteStatus = EEPROM_SPI_WritePage(pBuffer, WriteAddr, sEE_DataNum);
 800b20e:	897a      	ldrh	r2, [r7, #10]
 800b210:	887b      	ldrh	r3, [r7, #2]
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff febb 	bl	800af90 <EEPROM_SPI_WritePage>
 800b21a:	4603      	mov	r3, r0
 800b21c:	757b      	strb	r3, [r7, #21]

                if (pageWriteStatus != EEPROM_STATUS_COMPLETE) {
 800b21e:	7d7b      	ldrb	r3, [r7, #21]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d001      	beq.n	800b228 <EEPROM_SPI_WriteBuffer+0x1e0>
                    return pageWriteStatus;
 800b224:	7d7b      	ldrb	r3, [r7, #21]
 800b226:	e000      	b.n	800b22a <EEPROM_SPI_WriteBuffer+0x1e2>
                }
            }
        }
    }

    return EEPROM_STATUS_COMPLETE;
 800b228:	2301      	movs	r3, #1
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3718      	adds	r7, #24
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
	...

0800b234 <EEPROM_SPI_ReadBuffer>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the EEPROM.
  * @param  ReadAddr: EEPROM's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the EEPROM.
  * @retval None
  */
EepromOperations EEPROM_SPI_ReadBuffer(uint8_t* pBuffer, uint16_t ReadAddr, uint16_t NumByteToRead) {
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	807b      	strh	r3, [r7, #2]
 800b240:	4613      	mov	r3, r2
 800b242:	803b      	strh	r3, [r7, #0]
    while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 800b244:	e002      	b.n	800b24c <EEPROM_SPI_ReadBuffer+0x18>
        osDelay(1);
 800b246:	2001      	movs	r0, #1
 800b248:	f7fc fe34 	bl	8007eb4 <osDelay>
    while (EEPROM_SPI->State != HAL_SPI_STATE_READY) {
 800b24c:	4b19      	ldr	r3, [pc, #100]	; (800b2b4 <EEPROM_SPI_ReadBuffer+0x80>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b254:	b2db      	uxtb	r3, r3
 800b256:	2b01      	cmp	r3, #1
 800b258:	d1f5      	bne.n	800b246 <EEPROM_SPI_ReadBuffer+0x12>
        We gonna send all commands in one packet of 3 bytes
     */

    uint8_t header[3];

    header[0] = EEPROM_READ;    // Send "Read from Memory" instruction
 800b25a:	2303      	movs	r3, #3
 800b25c:	733b      	strb	r3, [r7, #12]
    header[1] = ReadAddr >> 8;  // Send 16-bit address
 800b25e:	887b      	ldrh	r3, [r7, #2]
 800b260:	0a1b      	lsrs	r3, r3, #8
 800b262:	b29b      	uxth	r3, r3
 800b264:	b2db      	uxtb	r3, r3
 800b266:	737b      	strb	r3, [r7, #13]
    header[2] = ReadAddr;
 800b268:	887b      	ldrh	r3, [r7, #2]
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	73bb      	strb	r3, [r7, #14]

    // Select the EEPROM: Chip Select low
    EEPROM_CS_LOW();
 800b26e:	2200      	movs	r2, #0
 800b270:	2101      	movs	r1, #1
 800b272:	4811      	ldr	r0, [pc, #68]	; (800b2b8 <EEPROM_SPI_ReadBuffer+0x84>)
 800b274:	f7f5 feb5 	bl	8000fe2 <HAL_GPIO_WritePin>

    /* Send WriteAddr address byte to read from */
    EEPROM_SPI_SendInstruction(header, 3);
 800b278:	f107 030c 	add.w	r3, r7, #12
 800b27c:	2103      	movs	r1, #3
 800b27e:	4618      	mov	r0, r3
 800b280:	f000 f886 	bl	800b390 <EEPROM_SPI_SendInstruction>

    while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)pBuffer, NumByteToRead, 200) == HAL_BUSY) {
 800b284:	e002      	b.n	800b28c <EEPROM_SPI_ReadBuffer+0x58>
        osDelay(1);
 800b286:	2001      	movs	r0, #1
 800b288:	f7fc fe14 	bl	8007eb4 <osDelay>
    while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)pBuffer, NumByteToRead, 200) == HAL_BUSY) {
 800b28c:	4b09      	ldr	r3, [pc, #36]	; (800b2b4 <EEPROM_SPI_ReadBuffer+0x80>)
 800b28e:	6818      	ldr	r0, [r3, #0]
 800b290:	883a      	ldrh	r2, [r7, #0]
 800b292:	23c8      	movs	r3, #200	; 0xc8
 800b294:	6879      	ldr	r1, [r7, #4]
 800b296:	f7f8 faf6 	bl	8003886 <HAL_SPI_Receive>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d0f2      	beq.n	800b286 <EEPROM_SPI_ReadBuffer+0x52>
    };

    // Deselect the EEPROM: Chip Select high
    EEPROM_CS_HIGH();
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	2101      	movs	r1, #1
 800b2a4:	4804      	ldr	r0, [pc, #16]	; (800b2b8 <EEPROM_SPI_ReadBuffer+0x84>)
 800b2a6:	f7f5 fe9c 	bl	8000fe2 <HAL_GPIO_WritePin>

    return EEPROM_STATUS_COMPLETE;
 800b2aa:	2301      	movs	r3, #1
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	20003f30 	.word	0x20003f30
 800b2b8:	40010c00 	.word	0x40010c00

0800b2bc <sEE_WriteEnable>:
  * @brief  Enables the write access to the EEPROM.
  *
  * @param  None
  * @retval None
  */
void sEE_WriteEnable(void) {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
    // Select the EEPROM: Chip Select low
    EEPROM_CS_LOW();
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	4809      	ldr	r0, [pc, #36]	; (800b2ec <sEE_WriteEnable+0x30>)
 800b2c8:	f7f5 fe8b 	bl	8000fe2 <HAL_GPIO_WritePin>

    uint8_t command[1] = { EEPROM_WREN };
 800b2cc:	2306      	movs	r3, #6
 800b2ce:	713b      	strb	r3, [r7, #4]
    /* Send "Write Enable" instruction */
    EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 800b2d0:	1d3b      	adds	r3, r7, #4
 800b2d2:	2101      	movs	r1, #1
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f000 f85b 	bl	800b390 <EEPROM_SPI_SendInstruction>

    // Deselect the EEPROM: Chip Select high
    EEPROM_CS_HIGH();
 800b2da:	2201      	movs	r2, #1
 800b2dc:	2101      	movs	r1, #1
 800b2de:	4803      	ldr	r0, [pc, #12]	; (800b2ec <sEE_WriteEnable+0x30>)
 800b2e0:	f7f5 fe7f 	bl	8000fe2 <HAL_GPIO_WritePin>
}
 800b2e4:	bf00      	nop
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	40010c00 	.word	0x40010c00

0800b2f0 <sEE_WriteDisable>:
  * @brief  Disables the write access to the EEPROM.
  *
  * @param  None
  * @retval None
  */
void sEE_WriteDisable(void) {
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
    // Select the EEPROM: Chip Select low
    EEPROM_CS_LOW();
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	4809      	ldr	r0, [pc, #36]	; (800b320 <sEE_WriteDisable+0x30>)
 800b2fc:	f7f5 fe71 	bl	8000fe2 <HAL_GPIO_WritePin>

    uint8_t command[1] = { EEPROM_WRDI };
 800b300:	2304      	movs	r3, #4
 800b302:	713b      	strb	r3, [r7, #4]

    /* Send "Write Disable" instruction */
    EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 800b304:	1d3b      	adds	r3, r7, #4
 800b306:	2101      	movs	r1, #1
 800b308:	4618      	mov	r0, r3
 800b30a:	f000 f841 	bl	800b390 <EEPROM_SPI_SendInstruction>

    // Deselect the EEPROM: Chip Select high
    EEPROM_CS_HIGH();
 800b30e:	2201      	movs	r2, #1
 800b310:	2101      	movs	r1, #1
 800b312:	4803      	ldr	r0, [pc, #12]	; (800b320 <sEE_WriteDisable+0x30>)
 800b314:	f7f5 fe65 	bl	8000fe2 <HAL_GPIO_WritePin>
}
 800b318:	bf00      	nop
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	40010c00 	.word	0x40010c00

0800b324 <EEPROM_SPI_WaitStandbyState>:
  *         status register and loop until write operation has completed.
  *
  * @param  None
  * @retval None
  */
uint8_t EEPROM_SPI_WaitStandbyState(void) {
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
    uint8_t sEEstatus[1] = { 0x00 };
 800b32a:	2300      	movs	r3, #0
 800b32c:	713b      	strb	r3, [r7, #4]
    uint8_t command[1] = { EEPROM_RDSR };
 800b32e:	2305      	movs	r3, #5
 800b330:	703b      	strb	r3, [r7, #0]

    // Select the EEPROM: Chip Select low
    EEPROM_CS_LOW();
 800b332:	2200      	movs	r2, #0
 800b334:	2101      	movs	r1, #1
 800b336:	4814      	ldr	r0, [pc, #80]	; (800b388 <EEPROM_SPI_WaitStandbyState+0x64>)
 800b338:	f7f5 fe53 	bl	8000fe2 <HAL_GPIO_WritePin>

    // Send "Read Status Register" instruction
    EEPROM_SPI_SendInstruction((uint8_t*)command, 1);
 800b33c:	463b      	mov	r3, r7
 800b33e:	2101      	movs	r1, #1
 800b340:	4618      	mov	r0, r3
 800b342:	f000 f825 	bl	800b390 <EEPROM_SPI_SendInstruction>

    // Loop as long as the memory is busy with a write cycle
    do {

        while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY) {
 800b346:	e002      	b.n	800b34e <EEPROM_SPI_WaitStandbyState+0x2a>
            osDelay(1);
 800b348:	2001      	movs	r0, #1
 800b34a:	f7fc fdb3 	bl	8007eb4 <osDelay>
        while (HAL_SPI_Receive(EEPROM_SPI, (uint8_t*)sEEstatus, 1, 200) == HAL_BUSY) {
 800b34e:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <EEPROM_SPI_WaitStandbyState+0x68>)
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	1d39      	adds	r1, r7, #4
 800b354:	23c8      	movs	r3, #200	; 0xc8
 800b356:	2201      	movs	r2, #1
 800b358:	f7f8 fa95 	bl	8003886 <HAL_SPI_Receive>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d0f2      	beq.n	800b348 <EEPROM_SPI_WaitStandbyState+0x24>
        };

        osDelay(1);
 800b362:	2001      	movs	r0, #1
 800b364:	f7fc fda6 	bl	8007eb4 <osDelay>

    } while ((sEEstatus[0] & EEPROM_WIP_FLAG) == SET); // Write in progress
 800b368:	793b      	ldrb	r3, [r7, #4]
 800b36a:	f003 0301 	and.w	r3, r3, #1
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1ed      	bne.n	800b34e <EEPROM_SPI_WaitStandbyState+0x2a>

    // Deselect the EEPROM: Chip Select high
    EEPROM_CS_HIGH();
 800b372:	2201      	movs	r2, #1
 800b374:	2101      	movs	r1, #1
 800b376:	4804      	ldr	r0, [pc, #16]	; (800b388 <EEPROM_SPI_WaitStandbyState+0x64>)
 800b378:	f7f5 fe33 	bl	8000fe2 <HAL_GPIO_WritePin>

    return 0;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	40010c00 	.word	0x40010c00
 800b38c:	20003f30 	.word	0x20003f30

0800b390 <EEPROM_SPI_SendInstruction>:
 * @brief Low level function to send header data to EEPROM
 *
 * @param instruction array of bytes to send
 * @param size        data size in bytes
 */
void EEPROM_SPI_SendInstruction(uint8_t *instruction, uint8_t size) {
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	460b      	mov	r3, r1
 800b39a:	70fb      	strb	r3, [r7, #3]
    while (EEPROM_SPI->State == HAL_SPI_STATE_RESET) {
 800b39c:	e002      	b.n	800b3a4 <EEPROM_SPI_SendInstruction+0x14>
        osDelay(1);
 800b39e:	2001      	movs	r0, #1
 800b3a0:	f7fc fd88 	bl	8007eb4 <osDelay>
    while (EEPROM_SPI->State == HAL_SPI_STATE_RESET) {
 800b3a4:	4b0b      	ldr	r3, [pc, #44]	; (800b3d4 <EEPROM_SPI_SendInstruction+0x44>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0f5      	beq.n	800b39e <EEPROM_SPI_SendInstruction+0xe>
    }

    if (HAL_SPI_Transmit(EEPROM_SPI, (uint8_t*)instruction, (uint16_t)size, 200) != HAL_OK) {
 800b3b2:	4b08      	ldr	r3, [pc, #32]	; (800b3d4 <EEPROM_SPI_SendInstruction+0x44>)
 800b3b4:	6818      	ldr	r0, [r3, #0]
 800b3b6:	78fb      	ldrb	r3, [r7, #3]
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	23c8      	movs	r3, #200	; 0xc8
 800b3bc:	6879      	ldr	r1, [r7, #4]
 800b3be:	f7f8 f926 	bl	800360e <HAL_SPI_Transmit>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <EEPROM_SPI_SendInstruction+0x3c>
        Error_Handler();
 800b3c8:	f7f5 f90c 	bl	80005e4 <Error_Handler>
    }
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	20003f30 	.word	0x20003f30

0800b3d8 <setInput>:
} config;




void setInput(int input, ConfigOp op, BitPorts out, uint8_t timerN) {
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	70fb      	strb	r3, [r7, #3]
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	803b      	strh	r3, [r7, #0]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	70bb      	strb	r3, [r7, #2]
	if (input >= MAX_INPUTS) return;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b0f      	cmp	r3, #15
 800b3f6:	dc12      	bgt.n	800b41e <setInput+0x46>
	config.configInputs[input].op = op;
 800b3f8:	490b      	ldr	r1, [pc, #44]	; (800b428 <setInput+0x50>)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	78fa      	ldrb	r2, [r7, #3]
 800b3fe:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	config.configInputs[input].out = out;
 800b402:	4a09      	ldr	r2, [pc, #36]	; (800b428 <setInput+0x50>)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	883a      	ldrh	r2, [r7, #0]
 800b40c:	f8a3 2001 	strh.w	r2, [r3, #1]
	config.configInputs[input].timerN = timerN;
 800b410:	4a05      	ldr	r2, [pc, #20]	; (800b428 <setInput+0x50>)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4413      	add	r3, r2
 800b418:	78ba      	ldrb	r2, [r7, #2]
 800b41a:	70da      	strb	r2, [r3, #3]
 800b41c:	e000      	b.n	800b420 <setInput+0x48>
	if (input >= MAX_INPUTS) return;
 800b41e:	bf00      	nop
};
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	bc80      	pop	{r7}
 800b426:	4770      	bx	lr
 800b428:	20003f38 	.word	0x20003f38

0800b42c <setInputClick>:
void setInputClick(int input, ConfigOp op, BitPorts out, uint8_t timerN) {
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	4608      	mov	r0, r1
 800b436:	4611      	mov	r1, r2
 800b438:	461a      	mov	r2, r3
 800b43a:	4603      	mov	r3, r0
 800b43c:	70fb      	strb	r3, [r7, #3]
 800b43e:	460b      	mov	r3, r1
 800b440:	803b      	strh	r3, [r7, #0]
 800b442:	4613      	mov	r3, r2
 800b444:	70bb      	strb	r3, [r7, #2]
	if (input >= MAX_INPUTS) return;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b0f      	cmp	r3, #15
 800b44a:	dc15      	bgt.n	800b478 <setInputClick+0x4c>
	config.configInputsClick[input].op = op;
 800b44c:	490d      	ldr	r1, [pc, #52]	; (800b484 <setInputClick+0x58>)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3310      	adds	r3, #16
 800b452:	78fa      	ldrb	r2, [r7, #3]
 800b454:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	config.configInputsClick[input].out = out;
 800b458:	4a0a      	ldr	r2, [pc, #40]	; (800b484 <setInputClick+0x58>)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	3310      	adds	r3, #16
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	883a      	ldrh	r2, [r7, #0]
 800b464:	f8a3 2001 	strh.w	r2, [r3, #1]
	config.configInputsClick[input].timerN = timerN;
 800b468:	4a06      	ldr	r2, [pc, #24]	; (800b484 <setInputClick+0x58>)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	3310      	adds	r3, #16
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	78ba      	ldrb	r2, [r7, #2]
 800b474:	70da      	strb	r2, [r3, #3]
 800b476:	e000      	b.n	800b47a <setInputClick+0x4e>
	if (input >= MAX_INPUTS) return;
 800b478:	bf00      	nop
};
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bc80      	pop	{r7}
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	20003f38 	.word	0x20003f38

0800b488 <setInputDoubleClick>:
void setInputDoubleClick(int input, ConfigOp op, BitPorts out, uint8_t timerN) {
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	4608      	mov	r0, r1
 800b492:	4611      	mov	r1, r2
 800b494:	461a      	mov	r2, r3
 800b496:	4603      	mov	r3, r0
 800b498:	70fb      	strb	r3, [r7, #3]
 800b49a:	460b      	mov	r3, r1
 800b49c:	803b      	strh	r3, [r7, #0]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	70bb      	strb	r3, [r7, #2]
	if (input >= MAX_INPUTS) return;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b0f      	cmp	r3, #15
 800b4a6:	dc15      	bgt.n	800b4d4 <setInputDoubleClick+0x4c>
	config.configInputsDoubleClick[input].op = op;
 800b4a8:	490d      	ldr	r1, [pc, #52]	; (800b4e0 <setInputDoubleClick+0x58>)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	3320      	adds	r3, #32
 800b4ae:	78fa      	ldrb	r2, [r7, #3]
 800b4b0:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	config.configInputsDoubleClick[input].out = out;
 800b4b4:	4a0a      	ldr	r2, [pc, #40]	; (800b4e0 <setInputDoubleClick+0x58>)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	3320      	adds	r3, #32
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4413      	add	r3, r2
 800b4be:	883a      	ldrh	r2, [r7, #0]
 800b4c0:	f8a3 2001 	strh.w	r2, [r3, #1]
	config.configInputsDoubleClick[input].timerN = timerN;
 800b4c4:	4a06      	ldr	r2, [pc, #24]	; (800b4e0 <setInputDoubleClick+0x58>)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	3320      	adds	r3, #32
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	78ba      	ldrb	r2, [r7, #2]
 800b4d0:	70da      	strb	r2, [r3, #3]
 800b4d2:	e000      	b.n	800b4d6 <setInputDoubleClick+0x4e>
	if (input >= MAX_INPUTS) return;
 800b4d4:	bf00      	nop
};
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bc80      	pop	{r7}
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	20003f38 	.word	0x20003f38

0800b4e4 <setInputLPress>:
void setInputLPress(int input, ConfigOp op, BitPorts out, uint8_t timerN) {
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	70fb      	strb	r3, [r7, #3]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	803b      	strh	r3, [r7, #0]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	70bb      	strb	r3, [r7, #2]
	if (input >= MAX_INPUTS) return;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b0f      	cmp	r3, #15
 800b502:	dc15      	bgt.n	800b530 <setInputLPress+0x4c>
	config.configInputsLPress[input].op = op;
 800b504:	490d      	ldr	r1, [pc, #52]	; (800b53c <setInputLPress+0x58>)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	3330      	adds	r3, #48	; 0x30
 800b50a:	78fa      	ldrb	r2, [r7, #3]
 800b50c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	config.configInputsLPress[input].out = out;
 800b510:	4a0a      	ldr	r2, [pc, #40]	; (800b53c <setInputLPress+0x58>)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	3330      	adds	r3, #48	; 0x30
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	883a      	ldrh	r2, [r7, #0]
 800b51c:	f8a3 2001 	strh.w	r2, [r3, #1]
	config.configInputsLPress[input].timerN = timerN;
 800b520:	4a06      	ldr	r2, [pc, #24]	; (800b53c <setInputLPress+0x58>)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	3330      	adds	r3, #48	; 0x30
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4413      	add	r3, r2
 800b52a:	78ba      	ldrb	r2, [r7, #2]
 800b52c:	70da      	strb	r2, [r3, #3]
 800b52e:	e000      	b.n	800b532 <setInputLPress+0x4e>
	if (input >= MAX_INPUTS) return;
 800b530:	bf00      	nop
};
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	bc80      	pop	{r7}
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	20003f38 	.word	0x20003f38

0800b540 <setConfigTimer>:

void setConfigTimer(int timer, BitPorts out, uint32_t secs) {
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	460b      	mov	r3, r1
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	817b      	strh	r3, [r7, #10]
	if (timer >= MAX_TIMERS) return;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b0f      	cmp	r3, #15
 800b552:	dc17      	bgt.n	800b584 <setConfigTimer+0x44>
	config.configTimers[timer].out = out;
 800b554:	490e      	ldr	r1, [pc, #56]	; (800b590 <setConfigTimer+0x50>)
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	4613      	mov	r3, r2
 800b55a:	005b      	lsls	r3, r3, #1
 800b55c:	4413      	add	r3, r2
 800b55e:	005b      	lsls	r3, r3, #1
 800b560:	440b      	add	r3, r1
 800b562:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b566:	897a      	ldrh	r2, [r7, #10]
 800b568:	801a      	strh	r2, [r3, #0]
	config.configTimers[timer].secs = secs;
 800b56a:	4909      	ldr	r1, [pc, #36]	; (800b590 <setConfigTimer+0x50>)
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4613      	mov	r3, r2
 800b570:	005b      	lsls	r3, r3, #1
 800b572:	4413      	add	r3, r2
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	440b      	add	r3, r1
 800b578:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	f8c3 2002 	str.w	r2, [r3, #2]
 800b582:	e000      	b.n	800b586 <setConfigTimer+0x46>
	if (timer >= MAX_TIMERS) return;
 800b584:	bf00      	nop
};
 800b586:	3714      	adds	r7, #20
 800b588:	46bd      	mov	sp, r7
 800b58a:	bc80      	pop	{r7}
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	20003f38 	.word	0x20003f38

0800b594 <getInput>:
ConfigInput * getInput(int input){
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
	if (input >= MAX_INPUTS) return NULL;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b0f      	cmp	r3, #15
 800b5a0:	dd01      	ble.n	800b5a6 <getInput+0x12>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	e003      	b.n	800b5ae <getInput+0x1a>
	return &config.configInputs[input];
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4a03      	ldr	r2, [pc, #12]	; (800b5b8 <getInput+0x24>)
 800b5ac:	4413      	add	r3, r2
};
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bc80      	pop	{r7}
 800b5b6:	4770      	bx	lr
 800b5b8:	20003f38 	.word	0x20003f38

0800b5bc <getInputClick>:
ConfigInput * getInputClick(int input){
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
	if (input >= MAX_INPUTS) return NULL;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b0f      	cmp	r3, #15
 800b5c8:	dd01      	ble.n	800b5ce <getInputClick+0x12>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e004      	b.n	800b5d8 <getInputClick+0x1c>
	return &config.configInputsClick[input];
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	3310      	adds	r3, #16
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4a03      	ldr	r2, [pc, #12]	; (800b5e4 <getInputClick+0x28>)
 800b5d6:	4413      	add	r3, r2
};
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bc80      	pop	{r7}
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	20003f38 	.word	0x20003f38

0800b5e8 <getInputDoubleClick>:
ConfigInput * getInputDoubleClick(int input){
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
	if (input >= MAX_INPUTS) return NULL;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b0f      	cmp	r3, #15
 800b5f4:	dd01      	ble.n	800b5fa <getInputDoubleClick+0x12>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e004      	b.n	800b604 <getInputDoubleClick+0x1c>
	return &config.configInputsDoubleClick[input];
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	3320      	adds	r3, #32
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4a03      	ldr	r2, [pc, #12]	; (800b610 <getInputDoubleClick+0x28>)
 800b602:	4413      	add	r3, r2
};
 800b604:	4618      	mov	r0, r3
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	bc80      	pop	{r7}
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	20003f38 	.word	0x20003f38

0800b614 <getInputLPress>:
ConfigInput * getInputLPress(int input){
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	if (input >= MAX_INPUTS) return NULL;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b0f      	cmp	r3, #15
 800b620:	dd01      	ble.n	800b626 <getInputLPress+0x12>
 800b622:	2300      	movs	r3, #0
 800b624:	e004      	b.n	800b630 <getInputLPress+0x1c>
	return &config.configInputsLPress[input];
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	3330      	adds	r3, #48	; 0x30
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	4a03      	ldr	r2, [pc, #12]	; (800b63c <getInputLPress+0x28>)
 800b62e:	4413      	add	r3, r2
};
 800b630:	4618      	mov	r0, r3
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	bc80      	pop	{r7}
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	20003f38 	.word	0x20003f38

0800b640 <getConfigTimer>:

ConfigTimer * getConfigTimer(int timer){
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
	if (timer >= MAX_INPUTS) return NULL;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b0f      	cmp	r3, #15
 800b64c:	dd01      	ble.n	800b652 <getConfigTimer+0x12>
 800b64e:	2300      	movs	r3, #0
 800b650:	e008      	b.n	800b664 <getConfigTimer+0x24>
	return &config.configTimers[timer];
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	4613      	mov	r3, r2
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	4413      	add	r3, r2
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b660:	4a03      	ldr	r2, [pc, #12]	; (800b670 <getConfigTimer+0x30>)
 800b662:	4413      	add	r3, r2
};
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	bc80      	pop	{r7}
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	20003f38 	.word	0x20003f38

0800b674 <loadFromFlash>:

int loadFromFlash(void) {
 800b674:	b580      	push	{r7, lr}
 800b676:	b08a      	sub	sp, #40	; 0x28
 800b678:	af00      	add	r7, sp, #0
	EEPROM_SPI_INIT(&hspi1);
 800b67a:	4828      	ldr	r0, [pc, #160]	; (800b71c <loadFromFlash+0xa8>)
 800b67c:	f7ff fc7a 	bl	800af74 <EEPROM_SPI_INIT>
	char buf[sizeof(signature)] = {0};
 800b680:	463b      	mov	r3, r7
 800b682:	2221      	movs	r2, #33	; 0x21
 800b684:	2100      	movs	r1, #0
 800b686:	4618      	mov	r0, r3
 800b688:	f001 ffd6 	bl	800d638 <memset>
	EEPROM_SPI_ReadBuffer((uint8_t *)buf, 0, sizeof(signature));
 800b68c:	463b      	mov	r3, r7
 800b68e:	2221      	movs	r2, #33	; 0x21
 800b690:	2100      	movs	r1, #0
 800b692:	4618      	mov	r0, r3
 800b694:	f7ff fdce 	bl	800b234 <EEPROM_SPI_ReadBuffer>
	if (strncmp(signature, buf, sizeof(signature)) == 0) // read from flash config
 800b698:	463b      	mov	r3, r7
 800b69a:	2221      	movs	r2, #33	; 0x21
 800b69c:	4619      	mov	r1, r3
 800b69e:	4820      	ldr	r0, [pc, #128]	; (800b720 <loadFromFlash+0xac>)
 800b6a0:	f002 f853 	bl	800d74a <strncmp>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <loadFromFlash+0x44>
		EEPROM_SPI_ReadBuffer((uint8_t *)&config, sizeof(signature), sizeof(config));
 800b6aa:	f44f 72b0 	mov.w	r2, #352	; 0x160
 800b6ae:	2121      	movs	r1, #33	; 0x21
 800b6b0:	481c      	ldr	r0, [pc, #112]	; (800b724 <loadFromFlash+0xb0>)
 800b6b2:	f7ff fdbf 	bl	800b234 <EEPROM_SPI_ReadBuffer>
 800b6b6:	e02c      	b.n	800b712 <loadFromFlash+0x9e>
	else {
		memset(&config, 0, sizeof(config));
 800b6b8:	f44f 72b0 	mov.w	r2, #352	; 0x160
 800b6bc:	2100      	movs	r1, #0
 800b6be:	4819      	ldr	r0, [pc, #100]	; (800b724 <loadFromFlash+0xb0>)
 800b6c0:	f001 ffba 	bl	800d638 <memset>
		config.configInputsLPress[0].op = off;
 800b6c4:	4b17      	ldr	r3, [pc, #92]	; (800b724 <loadFromFlash+0xb0>)
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		config.configInputsLPress[0].out = -1;//0xFFFF;
 800b6cc:	4b15      	ldr	r3, [pc, #84]	; (800b724 <loadFromFlash+0xb0>)
 800b6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 800b6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6da:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		for(int i = 0; i < MAX_INPUTS; i++) {
 800b6de:	2300      	movs	r3, #0
 800b6e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b6e2:	e013      	b.n	800b70c <loadFromFlash+0x98>
			config.configInputs[i].op = toggle;
 800b6e4:	4a0f      	ldr	r2, [pc, #60]	; (800b724 <loadFromFlash+0xb0>)
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	2103      	movs	r1, #3
 800b6ea:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			config.configInputs[i].out = 1 << i;
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f6:	b299      	uxth	r1, r3
 800b6f8:	4a0a      	ldr	r2, [pc, #40]	; (800b724 <loadFromFlash+0xb0>)
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	460a      	mov	r2, r1
 800b702:	f8a3 2001 	strh.w	r2, [r3, #1]
		for(int i = 0; i < MAX_INPUTS; i++) {
 800b706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b708:	3301      	adds	r3, #1
 800b70a:	627b      	str	r3, [r7, #36]	; 0x24
 800b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70e:	2b0f      	cmp	r3, #15
 800b710:	dde8      	ble.n	800b6e4 <loadFromFlash+0x70>
			//config.configInputsLPress[i].op = off;
			//config.configInputsLPress[i].out = config.configInputs[i].out;
		}
	}
	return 0;
 800b712:	2300      	movs	r3, #0
};
 800b714:	4618      	mov	r0, r3
 800b716:	3728      	adds	r7, #40	; 0x28
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	2000329c 	.word	0x2000329c
 800b720:	20000180 	.word	0x20000180
 800b724:	20003f38 	.word	0x20003f38

0800b728 <saveToFlash>:

int saveToFlash(void) {
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
	EEPROM_SPI_INIT(&hspi1);
 800b72e:	4810      	ldr	r0, [pc, #64]	; (800b770 <saveToFlash+0x48>)
 800b730:	f7ff fc20 	bl	800af74 <EEPROM_SPI_INIT>
	EepromOperations res = EEPROM_SPI_WriteBuffer((uint8_t *)signature, 0, sizeof(signature));
 800b734:	2221      	movs	r2, #33	; 0x21
 800b736:	2100      	movs	r1, #0
 800b738:	480e      	ldr	r0, [pc, #56]	; (800b774 <saveToFlash+0x4c>)
 800b73a:	f7ff fc85 	bl	800b048 <EEPROM_SPI_WriteBuffer>
 800b73e:	4603      	mov	r3, r0
 800b740:	71fb      	strb	r3, [r7, #7]
	if (res != EEPROM_STATUS_COMPLETE) return -1;
 800b742:	79fb      	ldrb	r3, [r7, #7]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d002      	beq.n	800b74e <saveToFlash+0x26>
 800b748:	f04f 33ff 	mov.w	r3, #4294967295
 800b74c:	e00c      	b.n	800b768 <saveToFlash+0x40>
	EEPROM_SPI_WriteBuffer((uint8_t *)&config, sizeof(signature), sizeof(config));
 800b74e:	f44f 72b0 	mov.w	r2, #352	; 0x160
 800b752:	2121      	movs	r1, #33	; 0x21
 800b754:	4808      	ldr	r0, [pc, #32]	; (800b778 <saveToFlash+0x50>)
 800b756:	f7ff fc77 	bl	800b048 <EEPROM_SPI_WriteBuffer>
	if (res != EEPROM_STATUS_COMPLETE) return -2;
 800b75a:	79fb      	ldrb	r3, [r7, #7]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d002      	beq.n	800b766 <saveToFlash+0x3e>
 800b760:	f06f 0301 	mvn.w	r3, #1
 800b764:	e000      	b.n	800b768 <saveToFlash+0x40>
	return 0;
 800b766:	2300      	movs	r3, #0
};
 800b768:	4618      	mov	r0, r3
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	2000329c 	.word	0x2000329c
 800b774:	20000180 	.word	0x20000180
 800b778:	20003f38 	.word	0x20003f38

0800b77c <print>:
	const CmdFunc cmdFunc;
	const struct EMCCommand* subCmds;
} EMCCommand;
*/
/////////////////////////////////////////////////////////
void print(const char * str) {
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
		while(CDC_Transmit_FS((uint8_t *) str, strlen(str)) == USBD_BUSY)
 800b784:	e002      	b.n	800b78c <print+0x10>
			osDelay(10);
 800b786:	200a      	movs	r0, #10
 800b788:	f7fc fb94 	bl	8007eb4 <osDelay>
		while(CDC_Transmit_FS((uint8_t *) str, strlen(str)) == USBD_BUSY)
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7f4 fce9 	bl	8000164 <strlen>
 800b792:	4603      	mov	r3, r0
 800b794:	b29b      	uxth	r3, r3
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7fe fffb 	bl	800a794 <CDC_Transmit_FS>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d0f0      	beq.n	800b786 <print+0xa>
};
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <printHelpCommands>:
};




void printHelpCommands(){
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
	EMCCommand * cmd = cmds;
 800b7b2:	4b12      	ldr	r3, [pc, #72]	; (800b7fc <printHelpCommands+0x50>)
 800b7b4:	607b      	str	r3, [r7, #4]
	print("Available Commands:\r\n");
 800b7b6:	4812      	ldr	r0, [pc, #72]	; (800b800 <printHelpCommands+0x54>)
 800b7b8:	f7ff ffe0 	bl	800b77c <print>
	while (cmd->cmdFunc) {
 800b7bc:	e012      	b.n	800b7e4 <printHelpCommands+0x38>
		print(cmd->cmdName);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7ff ffda 	bl	800b77c <print>
		print(" - ");
 800b7c8:	480e      	ldr	r0, [pc, #56]	; (800b804 <printHelpCommands+0x58>)
 800b7ca:	f7ff ffd7 	bl	800b77c <print>
		print(cmd->shortDescr);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7ff ffd2 	bl	800b77c <print>
		print(ESC_NEWLINE);
 800b7d8:	480b      	ldr	r0, [pc, #44]	; (800b808 <printHelpCommands+0x5c>)
 800b7da:	f7ff ffcf 	bl	800b77c <print>
		cmd++;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3310      	adds	r3, #16
 800b7e2:	607b      	str	r3, [r7, #4]
	while (cmd->cmdFunc) {
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1e8      	bne.n	800b7be <printHelpCommands+0x12>
	};
	print("Type \"help <command>\" for more information\r\n");
 800b7ec:	4807      	ldr	r0, [pc, #28]	; (800b80c <printHelpCommands+0x60>)
 800b7ee:	f7ff ffc5 	bl	800b77c <print>
};
 800b7f2:	bf00      	nop
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	200001a4 	.word	0x200001a4
 800b800:	0800ee28 	.word	0x0800ee28
 800b804:	0800ee40 	.word	0x0800ee40
 800b808:	0800ee44 	.word	0x0800ee44
 800b80c:	0800ee48 	.word	0x0800ee48

0800b810 <cmdHelp>:
bool cmdHelp(char * args){
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
	//printFunc("This is help\r\n Args: ");	printFunc(args);	printFunc(ESC_NEWLINE);
	if (!args) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d103      	bne.n	800b826 <cmdHelp+0x16>
		printHelpCommands();
 800b81e:	f7ff ffc5 	bl	800b7ac <printHelpCommands>
		return true;
 800b822:	2301      	movs	r3, #1
 800b824:	e035      	b.n	800b892 <cmdHelp+0x82>
	};
	EMCCommand * cmd = cmds;
 800b826:	4b1d      	ldr	r3, [pc, #116]	; (800b89c <cmdHelp+0x8c>)
 800b828:	60fb      	str	r3, [r7, #12]
	while(cmd->cmdName) {
 800b82a:	e02a      	b.n	800b882 <cmdHelp+0x72>
		int len = strlen(cmd->cmdName);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4618      	mov	r0, r3
 800b832:	f7f4 fc97 	bl	8000164 <strlen>
 800b836:	4603      	mov	r3, r0
 800b838:	60bb      	str	r3, [r7, #8]
		if (strncmp(args, cmd->cmdName, len) == 0) {
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 ff81 	bl	800d74a <strncmp>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d116      	bne.n	800b87c <cmdHelp+0x6c>
			print(ESC_NEWLINE);
 800b84e:	4814      	ldr	r0, [pc, #80]	; (800b8a0 <cmdHelp+0x90>)
 800b850:	f7ff ff94 	bl	800b77c <print>
			if (cmd->longDescr) print(cmd->longDescr);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d005      	beq.n	800b868 <cmdHelp+0x58>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	4618      	mov	r0, r3
 800b862:	f7ff ff8b 	bl	800b77c <print>
 800b866:	e004      	b.n	800b872 <cmdHelp+0x62>
			else print(cmd->shortDescr);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7ff ff85 	bl	800b77c <print>
			print(ESC_NEWLINE);
 800b872:	480b      	ldr	r0, [pc, #44]	; (800b8a0 <cmdHelp+0x90>)
 800b874:	f7ff ff82 	bl	800b77c <print>
			return true;
 800b878:	2301      	movs	r3, #1
 800b87a:	e00a      	b.n	800b892 <cmdHelp+0x82>
		};
		cmd++;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	3310      	adds	r3, #16
 800b880:	60fb      	str	r3, [r7, #12]
	while(cmd->cmdName) {
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1d0      	bne.n	800b82c <cmdHelp+0x1c>
	};
	print("Error: help not found\r\n");
 800b88a:	4806      	ldr	r0, [pc, #24]	; (800b8a4 <cmdHelp+0x94>)
 800b88c:	f7ff ff76 	bl	800b77c <print>
	return false;
 800b890:	2300      	movs	r3, #0
};
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	200001a4 	.word	0x200001a4
 800b8a0:	0800ee44 	.word	0x0800ee44
 800b8a4:	0800ee78 	.word	0x0800ee78

0800b8a8 <convertToInt>:
////////////////////////////////////////////////////////////////////
int convertToInt(char * str) {
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
	char * end;
	int ret;
	if (strlen(str) > 2) {
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f7f4 fc57 	bl	8000164 <strlen>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d939      	bls.n	800b930 <convertToInt+0x88>
		if (str[0] == '0' && str[1] == 'x') {//hex number
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b30      	cmp	r3, #48	; 0x30
 800b8c2:	d118      	bne.n	800b8f6 <convertToInt+0x4e>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	2b78      	cmp	r3, #120	; 0x78
 800b8cc:	d113      	bne.n	800b8f6 <convertToInt+0x4e>
			ret = strtoul(&str[2], &end, 16);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	3302      	adds	r3, #2
 800b8d2:	f107 0108 	add.w	r1, r7, #8
 800b8d6:	2210      	movs	r2, #16
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f002 f829 	bl	800d930 <strtoul>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	60fb      	str	r3, [r7, #12]
			if (end <= (str + 2)) return -1;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	1c9a      	adds	r2, r3, #2
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d302      	bcc.n	800b8f2 <convertToInt+0x4a>
 800b8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f0:	e02f      	b.n	800b952 <convertToInt+0xaa>
			else return ret;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	e02d      	b.n	800b952 <convertToInt+0xaa>
		} else if (str[0] == '0' && str[1] == 'b') {// binary number
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	2b30      	cmp	r3, #48	; 0x30
 800b8fc:	d118      	bne.n	800b930 <convertToInt+0x88>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3301      	adds	r3, #1
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	2b62      	cmp	r3, #98	; 0x62
 800b906:	d113      	bne.n	800b930 <convertToInt+0x88>
			ret = strtoul(&str[2], &end, 2);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	3302      	adds	r3, #2
 800b90c:	f107 0108 	add.w	r1, r7, #8
 800b910:	2202      	movs	r2, #2
 800b912:	4618      	mov	r0, r3
 800b914:	f002 f80c 	bl	800d930 <strtoul>
 800b918:	4603      	mov	r3, r0
 800b91a:	60fb      	str	r3, [r7, #12]
			if (end <= (str + 2)) return -1;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	1c9a      	adds	r2, r3, #2
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	429a      	cmp	r2, r3
 800b924:	d302      	bcc.n	800b92c <convertToInt+0x84>
 800b926:	f04f 33ff 	mov.w	r3, #4294967295
 800b92a:	e012      	b.n	800b952 <convertToInt+0xaa>
			else return ret;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	e010      	b.n	800b952 <convertToInt+0xaa>
		}
	};
	//dec number
	ret = strtoul(str, &end, 10);
 800b930:	f107 0308 	add.w	r3, r7, #8
 800b934:	220a      	movs	r2, #10
 800b936:	4619      	mov	r1, r3
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f001 fff9 	bl	800d930 <strtoul>
 800b93e:	4603      	mov	r3, r0
 800b940:	60fb      	str	r3, [r7, #12]
	if (end <= str) return -1;
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	429a      	cmp	r2, r3
 800b948:	d302      	bcc.n	800b950 <convertToInt+0xa8>
 800b94a:	f04f 33ff 	mov.w	r3, #4294967295
 800b94e:	e000      	b.n	800b952 <convertToInt+0xaa>
	else return ret;
 800b950:	68fb      	ldr	r3, [r7, #12]
};
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
	...

0800b95c <printOp>:
void printOp(ConfigOp op) {
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	4603      	mov	r3, r0
 800b964:	71fb      	strb	r3, [r7, #7]
	switch(op) {
 800b966:	79fb      	ldrb	r3, [r7, #7]
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d018      	beq.n	800b99e <printOp+0x42>
 800b96c:	2b03      	cmp	r3, #3
 800b96e:	dc06      	bgt.n	800b97e <printOp+0x22>
 800b970:	2b01      	cmp	r3, #1
 800b972:	d018      	beq.n	800b9a6 <printOp+0x4a>
 800b974:	2b01      	cmp	r3, #1
 800b976:	dc1a      	bgt.n	800b9ae <printOp+0x52>
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00c      	beq.n	800b996 <printOp+0x3a>
		case off:
		case timerOff:
			print(_OFF_);
			break;
	};
};
 800b97c:	e01b      	b.n	800b9b6 <printOp+0x5a>
	switch(op) {
 800b97e:	2b81      	cmp	r3, #129	; 0x81
 800b980:	d011      	beq.n	800b9a6 <printOp+0x4a>
 800b982:	2b81      	cmp	r3, #129	; 0x81
 800b984:	dc02      	bgt.n	800b98c <printOp+0x30>
 800b986:	2b80      	cmp	r3, #128	; 0x80
 800b988:	d005      	beq.n	800b996 <printOp+0x3a>
};
 800b98a:	e014      	b.n	800b9b6 <printOp+0x5a>
	switch(op) {
 800b98c:	2b82      	cmp	r3, #130	; 0x82
 800b98e:	d00e      	beq.n	800b9ae <printOp+0x52>
 800b990:	2b83      	cmp	r3, #131	; 0x83
 800b992:	d004      	beq.n	800b99e <printOp+0x42>
};
 800b994:	e00f      	b.n	800b9b6 <printOp+0x5a>
			print("nop");
 800b996:	480a      	ldr	r0, [pc, #40]	; (800b9c0 <printOp+0x64>)
 800b998:	f7ff fef0 	bl	800b77c <print>
			break;
 800b99c:	e00b      	b.n	800b9b6 <printOp+0x5a>
			print(_TOGGLE_);
 800b99e:	4809      	ldr	r0, [pc, #36]	; (800b9c4 <printOp+0x68>)
 800b9a0:	f7ff feec 	bl	800b77c <print>
			break;
 800b9a4:	e007      	b.n	800b9b6 <printOp+0x5a>
			print(_ON_);
 800b9a6:	4808      	ldr	r0, [pc, #32]	; (800b9c8 <printOp+0x6c>)
 800b9a8:	f7ff fee8 	bl	800b77c <print>
			break;
 800b9ac:	e003      	b.n	800b9b6 <printOp+0x5a>
			print(_OFF_);
 800b9ae:	4807      	ldr	r0, [pc, #28]	; (800b9cc <printOp+0x70>)
 800b9b0:	f7ff fee4 	bl	800b77c <print>
			break;
 800b9b4:	bf00      	nop
};
 800b9b6:	bf00      	nop
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	0800ee90 	.word	0x0800ee90
 800b9c4:	0800ee94 	.word	0x0800ee94
 800b9c8:	0800eea4 	.word	0x0800eea4
 800b9cc:	0800eeb0 	.word	0x0800eeb0

0800b9d0 <printHex>:
void printHex(int n, char * buf, size_t buflen) {
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
	snprintf(buf, buflen, "%x", n);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4a06      	ldr	r2, [pc, #24]	; (800b9f8 <printHex+0x28>)
 800b9e0:	6879      	ldr	r1, [r7, #4]
 800b9e2:	68b8      	ldr	r0, [r7, #8]
 800b9e4:	f001 fe30 	bl	800d648 <sniprintf>
	print(buf);
 800b9e8:	68b8      	ldr	r0, [r7, #8]
 800b9ea:	f7ff fec7 	bl	800b77c <print>
};
 800b9ee:	bf00      	nop
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	0800eec0 	.word	0x0800eec0

0800b9fc <printDec>:
void printDec(int n) {
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
	char buf[6];
	snprintf(buf, 5, "%u", n);
 800ba04:	f107 0008 	add.w	r0, r7, #8
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a06      	ldr	r2, [pc, #24]	; (800ba24 <printDec+0x28>)
 800ba0c:	2105      	movs	r1, #5
 800ba0e:	f001 fe1b 	bl	800d648 <sniprintf>
	print(buf);
 800ba12:	f107 0308 	add.w	r3, r7, #8
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff feb0 	bl	800b77c <print>
};
 800ba1c:	bf00      	nop
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	0800eec4 	.word	0x0800eec4

0800ba28 <printOutputState>:

void printOutputState(int output) {
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
	//print("This is output state print\r\n");
	print ("output ");
 800ba30:	480e      	ldr	r0, [pc, #56]	; (800ba6c <printOutputState+0x44>)
 800ba32:	f7ff fea3 	bl	800b77c <print>
	printDec(output);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff ffe0 	bl	800b9fc <printDec>
	print(" ");
 800ba3c:	480c      	ldr	r0, [pc, #48]	; (800ba70 <printOutputState+0x48>)
 800ba3e:	f7ff fe9d 	bl	800b77c <print>
	if (getOutputState(output)) print(_ON_);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f001 fb4a 	bl	800d0dc <getOutputState>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <printOutputState+0x2e>
 800ba4e:	4809      	ldr	r0, [pc, #36]	; (800ba74 <printOutputState+0x4c>)
 800ba50:	f7ff fe94 	bl	800b77c <print>
 800ba54:	e002      	b.n	800ba5c <printOutputState+0x34>
	else print(_OFF_);
 800ba56:	4808      	ldr	r0, [pc, #32]	; (800ba78 <printOutputState+0x50>)
 800ba58:	f7ff fe90 	bl	800b77c <print>
	print(ESC_NEWLINE);
 800ba5c:	4807      	ldr	r0, [pc, #28]	; (800ba7c <printOutputState+0x54>)
 800ba5e:	f7ff fe8d 	bl	800b77c <print>
};
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	0800eec8 	.word	0x0800eec8
 800ba70:	0800eed0 	.word	0x0800eed0
 800ba74:	0800eea4 	.word	0x0800eea4
 800ba78:	0800eeb0 	.word	0x0800eeb0
 800ba7c:	0800ee44 	.word	0x0800ee44

0800ba80 <printConfigInput1Op>:
void printConfigInput1Op(ConfigInput * ci, char * buf, int bufN){
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
	printOp(ci->op);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7ff ff63 	bl	800b95c <printOp>
	if (ci->op != timerNop) {
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	2b80      	cmp	r3, #128	; 0x80
 800ba9c:	d00c      	beq.n	800bab8 <printConfigInput1Op+0x38>
		print(" 0x");
 800ba9e:	4810      	ldr	r0, [pc, #64]	; (800bae0 <printConfigInput1Op+0x60>)
 800baa0:	f7ff fe6c 	bl	800b77c <print>
		printHex(ci->out, buf, bufN);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800baaa:	b29b      	uxth	r3, r3
 800baac:	4618      	mov	r0, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	461a      	mov	r2, r3
 800bab2:	68b9      	ldr	r1, [r7, #8]
 800bab4:	f7ff ff8c 	bl	800b9d0 <printHex>
	}
	if ((ci->op & timerNop) == timerNop) {
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	b25b      	sxtb	r3, r3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	da07      	bge.n	800bad2 <printConfigInput1Op+0x52>
		print(" timer ");
 800bac2:	4808      	ldr	r0, [pc, #32]	; (800bae4 <printConfigInput1Op+0x64>)
 800bac4:	f7ff fe5a 	bl	800b77c <print>
		printDec(ci->timerN);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	78db      	ldrb	r3, [r3, #3]
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff ff95 	bl	800b9fc <printDec>
	}
	print("\r\n");
 800bad2:	4805      	ldr	r0, [pc, #20]	; (800bae8 <printConfigInput1Op+0x68>)
 800bad4:	f7ff fe52 	bl	800b77c <print>
}
 800bad8:	bf00      	nop
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	0800eed4 	.word	0x0800eed4
 800bae4:	0800eed8 	.word	0x0800eed8
 800bae8:	0800eee0 	.word	0x0800eee0

0800baec <printConfigInput>:
void printConfigInput(int input) {
 800baec:	b580      	push	{r7, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
	print("input ");
 800baf4:	482d      	ldr	r0, [pc, #180]	; (800bbac <printConfigInput+0xc0>)
 800baf6:	f7ff fe41 	bl	800b77c <print>
	char buf[20];
	snprintf(buf, 20, "%u\r\n",  input);
 800bafa:	f107 0008 	add.w	r0, r7, #8
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a2b      	ldr	r2, [pc, #172]	; (800bbb0 <printConfigInput+0xc4>)
 800bb02:	2114      	movs	r1, #20
 800bb04:	f001 fda0 	bl	800d648 <sniprintf>
	print(buf);
 800bb08:	f107 0308 	add.w	r3, r7, #8
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff fe35 	bl	800b77c <print>

	//btn down
	ConfigInput * ci = getInput(input);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff fd3e 	bl	800b594 <getInput>
 800bb18:	61f8      	str	r0, [r7, #28]
	if (ci->op != nop){
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d009      	beq.n	800bb36 <printConfigInput+0x4a>
		print("\tdown   ");
 800bb22:	4824      	ldr	r0, [pc, #144]	; (800bbb4 <printConfigInput+0xc8>)
 800bb24:	f7ff fe2a 	bl	800b77c <print>
		printConfigInput1Op(ci, buf, 20);
 800bb28:	f107 0308 	add.w	r3, r7, #8
 800bb2c:	2214      	movs	r2, #20
 800bb2e:	4619      	mov	r1, r3
 800bb30:	69f8      	ldr	r0, [r7, #28]
 800bb32:	f7ff ffa5 	bl	800ba80 <printConfigInput1Op>
	}

	//click
	ci = getInputClick(input);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7ff fd40 	bl	800b5bc <getInputClick>
 800bb3c:	61f8      	str	r0, [r7, #28]
	if (ci->op != nop){
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d009      	beq.n	800bb5a <printConfigInput+0x6e>
		print("\tclick  ");
 800bb46:	481c      	ldr	r0, [pc, #112]	; (800bbb8 <printConfigInput+0xcc>)
 800bb48:	f7ff fe18 	bl	800b77c <print>
		printConfigInput1Op(ci, buf, 20);
 800bb4c:	f107 0308 	add.w	r3, r7, #8
 800bb50:	2214      	movs	r2, #20
 800bb52:	4619      	mov	r1, r3
 800bb54:	69f8      	ldr	r0, [r7, #28]
 800bb56:	f7ff ff93 	bl	800ba80 <printConfigInput1Op>
	}

	//double click
	ci = getInputDoubleClick(input);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7ff fd44 	bl	800b5e8 <getInputDoubleClick>
 800bb60:	61f8      	str	r0, [r7, #28]
	if (ci->op != nop){
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d009      	beq.n	800bb7e <printConfigInput+0x92>
		print("\tdclick  ");
 800bb6a:	4814      	ldr	r0, [pc, #80]	; (800bbbc <printConfigInput+0xd0>)
 800bb6c:	f7ff fe06 	bl	800b77c <print>
		printConfigInput1Op(ci, buf, 20);
 800bb70:	f107 0308 	add.w	r3, r7, #8
 800bb74:	2214      	movs	r2, #20
 800bb76:	4619      	mov	r1, r3
 800bb78:	69f8      	ldr	r0, [r7, #28]
 800bb7a:	f7ff ff81 	bl	800ba80 <printConfigInput1Op>
	}
	//long press
	ci = getInputLPress(input);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff fd48 	bl	800b614 <getInputLPress>
 800bb84:	61f8      	str	r0, [r7, #28]
	if (ci->op != nop){
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d009      	beq.n	800bba2 <printConfigInput+0xb6>
		print("\tlpress ");
 800bb8e:	480c      	ldr	r0, [pc, #48]	; (800bbc0 <printConfigInput+0xd4>)
 800bb90:	f7ff fdf4 	bl	800b77c <print>
		printConfigInput1Op(ci, buf, 20);
 800bb94:	f107 0308 	add.w	r3, r7, #8
 800bb98:	2214      	movs	r2, #20
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	69f8      	ldr	r0, [r7, #28]
 800bb9e:	f7ff ff6f 	bl	800ba80 <printConfigInput1Op>
	}
};
 800bba2:	bf00      	nop
 800bba4:	3720      	adds	r7, #32
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	0800eee4 	.word	0x0800eee4
 800bbb0:	0800eeec 	.word	0x0800eeec
 800bbb4:	0800eef4 	.word	0x0800eef4
 800bbb8:	0800ef00 	.word	0x0800ef00
 800bbbc:	0800ef0c 	.word	0x0800ef0c
 800bbc0:	0800ef18 	.word	0x0800ef18

0800bbc4 <printConfigTimer>:

void printConfigTimer(int input) {
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b088      	sub	sp, #32
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	print("timer ");
 800bbcc:	481b      	ldr	r0, [pc, #108]	; (800bc3c <printConfigTimer+0x78>)
 800bbce:	f7ff fdd5 	bl	800b77c <print>
	char buf[20];
	snprintf(buf, 20, "%2u",  input);
 800bbd2:	f107 0008 	add.w	r0, r7, #8
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a19      	ldr	r2, [pc, #100]	; (800bc40 <printConfigTimer+0x7c>)
 800bbda:	2114      	movs	r1, #20
 800bbdc:	f001 fd34 	bl	800d648 <sniprintf>
	print(buf);
 800bbe0:	f107 0308 	add.w	r3, r7, #8
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7ff fdc9 	bl	800b77c <print>
	ConfigTimer * ct = getConfigTimer(input);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7ff fd28 	bl	800b640 <getConfigTimer>
 800bbf0:	61f8      	str	r0, [r7, #28]
	print(" ");
 800bbf2:	4814      	ldr	r0, [pc, #80]	; (800bc44 <printConfigTimer+0x80>)
 800bbf4:	f7ff fdc2 	bl	800b77c <print>
	snprintf(buf, 20, "%lus ", ct->secs);
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800bbfe:	f107 0008 	add.w	r0, r7, #8
 800bc02:	4a11      	ldr	r2, [pc, #68]	; (800bc48 <printConfigTimer+0x84>)
 800bc04:	2114      	movs	r1, #20
 800bc06:	f001 fd1f 	bl	800d648 <sniprintf>
	print(buf);
 800bc0a:	f107 0308 	add.w	r3, r7, #8
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7ff fdb4 	bl	800b77c <print>
	print(" 0x");
 800bc14:	480d      	ldr	r0, [pc, #52]	; (800bc4c <printConfigTimer+0x88>)
 800bc16:	f7ff fdb1 	bl	800b77c <print>
	printHex(ct->out, buf, 20);
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	4618      	mov	r0, r3
 800bc22:	f107 0308 	add.w	r3, r7, #8
 800bc26:	2214      	movs	r2, #20
 800bc28:	4619      	mov	r1, r3
 800bc2a:	f7ff fed1 	bl	800b9d0 <printHex>
	print("\r\n");
 800bc2e:	4808      	ldr	r0, [pc, #32]	; (800bc50 <printConfigTimer+0x8c>)
 800bc30:	f7ff fda4 	bl	800b77c <print>
};
 800bc34:	bf00      	nop
 800bc36:	3720      	adds	r7, #32
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	0800ef24 	.word	0x0800ef24
 800bc40:	0800ef2c 	.word	0x0800ef2c
 800bc44:	0800eed0 	.word	0x0800eed0
 800bc48:	0800ef30 	.word	0x0800ef30
 800bc4c:	0800eed4 	.word	0x0800eed4
 800bc50:	0800eee0 	.word	0x0800eee0

0800bc54 <cmdInput>:
////////////////////////////////////////////////
bool cmdInput(char * args) {
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
	//tocken number of port
	char * tok = strtok(args, " ");
 800bc5c:	497d      	ldr	r1, [pc, #500]	; (800be54 <cmdInput+0x200>)
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f001 fd86 	bl	800d770 <strtok>
 800bc64:	6138      	str	r0, [r7, #16]
	if (!tok) return false;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d101      	bne.n	800bc70 <cmdInput+0x1c>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e0ed      	b.n	800be4c <cmdInput+0x1f8>
	int inNum = convertToInt(tok); 
 800bc70:	6938      	ldr	r0, [r7, #16]
 800bc72:	f7ff fe19 	bl	800b8a8 <convertToInt>
 800bc76:	60f8      	str	r0, [r7, #12]
	if ((inNum < 0) || (inNum >= MAX_INPUTS)) return false;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	db02      	blt.n	800bc84 <cmdInput+0x30>
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2b0f      	cmp	r3, #15
 800bc82:	dd01      	ble.n	800bc88 <cmdInput+0x34>
 800bc84:	2300      	movs	r3, #0
 800bc86:	e0e1      	b.n	800be4c <cmdInput+0x1f8>
	
	//token down|click|dclick|lpress
	tok = strtok(NULL, " ");
 800bc88:	4972      	ldr	r1, [pc, #456]	; (800be54 <cmdInput+0x200>)
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	f001 fd70 	bl	800d770 <strtok>
 800bc90:	6138      	str	r0, [r7, #16]
	if (!tok) return false;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d101      	bne.n	800bc9c <cmdInput+0x48>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	e0d7      	b.n	800be4c <cmdInput+0x1f8>
	char click;
	if (strcmp(tok, "down") == 0) click = 'n';
 800bc9c:	496e      	ldr	r1, [pc, #440]	; (800be58 <cmdInput+0x204>)
 800bc9e:	6938      	ldr	r0, [r7, #16]
 800bca0:	f7f4 fa56 	bl	8000150 <strcmp>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d102      	bne.n	800bcb0 <cmdInput+0x5c>
 800bcaa:	236e      	movs	r3, #110	; 0x6e
 800bcac:	77fb      	strb	r3, [r7, #31]
 800bcae:	e01a      	b.n	800bce6 <cmdInput+0x92>
	else if (strcmp(tok, "click") == 0 || strcmp(tok, "dclick") == 0 || strcmp(tok, "lpress") == 0)
 800bcb0:	496a      	ldr	r1, [pc, #424]	; (800be5c <cmdInput+0x208>)
 800bcb2:	6938      	ldr	r0, [r7, #16]
 800bcb4:	f7f4 fa4c 	bl	8000150 <strcmp>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00d      	beq.n	800bcda <cmdInput+0x86>
 800bcbe:	4968      	ldr	r1, [pc, #416]	; (800be60 <cmdInput+0x20c>)
 800bcc0:	6938      	ldr	r0, [r7, #16]
 800bcc2:	f7f4 fa45 	bl	8000150 <strcmp>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d006      	beq.n	800bcda <cmdInput+0x86>
 800bccc:	4965      	ldr	r1, [pc, #404]	; (800be64 <cmdInput+0x210>)
 800bcce:	6938      	ldr	r0, [r7, #16]
 800bcd0:	f7f4 fa3e 	bl	8000150 <strcmp>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d103      	bne.n	800bce2 <cmdInput+0x8e>
		click = tok[0];
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	77fb      	strb	r3, [r7, #31]
 800bce0:	e001      	b.n	800bce6 <cmdInput+0x92>
	else return false;
 800bce2:	2300      	movs	r3, #0
 800bce4:	e0b2      	b.n	800be4c <cmdInput+0x1f8>
	
	//token toggle|on|off
	tok = strtok(NULL, " ");
 800bce6:	495b      	ldr	r1, [pc, #364]	; (800be54 <cmdInput+0x200>)
 800bce8:	2000      	movs	r0, #0
 800bcea:	f001 fd41 	bl	800d770 <strtok>
 800bcee:	6138      	str	r0, [r7, #16]
	if (!tok) return false;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <cmdInput+0xa6>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	e0a8      	b.n	800be4c <cmdInput+0x1f8>
	ConfigOp op;
	if (strcmp(tok, "toggle") == 0) op = toggle;
 800bcfa:	495b      	ldr	r1, [pc, #364]	; (800be68 <cmdInput+0x214>)
 800bcfc:	6938      	ldr	r0, [r7, #16]
 800bcfe:	f7f4 fa27 	bl	8000150 <strcmp>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d102      	bne.n	800bd0e <cmdInput+0xba>
 800bd08:	2303      	movs	r3, #3
 800bd0a:	77bb      	strb	r3, [r7, #30]
 800bd0c:	e01f      	b.n	800bd4e <cmdInput+0xfa>
	else if (strcmp(tok, "on") == 0) op = on;
 800bd0e:	4957      	ldr	r1, [pc, #348]	; (800be6c <cmdInput+0x218>)
 800bd10:	6938      	ldr	r0, [r7, #16]
 800bd12:	f7f4 fa1d 	bl	8000150 <strcmp>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <cmdInput+0xce>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	77bb      	strb	r3, [r7, #30]
 800bd20:	e015      	b.n	800bd4e <cmdInput+0xfa>
	else if (strcmp(tok, "off") == 0) op = off;
 800bd22:	4953      	ldr	r1, [pc, #332]	; (800be70 <cmdInput+0x21c>)
 800bd24:	6938      	ldr	r0, [r7, #16]
 800bd26:	f7f4 fa13 	bl	8000150 <strcmp>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d102      	bne.n	800bd36 <cmdInput+0xe2>
 800bd30:	2302      	movs	r3, #2
 800bd32:	77bb      	strb	r3, [r7, #30]
 800bd34:	e00b      	b.n	800bd4e <cmdInput+0xfa>
	else if (strcmp(tok, "nop") == 0) op = nop;
 800bd36:	494f      	ldr	r1, [pc, #316]	; (800be74 <cmdInput+0x220>)
 800bd38:	6938      	ldr	r0, [r7, #16]
 800bd3a:	f7f4 fa09 	bl	8000150 <strcmp>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d102      	bne.n	800bd4a <cmdInput+0xf6>
 800bd44:	2300      	movs	r3, #0
 800bd46:	77bb      	strb	r3, [r7, #30]
 800bd48:	e001      	b.n	800bd4e <cmdInput+0xfa>
	else return false;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e07e      	b.n	800be4c <cmdInput+0x1f8>

	int outs = 0;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	61bb      	str	r3, [r7, #24]
	//token NUMMASK
	if(op != nop) {
 800bd52:	7fbb      	ldrb	r3, [r7, #30]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d012      	beq.n	800bd7e <cmdInput+0x12a>
		tok = strtok(NULL, " ");
 800bd58:	493e      	ldr	r1, [pc, #248]	; (800be54 <cmdInput+0x200>)
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	f001 fd08 	bl	800d770 <strtok>
 800bd60:	6138      	str	r0, [r7, #16]
		if (!tok) return false;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d101      	bne.n	800bd6c <cmdInput+0x118>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e06f      	b.n	800be4c <cmdInput+0x1f8>
		outs = convertToInt(tok);
 800bd6c:	6938      	ldr	r0, [r7, #16]
 800bd6e:	f7ff fd9b 	bl	800b8a8 <convertToInt>
 800bd72:	61b8      	str	r0, [r7, #24]
		if (outs < 0) return false;
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	da01      	bge.n	800bd7e <cmdInput+0x12a>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	e066      	b.n	800be4c <cmdInput+0x1f8>
	}

	//token timer
	int timerNum = 0;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	617b      	str	r3, [r7, #20]
	tok = strtok(NULL, " ");
 800bd82:	4934      	ldr	r1, [pc, #208]	; (800be54 <cmdInput+0x200>)
 800bd84:	2000      	movs	r0, #0
 800bd86:	f001 fcf3 	bl	800d770 <strtok>
 800bd8a:	6138      	str	r0, [r7, #16]
	if (strcmp(tok, "timer") == 0) {
 800bd8c:	493a      	ldr	r1, [pc, #232]	; (800be78 <cmdInput+0x224>)
 800bd8e:	6938      	ldr	r0, [r7, #16]
 800bd90:	f7f4 f9de 	bl	8000150 <strcmp>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d111      	bne.n	800bdbe <cmdInput+0x16a>
		//token TIMERNUM
		tok = strtok(NULL, " ");
 800bd9a:	492e      	ldr	r1, [pc, #184]	; (800be54 <cmdInput+0x200>)
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	f001 fce7 	bl	800d770 <strtok>
 800bda2:	6138      	str	r0, [r7, #16]
		timerNum = convertToInt(tok);
 800bda4:	6938      	ldr	r0, [r7, #16]
 800bda6:	f7ff fd7f 	bl	800b8a8 <convertToInt>
 800bdaa:	6178      	str	r0, [r7, #20]
		if (timerNum < 0) return false;
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	da01      	bge.n	800bdb6 <cmdInput+0x162>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	e04a      	b.n	800be4c <cmdInput+0x1f8>
		op |= timerNop;
 800bdb6:	7fbb      	ldrb	r3, [r7, #30]
 800bdb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bdbc:	77bb      	strb	r3, [r7, #30]
	}

	//
	switch (click) {
 800bdbe:	7ffb      	ldrb	r3, [r7, #31]
 800bdc0:	3b63      	subs	r3, #99	; 0x63
 800bdc2:	2b0b      	cmp	r3, #11
 800bdc4:	d83e      	bhi.n	800be44 <cmdInput+0x1f0>
 800bdc6:	a201      	add	r2, pc, #4	; (adr r2, 800bdcc <cmdInput+0x178>)
 800bdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdcc:	0800be0f 	.word	0x0800be0f
 800bdd0:	0800be21 	.word	0x0800be21
 800bdd4:	0800be45 	.word	0x0800be45
 800bdd8:	0800be45 	.word	0x0800be45
 800bddc:	0800be45 	.word	0x0800be45
 800bde0:	0800be45 	.word	0x0800be45
 800bde4:	0800be45 	.word	0x0800be45
 800bde8:	0800be45 	.word	0x0800be45
 800bdec:	0800be45 	.word	0x0800be45
 800bdf0:	0800be33 	.word	0x0800be33
 800bdf4:	0800be45 	.word	0x0800be45
 800bdf8:	0800bdfd 	.word	0x0800bdfd
	case 'n': //<down
		setInput(inNum, op, outs, timerNum);
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	b2db      	uxtb	r3, r3
 800be04:	7fb9      	ldrb	r1, [r7, #30]
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f7ff fae6 	bl	800b3d8 <setInput>
		break;
 800be0c:	e01a      	b.n	800be44 <cmdInput+0x1f0>
	case 'c': //<click
		setInputClick(inNum, op, outs, timerNum);
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	b29a      	uxth	r2, r3
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	b2db      	uxtb	r3, r3
 800be16:	7fb9      	ldrb	r1, [r7, #30]
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f7ff fb07 	bl	800b42c <setInputClick>
		break;
 800be1e:	e011      	b.n	800be44 <cmdInput+0x1f0>
	case 'd': //<double click
		setInputDoubleClick(inNum, op, outs, timerNum);
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	b29a      	uxth	r2, r3
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	b2db      	uxtb	r3, r3
 800be28:	7fb9      	ldrb	r1, [r7, #30]
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f7ff fb2c 	bl	800b488 <setInputDoubleClick>
		break;
 800be30:	e008      	b.n	800be44 <cmdInput+0x1f0>
	case 'l': //<long press
		setInputLPress(inNum, op, outs, timerNum);
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	b29a      	uxth	r2, r3
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	7fb9      	ldrb	r1, [r7, #30]
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f7ff fb51 	bl	800b4e4 <setInputLPress>
		break;
 800be42:	bf00      	nop
	};
	printConfigInput(inNum);
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f7ff fe51 	bl	800baec <printConfigInput>
	return true;
 800be4a:	2301      	movs	r3, #1
};
 800be4c:	4618      	mov	r0, r3
 800be4e:	3720      	adds	r7, #32
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	0800eed0 	.word	0x0800eed0
 800be58:	0800ef38 	.word	0x0800ef38
 800be5c:	0800ef40 	.word	0x0800ef40
 800be60:	0800ef48 	.word	0x0800ef48
 800be64:	0800ef50 	.word	0x0800ef50
 800be68:	0800ef58 	.word	0x0800ef58
 800be6c:	0800ef60 	.word	0x0800ef60
 800be70:	0800ef64 	.word	0x0800ef64
 800be74:	0800ee90 	.word	0x0800ee90
 800be78:	0800ed58 	.word	0x0800ed58

0800be7c <cmdTimer>:

bool cmdTimer(char * args){
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
	//token number of port
	char * tok = strtok(args, " ");
 800be84:	4925      	ldr	r1, [pc, #148]	; (800bf1c <cmdTimer+0xa0>)
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f001 fc72 	bl	800d770 <strtok>
 800be8c:	6178      	str	r0, [r7, #20]
	if (!tok) return false;
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d101      	bne.n	800be98 <cmdTimer+0x1c>
 800be94:	2300      	movs	r3, #0
 800be96:	e03c      	b.n	800bf12 <cmdTimer+0x96>
	int inNum = convertToInt(tok); 
 800be98:	6978      	ldr	r0, [r7, #20]
 800be9a:	f7ff fd05 	bl	800b8a8 <convertToInt>
 800be9e:	6138      	str	r0, [r7, #16]
	if ((inNum < 0) || (inNum >= MAX_TIMERS)) return false;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	db02      	blt.n	800beac <cmdTimer+0x30>
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	2b0f      	cmp	r3, #15
 800beaa:	dd01      	ble.n	800beb0 <cmdTimer+0x34>
 800beac:	2300      	movs	r3, #0
 800beae:	e030      	b.n	800bf12 <cmdTimer+0x96>
	
	//token seconds
	tok = strtok(NULL, " ");
 800beb0:	491a      	ldr	r1, [pc, #104]	; (800bf1c <cmdTimer+0xa0>)
 800beb2:	2000      	movs	r0, #0
 800beb4:	f001 fc5c 	bl	800d770 <strtok>
 800beb8:	6178      	str	r0, [r7, #20]
	if (!tok) return false;
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <cmdTimer+0x48>
 800bec0:	2300      	movs	r3, #0
 800bec2:	e026      	b.n	800bf12 <cmdTimer+0x96>
	int secs = convertToInt(tok);
 800bec4:	6978      	ldr	r0, [r7, #20]
 800bec6:	f7ff fcef 	bl	800b8a8 <convertToInt>
 800beca:	60f8      	str	r0, [r7, #12]
	if (secs < 0) return false;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	da01      	bge.n	800bed6 <cmdTimer+0x5a>
 800bed2:	2300      	movs	r3, #0
 800bed4:	e01d      	b.n	800bf12 <cmdTimer+0x96>

	//token NUMMASK
	tok = strtok(NULL, " ");
 800bed6:	4911      	ldr	r1, [pc, #68]	; (800bf1c <cmdTimer+0xa0>)
 800bed8:	2000      	movs	r0, #0
 800beda:	f001 fc49 	bl	800d770 <strtok>
 800bede:	6178      	str	r0, [r7, #20]
	if (!tok) return false;
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <cmdTimer+0x6e>
 800bee6:	2300      	movs	r3, #0
 800bee8:	e013      	b.n	800bf12 <cmdTimer+0x96>
	int outs = convertToInt(tok);
 800beea:	6978      	ldr	r0, [r7, #20]
 800beec:	f7ff fcdc 	bl	800b8a8 <convertToInt>
 800bef0:	60b8      	str	r0, [r7, #8]
	if (outs < 0) return false;
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	da01      	bge.n	800befc <cmdTimer+0x80>
 800bef8:	2300      	movs	r3, #0
 800befa:	e00a      	b.n	800bf12 <cmdTimer+0x96>
	
	setConfigTimer(inNum, outs, secs);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	b29b      	uxth	r3, r3
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	4619      	mov	r1, r3
 800bf04:	6938      	ldr	r0, [r7, #16]
 800bf06:	f7ff fb1b 	bl	800b540 <setConfigTimer>
	printConfigTimer(inNum);
 800bf0a:	6938      	ldr	r0, [r7, #16]
 800bf0c:	f7ff fe5a 	bl	800bbc4 <printConfigTimer>
	return true;
 800bf10:	2301      	movs	r3, #1
};
 800bf12:	4618      	mov	r0, r3
 800bf14:	3718      	adds	r7, #24
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	0800eed0 	.word	0x0800eed0

0800bf20 <cmdShow>:
bool cmdShow(char * args){
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b08a      	sub	sp, #40	; 0x28
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
	char * tok = strtok(args, " ");
 800bf28:	495c      	ldr	r1, [pc, #368]	; (800c09c <cmdShow+0x17c>)
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f001 fc20 	bl	800d770 <strtok>
 800bf30:	6138      	str	r0, [r7, #16]
	if (!tok) return false;
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <cmdShow+0x1c>
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e0aa      	b.n	800c092 <cmdShow+0x172>
	// config
	if (strcmp(tok, "config") == 0) {
 800bf3c:	4958      	ldr	r1, [pc, #352]	; (800c0a0 <cmdShow+0x180>)
 800bf3e:	6938      	ldr	r0, [r7, #16]
 800bf40:	f7f4 f906 	bl	8000150 <strcmp>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d11f      	bne.n	800bf8a <cmdShow+0x6a>
		print("Inputs\r\n");
 800bf4a:	4856      	ldr	r0, [pc, #344]	; (800c0a4 <cmdShow+0x184>)
 800bf4c:	f7ff fc16 	bl	800b77c <print>
		for(int i = 0; i < MAX_INPUTS; i++)
 800bf50:	2300      	movs	r3, #0
 800bf52:	627b      	str	r3, [r7, #36]	; 0x24
 800bf54:	e005      	b.n	800bf62 <cmdShow+0x42>
			printConfigInput(i);
 800bf56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf58:	f7ff fdc8 	bl	800baec <printConfigInput>
		for(int i = 0; i < MAX_INPUTS; i++)
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	3301      	adds	r3, #1
 800bf60:	627b      	str	r3, [r7, #36]	; 0x24
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	2b0f      	cmp	r3, #15
 800bf66:	ddf6      	ble.n	800bf56 <cmdShow+0x36>
		print("Timers\r\n");
 800bf68:	484f      	ldr	r0, [pc, #316]	; (800c0a8 <cmdShow+0x188>)
 800bf6a:	f7ff fc07 	bl	800b77c <print>
		for(int i = 0; i< MAX_TIMERS; i++)
 800bf6e:	2300      	movs	r3, #0
 800bf70:	623b      	str	r3, [r7, #32]
 800bf72:	e005      	b.n	800bf80 <cmdShow+0x60>
			printConfigTimer(i);
 800bf74:	6a38      	ldr	r0, [r7, #32]
 800bf76:	f7ff fe25 	bl	800bbc4 <printConfigTimer>
		for(int i = 0; i< MAX_TIMERS; i++)
 800bf7a:	6a3b      	ldr	r3, [r7, #32]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	623b      	str	r3, [r7, #32]
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	2b0f      	cmp	r3, #15
 800bf84:	ddf6      	ble.n	800bf74 <cmdShow+0x54>
		return true;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e083      	b.n	800c092 <cmdShow+0x172>
	};
	//input timer output
	if (strcmp(tok, "input") == 0 || strcmp(tok, "timer") == 0 || strcmp(tok, "output") == 0) {
 800bf8a:	4948      	ldr	r1, [pc, #288]	; (800c0ac <cmdShow+0x18c>)
 800bf8c:	6938      	ldr	r0, [r7, #16]
 800bf8e:	f7f4 f8df 	bl	8000150 <strcmp>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00d      	beq.n	800bfb4 <cmdShow+0x94>
 800bf98:	4945      	ldr	r1, [pc, #276]	; (800c0b0 <cmdShow+0x190>)
 800bf9a:	6938      	ldr	r0, [r7, #16]
 800bf9c:	f7f4 f8d8 	bl	8000150 <strcmp>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d006      	beq.n	800bfb4 <cmdShow+0x94>
 800bfa6:	4943      	ldr	r1, [pc, #268]	; (800c0b4 <cmdShow+0x194>)
 800bfa8:	6938      	ldr	r0, [r7, #16]
 800bfaa:	f7f4 f8d1 	bl	8000150 <strcmp>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d16b      	bne.n	800c08c <cmdShow+0x16c>
		char t = tok[0];
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	73fb      	strb	r3, [r7, #15]
		tok = strtok(NULL, " ");
 800bfba:	4938      	ldr	r1, [pc, #224]	; (800c09c <cmdShow+0x17c>)
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	f001 fbd7 	bl	800d770 <strtok>
 800bfc2:	6138      	str	r0, [r7, #16]
		int inNum = convertToInt(tok);
 800bfc4:	6938      	ldr	r0, [r7, #16]
 800bfc6:	f7ff fc6f 	bl	800b8a8 <convertToInt>
 800bfca:	60b8      	str	r0, [r7, #8]
		if (inNum < 0) {
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	da2f      	bge.n	800c032 <cmdShow+0x112>
			//not a number or empty str
			//print("Not a number or empty\r\n");
			switch(t) {
 800bfd2:	7bfb      	ldrb	r3, [r7, #15]
 800bfd4:	2b6f      	cmp	r3, #111	; 0x6f
 800bfd6:	d01d      	beq.n	800c014 <cmdShow+0xf4>
 800bfd8:	2b74      	cmp	r3, #116	; 0x74
 800bfda:	d00e      	beq.n	800bffa <cmdShow+0xda>
 800bfdc:	2b69      	cmp	r3, #105	; 0x69
 800bfde:	d126      	bne.n	800c02e <cmdShow+0x10e>
				case 'i':
					for(int i = 0; i < MAX_INPUTS; i++)
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	61fb      	str	r3, [r7, #28]
 800bfe4:	e005      	b.n	800bff2 <cmdShow+0xd2>
						printConfigInput(i);
 800bfe6:	69f8      	ldr	r0, [r7, #28]
 800bfe8:	f7ff fd80 	bl	800baec <printConfigInput>
					for(int i = 0; i < MAX_INPUTS; i++)
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	3301      	adds	r3, #1
 800bff0:	61fb      	str	r3, [r7, #28]
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	2b0f      	cmp	r3, #15
 800bff6:	ddf6      	ble.n	800bfe6 <cmdShow+0xc6>
					break;
 800bff8:	e019      	b.n	800c02e <cmdShow+0x10e>
				case 't':
					for(int i = 0; i < MAX_TIMERS; i++)
 800bffa:	2300      	movs	r3, #0
 800bffc:	61bb      	str	r3, [r7, #24]
 800bffe:	e005      	b.n	800c00c <cmdShow+0xec>
						printConfigTimer(i);
 800c000:	69b8      	ldr	r0, [r7, #24]
 800c002:	f7ff fddf 	bl	800bbc4 <printConfigTimer>
					for(int i = 0; i < MAX_TIMERS; i++)
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	3301      	adds	r3, #1
 800c00a:	61bb      	str	r3, [r7, #24]
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	2b0f      	cmp	r3, #15
 800c010:	ddf6      	ble.n	800c000 <cmdShow+0xe0>
					break;
 800c012:	e00c      	b.n	800c02e <cmdShow+0x10e>
				case 'o':
					for(int i = 0; i < MAX_OUTPUTS; i++)
 800c014:	2300      	movs	r3, #0
 800c016:	617b      	str	r3, [r7, #20]
 800c018:	e005      	b.n	800c026 <cmdShow+0x106>
						printOutputState(i);
 800c01a:	6978      	ldr	r0, [r7, #20]
 800c01c:	f7ff fd04 	bl	800ba28 <printOutputState>
					for(int i = 0; i < MAX_OUTPUTS; i++)
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	3301      	adds	r3, #1
 800c024:	617b      	str	r3, [r7, #20]
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	2b0f      	cmp	r3, #15
 800c02a:	ddf6      	ble.n	800c01a <cmdShow+0xfa>
					break;
 800c02c:	bf00      	nop
			}
			return true;
 800c02e:	2301      	movs	r3, #1
 800c030:	e02f      	b.n	800c092 <cmdShow+0x172>
		}
		if (inNum >= MAX_INPUTS && t == 'i') return false;
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	2b0f      	cmp	r3, #15
 800c036:	dd04      	ble.n	800c042 <cmdShow+0x122>
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	2b69      	cmp	r3, #105	; 0x69
 800c03c:	d101      	bne.n	800c042 <cmdShow+0x122>
 800c03e:	2300      	movs	r3, #0
 800c040:	e027      	b.n	800c092 <cmdShow+0x172>
		if (inNum >= MAX_TIMERS && t == 't') return false;
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b0f      	cmp	r3, #15
 800c046:	dd04      	ble.n	800c052 <cmdShow+0x132>
 800c048:	7bfb      	ldrb	r3, [r7, #15]
 800c04a:	2b74      	cmp	r3, #116	; 0x74
 800c04c:	d101      	bne.n	800c052 <cmdShow+0x132>
 800c04e:	2300      	movs	r3, #0
 800c050:	e01f      	b.n	800c092 <cmdShow+0x172>
		if (inNum >= MAX_OUTPUTS && t == 'o') return false;
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2b0f      	cmp	r3, #15
 800c056:	dd04      	ble.n	800c062 <cmdShow+0x142>
 800c058:	7bfb      	ldrb	r3, [r7, #15]
 800c05a:	2b6f      	cmp	r3, #111	; 0x6f
 800c05c:	d101      	bne.n	800c062 <cmdShow+0x142>
 800c05e:	2300      	movs	r3, #0
 800c060:	e017      	b.n	800c092 <cmdShow+0x172>
		switch(t) {
 800c062:	7bfb      	ldrb	r3, [r7, #15]
 800c064:	2b6f      	cmp	r3, #111	; 0x6f
 800c066:	d00c      	beq.n	800c082 <cmdShow+0x162>
 800c068:	2b74      	cmp	r3, #116	; 0x74
 800c06a:	d006      	beq.n	800c07a <cmdShow+0x15a>
 800c06c:	2b69      	cmp	r3, #105	; 0x69
 800c06e:	d000      	beq.n	800c072 <cmdShow+0x152>
	if (strcmp(tok, "input") == 0 || strcmp(tok, "timer") == 0 || strcmp(tok, "output") == 0) {
 800c070:	e00e      	b.n	800c090 <cmdShow+0x170>
			case 'i':
				printConfigInput(inNum);
 800c072:	68b8      	ldr	r0, [r7, #8]
 800c074:	f7ff fd3a 	bl	800baec <printConfigInput>
				break;
 800c078:	e007      	b.n	800c08a <cmdShow+0x16a>
			case 't':
				printConfigTimer(inNum);
 800c07a:	68b8      	ldr	r0, [r7, #8]
 800c07c:	f7ff fda2 	bl	800bbc4 <printConfigTimer>
				break;
 800c080:	e003      	b.n	800c08a <cmdShow+0x16a>
			case 'o':
				printOutputState(inNum);
 800c082:	68b8      	ldr	r0, [r7, #8]
 800c084:	f7ff fcd0 	bl	800ba28 <printOutputState>
				break;
 800c088:	bf00      	nop
	if (strcmp(tok, "input") == 0 || strcmp(tok, "timer") == 0 || strcmp(tok, "output") == 0) {
 800c08a:	e001      	b.n	800c090 <cmdShow+0x170>
		}
		
	} else return false;
 800c08c:	2300      	movs	r3, #0
 800c08e:	e000      	b.n	800c092 <cmdShow+0x172>
	
	return true;
 800c090:	2301      	movs	r3, #1
};
 800c092:	4618      	mov	r0, r3
 800c094:	3728      	adds	r7, #40	; 0x28
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	0800eed0 	.word	0x0800eed0
 800c0a0:	0800ef68 	.word	0x0800ef68
 800c0a4:	0800ef70 	.word	0x0800ef70
 800c0a8:	0800ef7c 	.word	0x0800ef7c
 800c0ac:	0800e9f8 	.word	0x0800e9f8
 800c0b0:	0800ed58 	.word	0x0800ed58
 800c0b4:	0800ec8c 	.word	0x0800ec8c

0800c0b8 <cmdOutput>:
bool cmdOutput(char * args){
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
	//tocken number of out port
	char * tok = strtok(args, " ");
 800c0c0:	4925      	ldr	r1, [pc, #148]	; (800c158 <cmdOutput+0xa0>)
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f001 fb54 	bl	800d770 <strtok>
 800c0c8:	60f8      	str	r0, [r7, #12]
	if (!tok) return false;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <cmdOutput+0x1c>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e03c      	b.n	800c14e <cmdOutput+0x96>
	int inNum = convertToInt(tok); 
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f7ff fbe7 	bl	800b8a8 <convertToInt>
 800c0da:	60b8      	str	r0, [r7, #8]
	if ((inNum < 0) || (inNum >= MAX_OUTPUTS)) return false;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	db02      	blt.n	800c0e8 <cmdOutput+0x30>
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	2b0f      	cmp	r3, #15
 800c0e6:	dd01      	ble.n	800c0ec <cmdOutput+0x34>
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	e030      	b.n	800c14e <cmdOutput+0x96>
	
	//token seconds
	tok = strtok(NULL, " ");
 800c0ec:	491a      	ldr	r1, [pc, #104]	; (800c158 <cmdOutput+0xa0>)
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	f001 fb3e 	bl	800d770 <strtok>
 800c0f4:	60f8      	str	r0, [r7, #12]
	if (!tok) return false;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d101      	bne.n	800c100 <cmdOutput+0x48>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	e026      	b.n	800c14e <cmdOutput+0x96>
	if (strcmp("toggle", tok) == 0) setOutputToggle(inNum);
 800c100:	68f9      	ldr	r1, [r7, #12]
 800c102:	4816      	ldr	r0, [pc, #88]	; (800c15c <cmdOutput+0xa4>)
 800c104:	f7f4 f824 	bl	8000150 <strcmp>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d103      	bne.n	800c116 <cmdOutput+0x5e>
 800c10e:	68b8      	ldr	r0, [r7, #8]
 800c110:	f000 ffc4 	bl	800d09c <setOutputToggle>
 800c114:	e017      	b.n	800c146 <cmdOutput+0x8e>
	else if (strcmp("on", tok) == 0) setOutputOn(inNum);
 800c116:	68f9      	ldr	r1, [r7, #12]
 800c118:	4811      	ldr	r0, [pc, #68]	; (800c160 <cmdOutput+0xa8>)
 800c11a:	f7f4 f819 	bl	8000150 <strcmp>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d103      	bne.n	800c12c <cmdOutput+0x74>
 800c124:	68b8      	ldr	r0, [r7, #8]
 800c126:	f000 ff77 	bl	800d018 <setOutputOn>
 800c12a:	e00c      	b.n	800c146 <cmdOutput+0x8e>
	else if (strcmp("off", tok) == 0) setOutputOff(inNum);
 800c12c:	68f9      	ldr	r1, [r7, #12]
 800c12e:	480d      	ldr	r0, [pc, #52]	; (800c164 <cmdOutput+0xac>)
 800c130:	f7f4 f80e 	bl	8000150 <strcmp>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d103      	bne.n	800c142 <cmdOutput+0x8a>
 800c13a:	68b8      	ldr	r0, [r7, #8]
 800c13c:	f000 ff8c 	bl	800d058 <setOutputOff>
 800c140:	e001      	b.n	800c146 <cmdOutput+0x8e>
	else return false;
 800c142:	2300      	movs	r3, #0
 800c144:	e003      	b.n	800c14e <cmdOutput+0x96>
	printOutputState(inNum);
 800c146:	68b8      	ldr	r0, [r7, #8]
 800c148:	f7ff fc6e 	bl	800ba28 <printOutputState>
	return true;
 800c14c:	2301      	movs	r3, #1
};
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	0800eed0 	.word	0x0800eed0
 800c15c:	0800ef58 	.word	0x0800ef58
 800c160:	0800ef60 	.word	0x0800ef60
 800c164:	0800ef64 	.word	0x0800ef64

0800c168 <cmdSave>:

bool cmdSave(char * args) {
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
	if (saveToFlash() == 0) {
 800c170:	f7ff fada 	bl	800b728 <saveToFlash>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d104      	bne.n	800c184 <cmdSave+0x1c>
		print("Configuration saved successefuly\r\n");
 800c17a:	4805      	ldr	r0, [pc, #20]	; (800c190 <cmdSave+0x28>)
 800c17c:	f7ff fafe 	bl	800b77c <print>
		return true;
 800c180:	2301      	movs	r3, #1
 800c182:	e000      	b.n	800c186 <cmdSave+0x1e>
	}
	else return false;
 800c184:	2300      	movs	r3, #0
};
 800c186:	4618      	mov	r0, r3
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	0800ef88 	.word	0x0800ef88

0800c194 <putBufPtr>:

////////////////////////////////////////////////
void putBufPtr(uint8_t * Buf, uint32_t * Len){
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
	cBuf = Buf;
 800c19e:	4a05      	ldr	r2, [pc, #20]	; (800c1b4 <putBufPtr+0x20>)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6013      	str	r3, [r2, #0]
	cLen = Len;
 800c1a4:	4a04      	ldr	r2, [pc, #16]	; (800c1b8 <putBufPtr+0x24>)
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	6013      	str	r3, [r2, #0]
};
 800c1aa:	bf00      	nop
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bc80      	pop	{r7}
 800c1b2:	4770      	bx	lr
 800c1b4:	20004098 	.word	0x20004098
 800c1b8:	2000409c 	.word	0x2000409c

0800c1bc <consThread>:

/////////////////////////////////////////////



void consThread(void * arg){
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
	int timeoutCounter = TERM_TIMEOUT * 100;
 800c1c4:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800c1c8:	60fb      	str	r3, [r7, #12]
	while(1){
		if(cBuf) {
 800c1ca:	4b19      	ldr	r3, [pc, #100]	; (800c230 <consThread+0x74>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d01b      	beq.n	800c20a <consThread+0x4e>
			timeoutCounter = TERM_TIMEOUT * 100;
 800c1d2:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800c1d6:	60fb      	str	r3, [r7, #12]
			//CDC_Transmit_FS(cBuf, *cLen);
			cBuf[*cLen] = 0;
 800c1d8:	4b15      	ldr	r3, [pc, #84]	; (800c230 <consThread+0x74>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	4b15      	ldr	r3, [pc, #84]	; (800c234 <consThread+0x78>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	701a      	strb	r2, [r3, #0]
			processConsoleStr((char *)cBuf, cLen);
 800c1e8:	4b11      	ldr	r3, [pc, #68]	; (800c230 <consThread+0x74>)
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	4b11      	ldr	r3, [pc, #68]	; (800c234 <consThread+0x78>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	f000 fe2a 	bl	800ce4c <processConsoleStr>
			uint8_t *Buf = cBuf;
 800c1f8:	4b0d      	ldr	r3, [pc, #52]	; (800c230 <consThread+0x74>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	60bb      	str	r3, [r7, #8]
			cBuf = NULL;
 800c1fe:	4b0c      	ldr	r3, [pc, #48]	; (800c230 <consThread+0x74>)
 800c200:	2200      	movs	r2, #0
 800c202:	601a      	str	r2, [r3, #0]
			CDC_Receive_FS_ProcessNext(Buf);
 800c204:	68b8      	ldr	r0, [r7, #8]
 800c206:	f7fe faeb 	bl	800a7e0 <CDC_Receive_FS_ProcessNext>
		};
		if (timeoutCounter > 0)	timeoutCounter--;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	dd03      	ble.n	800c218 <consThread+0x5c>
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	3b01      	subs	r3, #1
 800c214:	60fb      	str	r3, [r7, #12]
 800c216:	e007      	b.n	800c228 <consThread+0x6c>
		else if (timeoutCounter == 0) {
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d104      	bne.n	800c228 <consThread+0x6c>
			closeTerm();
 800c21e:	f000 faa9 	bl	800c774 <closeTerm>
			timeoutCounter--;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3b01      	subs	r3, #1
 800c226:	60fb      	str	r3, [r7, #12]
		};
		//HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
		osDelay(10);
 800c228:	200a      	movs	r0, #10
 800c22a:	f7fb fe43 	bl	8007eb4 <osDelay>
		if(cBuf) {
 800c22e:	e7cc      	b.n	800c1ca <consThread+0xe>
 800c230:	20004098 	.word	0x20004098
 800c234:	2000409c 	.word	0x2000409c

0800c238 <consInit>:
const osThreadAttr_t consTask_attributes = {
  .name = "cons",
  .priority = (osPriority_t) osPriorityNormal,
  .stack_size = 512 * 4
};
void consInit(void){
 800c238:	b580      	push	{r7, lr}
 800c23a:	af00      	add	r7, sp, #0
	initCLI(cmds, print);
 800c23c:	4905      	ldr	r1, [pc, #20]	; (800c254 <consInit+0x1c>)
 800c23e:	4806      	ldr	r0, [pc, #24]	; (800c258 <consInit+0x20>)
 800c240:	f000 f810 	bl	800c264 <initCLI>
	/*osThreadId_t t = */osThreadNew(consThread, NULL, &consTask_attributes);
 800c244:	4a05      	ldr	r2, [pc, #20]	; (800c25c <consInit+0x24>)
 800c246:	2100      	movs	r1, #0
 800c248:	4805      	ldr	r0, [pc, #20]	; (800c260 <consInit+0x28>)
 800c24a:	f7fb fd89 	bl	8007d60 <osThreadNew>

}
 800c24e:	bf00      	nop
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	0800b77d 	.word	0x0800b77d
 800c258:	200001a4 	.word	0x200001a4
 800c25c:	0800f16c 	.word	0x0800f16c
 800c260:	0800c1bd 	.word	0x0800c1bd

0800c264 <initCLI>:
#define HIST_ROUND_IDX(idx)	(histRoundStart + idx) % HIST_BUFFER_SIZE
char histBuffer[HIST_BUFFER_SIZE] = {0};
uint16_t histRoundStart = 0, histSize = 0, histCur = 0;
/////////////////////////////////////////
////////////////////////////////////////
void initCLI(EMCCommand * aCmds, PrintFunc pFunc){
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
	commands = aCmds;
 800c26e:	4a05      	ldr	r2, [pc, #20]	; (800c284 <initCLI+0x20>)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6013      	str	r3, [r2, #0]
	printFunc = pFunc;
 800c274:	4a04      	ldr	r2, [pc, #16]	; (800c288 <initCLI+0x24>)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	6013      	str	r3, [r2, #0]
};
 800c27a:	bf00      	nop
 800c27c:	370c      	adds	r7, #12
 800c27e:	46bd      	mov	sp, r7
 800c280:	bc80      	pop	{r7}
 800c282:	4770      	bx	lr
 800c284:	2000304c 	.word	0x2000304c
 800c288:	20003048 	.word	0x20003048

0800c28c <printCh>:

//////////////////////////////////////
void printCh(char ch) {
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	71fb      	strb	r3, [r7, #7]
	if (!termStarted) return;
 800c296:	4b09      	ldr	r3, [pc, #36]	; (800c2bc <printCh+0x30>)
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00a      	beq.n	800c2b4 <printCh+0x28>
	char buf[2] = {0};
 800c29e:	2300      	movs	r3, #0
 800c2a0:	81bb      	strh	r3, [r7, #12]
	buf[0] = ch;
 800c2a2:	79fb      	ldrb	r3, [r7, #7]
 800c2a4:	733b      	strb	r3, [r7, #12]
	printFunc(buf);
 800c2a6:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <printCh+0x34>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f107 020c 	add.w	r2, r7, #12
 800c2ae:	4610      	mov	r0, r2
 800c2b0:	4798      	blx	r3
 800c2b2:	e000      	b.n	800c2b6 <printCh+0x2a>
	if (!termStarted) return;
 800c2b4:	bf00      	nop
};
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	20003044 	.word	0x20003044
 800c2c0:	20003048 	.word	0x20003048

0800c2c4 <redrawLineAfterCursor>:
//////////////////////////////////////
void redrawLineAfterCursor(){
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	af00      	add	r7, sp, #0
		printFunc(ESC_ERASE_FROM_CUR);
 800c2c8:	4b0b      	ldr	r3, [pc, #44]	; (800c2f8 <redrawLineAfterCursor+0x34>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	480b      	ldr	r0, [pc, #44]	; (800c2fc <redrawLineAfterCursor+0x38>)
 800c2ce:	4798      	blx	r3
		printFunc(ESC_SAVE_CUR_POS);
 800c2d0:	4b09      	ldr	r3, [pc, #36]	; (800c2f8 <redrawLineAfterCursor+0x34>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	480a      	ldr	r0, [pc, #40]	; (800c300 <redrawLineAfterCursor+0x3c>)
 800c2d6:	4798      	blx	r3
		printFunc(&lineCmdStr[lineCursor]);
 800c2d8:	4b07      	ldr	r3, [pc, #28]	; (800c2f8 <redrawLineAfterCursor+0x34>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a09      	ldr	r2, [pc, #36]	; (800c304 <redrawLineAfterCursor+0x40>)
 800c2de:	7812      	ldrb	r2, [r2, #0]
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	4a09      	ldr	r2, [pc, #36]	; (800c308 <redrawLineAfterCursor+0x44>)
 800c2e4:	440a      	add	r2, r1
 800c2e6:	4610      	mov	r0, r2
 800c2e8:	4798      	blx	r3
		printFunc(ESC_RESTORE_CUR_POS);
 800c2ea:	4b03      	ldr	r3, [pc, #12]	; (800c2f8 <redrawLineAfterCursor+0x34>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4807      	ldr	r0, [pc, #28]	; (800c30c <redrawLineAfterCursor+0x48>)
 800c2f0:	4798      	blx	r3
}
 800c2f2:	bf00      	nop
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20003048 	.word	0x20003048
 800c2fc:	0800efb4 	.word	0x0800efb4
 800c300:	0800efbc 	.word	0x0800efbc
 800c304:	200030d1 	.word	0x200030d1
 800c308:	20003050 	.word	0x20003050
 800c30c:	0800efc8 	.word	0x0800efc8

0800c310 <redrawCursor>:
void redrawCursor(){
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
	char s[8] = {0};
 800c316:	463b      	mov	r3, r7
 800c318:	2200      	movs	r2, #0
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	605a      	str	r2, [r3, #4]
	snprintf(s, 7, ESC_CUR_MOV_ABS, strlen(PROMPT_STR) + lineCursor + 1);
 800c31e:	4b08      	ldr	r3, [pc, #32]	; (800c340 <redrawCursor+0x30>)
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	3308      	adds	r3, #8
 800c324:	4638      	mov	r0, r7
 800c326:	4a07      	ldr	r2, [pc, #28]	; (800c344 <redrawCursor+0x34>)
 800c328:	2107      	movs	r1, #7
 800c32a:	f001 f98d 	bl	800d648 <sniprintf>
	printFunc(s);
 800c32e:	4b06      	ldr	r3, [pc, #24]	; (800c348 <redrawCursor+0x38>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	463a      	mov	r2, r7
 800c334:	4610      	mov	r0, r2
 800c336:	4798      	blx	r3
};
 800c338:	bf00      	nop
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	200030d1 	.word	0x200030d1
 800c344:	0800efd4 	.word	0x0800efd4
 800c348:	20003048 	.word	0x20003048

0800c34c <histClean>:
	}
*/
}


void histClean(uint16_t cSize) {
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	4603      	mov	r3, r0
 800c354:	80fb      	strh	r3, [r7, #6]
	while(cSize + histSize > HIST_BUFFER_SIZE) {
 800c356:	e030      	b.n	800c3ba <histClean+0x6e>
		for (uint16_t q = 1; q < histSize; q ++) {
 800c358:	2301      	movs	r3, #1
 800c35a:	81fb      	strh	r3, [r7, #14]
 800c35c:	e028      	b.n	800c3b0 <histClean+0x64>
			uint16_t idx = HIST_ROUND_IDX(q);
 800c35e:	4b1d      	ldr	r3, [pc, #116]	; (800c3d4 <histClean+0x88>)
 800c360:	881a      	ldrh	r2, [r3, #0]
 800c362:	89fb      	ldrh	r3, [r7, #14]
 800c364:	4413      	add	r3, r2
 800c366:	b29b      	uxth	r3, r3
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	81bb      	strh	r3, [r7, #12]
			if(histBuffer[idx] && histBuffer[HIST_ROUND_IDX(q - 1)] == 0) {
 800c36c:	89bb      	ldrh	r3, [r7, #12]
 800c36e:	4a1a      	ldr	r2, [pc, #104]	; (800c3d8 <histClean+0x8c>)
 800c370:	5cd3      	ldrb	r3, [r2, r3]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d019      	beq.n	800c3aa <histClean+0x5e>
 800c376:	4b17      	ldr	r3, [pc, #92]	; (800c3d4 <histClean+0x88>)
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	89fb      	ldrh	r3, [r7, #14]
 800c37e:	4413      	add	r3, r2
 800c380:	3b01      	subs	r3, #1
 800c382:	425a      	negs	r2, r3
 800c384:	b2db      	uxtb	r3, r3
 800c386:	b2d2      	uxtb	r2, r2
 800c388:	bf58      	it	pl
 800c38a:	4253      	negpl	r3, r2
 800c38c:	4a12      	ldr	r2, [pc, #72]	; (800c3d8 <histClean+0x8c>)
 800c38e:	5cd3      	ldrb	r3, [r2, r3]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10a      	bne.n	800c3aa <histClean+0x5e>
				histRoundStart = idx;
 800c394:	4a0f      	ldr	r2, [pc, #60]	; (800c3d4 <histClean+0x88>)
 800c396:	89bb      	ldrh	r3, [r7, #12]
 800c398:	8013      	strh	r3, [r2, #0]
				histSize -= q;
 800c39a:	4b10      	ldr	r3, [pc, #64]	; (800c3dc <histClean+0x90>)
 800c39c:	881a      	ldrh	r2, [r3, #0]
 800c39e:	89fb      	ldrh	r3, [r7, #14]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	4b0d      	ldr	r3, [pc, #52]	; (800c3dc <histClean+0x90>)
 800c3a6:	801a      	strh	r2, [r3, #0]
				break;
 800c3a8:	e007      	b.n	800c3ba <histClean+0x6e>
		for (uint16_t q = 1; q < histSize; q ++) {
 800c3aa:	89fb      	ldrh	r3, [r7, #14]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	81fb      	strh	r3, [r7, #14]
 800c3b0:	4b0a      	ldr	r3, [pc, #40]	; (800c3dc <histClean+0x90>)
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	89fa      	ldrh	r2, [r7, #14]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d3d1      	bcc.n	800c35e <histClean+0x12>
	while(cSize + histSize > HIST_BUFFER_SIZE) {
 800c3ba:	88fb      	ldrh	r3, [r7, #6]
 800c3bc:	4a07      	ldr	r2, [pc, #28]	; (800c3dc <histClean+0x90>)
 800c3be:	8812      	ldrh	r2, [r2, #0]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3c6:	dcc7      	bgt.n	800c358 <histClean+0xc>
			}
		}
	}
};
 800c3c8:	bf00      	nop
 800c3ca:	3714      	adds	r7, #20
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bc80      	pop	{r7}
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	200031d8 	.word	0x200031d8
 800c3d8:	200030d8 	.word	0x200030d8
 800c3dc:	200031da 	.word	0x200031da

0800c3e0 <histPutIn>:
void histPutIn(void){
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
	int slen = strlen(lineCmdStr) + 1;
 800c3e6:	4824      	ldr	r0, [pc, #144]	; (800c478 <histPutIn+0x98>)
 800c3e8:	f7f3 febc 	bl	8000164 <strlen>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	603b      	str	r3, [r7, #0]
	if (slen == 1) return; //empty string
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d038      	beq.n	800c46a <histPutIn+0x8a>
	if (slen > HIST_BUFFER_SIZE) return; //lineCmdStr is oversize history buffer	
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3fe:	dc36      	bgt.n	800c46e <histPutIn+0x8e>
	if (slen > HIST_BUFFER_SIZE - histSize) //clean old history strings
 800c400:	4b1e      	ldr	r3, [pc, #120]	; (800c47c <histPutIn+0x9c>)
 800c402:	881b      	ldrh	r3, [r3, #0]
 800c404:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c408:	683a      	ldr	r2, [r7, #0]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	dd04      	ble.n	800c418 <histPutIn+0x38>
		histClean(slen);
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	b29b      	uxth	r3, r3
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff ff9a 	bl	800c34c <histClean>
	for(uint16_t q = 0; q < slen; q ++)
 800c418:	2300      	movs	r3, #0
 800c41a:	80fb      	strh	r3, [r7, #6]
 800c41c:	e014      	b.n	800c448 <histPutIn+0x68>
		histBuffer[HIST_ROUND_IDX(histSize + q)] = lineCmdStr[q];
 800c41e:	88fa      	ldrh	r2, [r7, #6]
 800c420:	4b17      	ldr	r3, [pc, #92]	; (800c480 <histPutIn+0xa0>)
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	4619      	mov	r1, r3
 800c426:	4b15      	ldr	r3, [pc, #84]	; (800c47c <histPutIn+0x9c>)
 800c428:	881b      	ldrh	r3, [r3, #0]
 800c42a:	4419      	add	r1, r3
 800c42c:	88fb      	ldrh	r3, [r7, #6]
 800c42e:	440b      	add	r3, r1
 800c430:	4259      	negs	r1, r3
 800c432:	b2db      	uxtb	r3, r3
 800c434:	b2c9      	uxtb	r1, r1
 800c436:	bf58      	it	pl
 800c438:	424b      	negpl	r3, r1
 800c43a:	490f      	ldr	r1, [pc, #60]	; (800c478 <histPutIn+0x98>)
 800c43c:	5c89      	ldrb	r1, [r1, r2]
 800c43e:	4a11      	ldr	r2, [pc, #68]	; (800c484 <histPutIn+0xa4>)
 800c440:	54d1      	strb	r1, [r2, r3]
	for(uint16_t q = 0; q < slen; q ++)
 800c442:	88fb      	ldrh	r3, [r7, #6]
 800c444:	3301      	adds	r3, #1
 800c446:	80fb      	strh	r3, [r7, #6]
 800c448:	88fb      	ldrh	r3, [r7, #6]
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	dce6      	bgt.n	800c41e <histPutIn+0x3e>
	
	histCur = (histSize += slen);
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	b29a      	uxth	r2, r3
 800c454:	4b09      	ldr	r3, [pc, #36]	; (800c47c <histPutIn+0x9c>)
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	4413      	add	r3, r2
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	4b07      	ldr	r3, [pc, #28]	; (800c47c <histPutIn+0x9c>)
 800c45e:	801a      	strh	r2, [r3, #0]
 800c460:	4b06      	ldr	r3, [pc, #24]	; (800c47c <histPutIn+0x9c>)
 800c462:	881a      	ldrh	r2, [r3, #0]
 800c464:	4b08      	ldr	r3, [pc, #32]	; (800c488 <histPutIn+0xa8>)
 800c466:	801a      	strh	r2, [r3, #0]
 800c468:	e002      	b.n	800c470 <histPutIn+0x90>
	if (slen == 1) return; //empty string
 800c46a:	bf00      	nop
 800c46c:	e000      	b.n	800c470 <histPutIn+0x90>
	if (slen > HIST_BUFFER_SIZE) return; //lineCmdStr is oversize history buffer	
 800c46e:	bf00      	nop
};
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20003050 	.word	0x20003050
 800c47c:	200031da 	.word	0x200031da
 800c480:	200031d8 	.word	0x200031d8
 800c484:	200030d8 	.word	0x200030d8
 800c488:	200031dc 	.word	0x200031dc

0800c48c <histGetFrom>:
void histGetFrom(void) {
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
	for(uint16_t q = 0;; q++) {
 800c492:	2300      	movs	r3, #0
 800c494:	80fb      	strh	r3, [r7, #6]
		lineCmdStr[q] = histBuffer[HIST_ROUND_IDX(histCur + q)];
 800c496:	4b18      	ldr	r3, [pc, #96]	; (800c4f8 <histGetFrom+0x6c>)
 800c498:	881b      	ldrh	r3, [r3, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	4b17      	ldr	r3, [pc, #92]	; (800c4fc <histGetFrom+0x70>)
 800c49e:	881b      	ldrh	r3, [r3, #0]
 800c4a0:	441a      	add	r2, r3
 800c4a2:	88fb      	ldrh	r3, [r7, #6]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	425a      	negs	r2, r3
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	b2d2      	uxtb	r2, r2
 800c4ac:	bf58      	it	pl
 800c4ae:	4253      	negpl	r3, r2
 800c4b0:	88fa      	ldrh	r2, [r7, #6]
 800c4b2:	4913      	ldr	r1, [pc, #76]	; (800c500 <histGetFrom+0x74>)
 800c4b4:	5cc9      	ldrb	r1, [r1, r3]
 800c4b6:	4b13      	ldr	r3, [pc, #76]	; (800c504 <histGetFrom+0x78>)
 800c4b8:	5499      	strb	r1, [r3, r2]
		if (lineCmdStr[q] == 0) {
 800c4ba:	88fb      	ldrh	r3, [r7, #6]
 800c4bc:	4a11      	ldr	r2, [pc, #68]	; (800c504 <histGetFrom+0x78>)
 800c4be:	5cd3      	ldrb	r3, [r2, r3]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d104      	bne.n	800c4ce <histGetFrom+0x42>
			lineLength = q;
 800c4c4:	88fb      	ldrh	r3, [r7, #6]
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	4b0f      	ldr	r3, [pc, #60]	; (800c508 <histGetFrom+0x7c>)
 800c4ca:	701a      	strb	r2, [r3, #0]
			break;
 800c4cc:	e003      	b.n	800c4d6 <histGetFrom+0x4a>
	for(uint16_t q = 0;; q++) {
 800c4ce:	88fb      	ldrh	r3, [r7, #6]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	80fb      	strh	r3, [r7, #6]
		lineCmdStr[q] = histBuffer[HIST_ROUND_IDX(histCur + q)];
 800c4d4:	e7df      	b.n	800c496 <histGetFrom+0xa>
		}
	}
	lineCursor = 0;
 800c4d6:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <histGetFrom+0x80>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	701a      	strb	r2, [r3, #0]
	redrawCursor();
 800c4dc:	f7ff ff18 	bl	800c310 <redrawCursor>
	redrawLineAfterCursor();
 800c4e0:	f7ff fef0 	bl	800c2c4 <redrawLineAfterCursor>
	lineCursor = lineLength;
 800c4e4:	4b08      	ldr	r3, [pc, #32]	; (800c508 <histGetFrom+0x7c>)
 800c4e6:	781a      	ldrb	r2, [r3, #0]
 800c4e8:	4b08      	ldr	r3, [pc, #32]	; (800c50c <histGetFrom+0x80>)
 800c4ea:	701a      	strb	r2, [r3, #0]
	redrawCursor();
 800c4ec:	f7ff ff10 	bl	800c310 <redrawCursor>
};
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	200031d8 	.word	0x200031d8
 800c4fc:	200031dc 	.word	0x200031dc
 800c500:	200030d8 	.word	0x200030d8
 800c504:	20003050 	.word	0x20003050
 800c508:	200030d2 	.word	0x200030d2
 800c50c:	200030d1 	.word	0x200030d1

0800c510 <histMove>:


void histMove(bool fwd) {
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	4603      	mov	r3, r0
 800c518:	71fb      	strb	r3, [r7, #7]
	if (fwd) { //move forward
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d030      	beq.n	800c582 <histMove+0x72>
		for(int q = histCur + 1;q < histSize ; q++) {
 800c520:	4b31      	ldr	r3, [pc, #196]	; (800c5e8 <histMove+0xd8>)
 800c522:	881b      	ldrh	r3, [r3, #0]
 800c524:	3301      	adds	r3, #1
 800c526:	60fb      	str	r3, [r7, #12]
 800c528:	e024      	b.n	800c574 <histMove+0x64>
			if (histBuffer[HIST_ROUND_IDX(q)] && histBuffer[HIST_ROUND_IDX(q - 1)] == 0) {
 800c52a:	4b30      	ldr	r3, [pc, #192]	; (800c5ec <histMove+0xdc>)
 800c52c:	881b      	ldrh	r3, [r3, #0]
 800c52e:	461a      	mov	r2, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	4413      	add	r3, r2
 800c534:	425a      	negs	r2, r3
 800c536:	b2db      	uxtb	r3, r3
 800c538:	b2d2      	uxtb	r2, r2
 800c53a:	bf58      	it	pl
 800c53c:	4253      	negpl	r3, r2
 800c53e:	4a2c      	ldr	r2, [pc, #176]	; (800c5f0 <histMove+0xe0>)
 800c540:	5cd3      	ldrb	r3, [r2, r3]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d013      	beq.n	800c56e <histMove+0x5e>
 800c546:	4b29      	ldr	r3, [pc, #164]	; (800c5ec <histMove+0xdc>)
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4413      	add	r3, r2
 800c550:	3b01      	subs	r3, #1
 800c552:	425a      	negs	r2, r3
 800c554:	b2db      	uxtb	r3, r3
 800c556:	b2d2      	uxtb	r2, r2
 800c558:	bf58      	it	pl
 800c55a:	4253      	negpl	r3, r2
 800c55c:	4a24      	ldr	r2, [pc, #144]	; (800c5f0 <histMove+0xe0>)
 800c55e:	5cd3      	ldrb	r3, [r2, r3]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d104      	bne.n	800c56e <histMove+0x5e>
				histCur = q;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	b29a      	uxth	r2, r3
 800c568:	4b1f      	ldr	r3, [pc, #124]	; (800c5e8 <histMove+0xd8>)
 800c56a:	801a      	strh	r2, [r3, #0]
				break;
 800c56c:	e037      	b.n	800c5de <histMove+0xce>
		for(int q = histCur + 1;q < histSize ; q++) {
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3301      	adds	r3, #1
 800c572:	60fb      	str	r3, [r7, #12]
 800c574:	4b1f      	ldr	r3, [pc, #124]	; (800c5f4 <histMove+0xe4>)
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	461a      	mov	r2, r3
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	4293      	cmp	r3, r2
 800c57e:	dbd4      	blt.n	800c52a <histMove+0x1a>
				histCur = q;
				break;
			}
		}
	}
};
 800c580:	e02d      	b.n	800c5de <histMove+0xce>
		for (int q = histCur - 1;q >= 0 ; q--) {
 800c582:	4b19      	ldr	r3, [pc, #100]	; (800c5e8 <histMove+0xd8>)
 800c584:	881b      	ldrh	r3, [r3, #0]
 800c586:	3b01      	subs	r3, #1
 800c588:	60bb      	str	r3, [r7, #8]
 800c58a:	e024      	b.n	800c5d6 <histMove+0xc6>
			if (histBuffer[HIST_ROUND_IDX(q)] && histBuffer[HIST_ROUND_IDX(q - 1)] == 0) {
 800c58c:	4b17      	ldr	r3, [pc, #92]	; (800c5ec <histMove+0xdc>)
 800c58e:	881b      	ldrh	r3, [r3, #0]
 800c590:	461a      	mov	r2, r3
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	4413      	add	r3, r2
 800c596:	425a      	negs	r2, r3
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	b2d2      	uxtb	r2, r2
 800c59c:	bf58      	it	pl
 800c59e:	4253      	negpl	r3, r2
 800c5a0:	4a13      	ldr	r2, [pc, #76]	; (800c5f0 <histMove+0xe0>)
 800c5a2:	5cd3      	ldrb	r3, [r2, r3]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d013      	beq.n	800c5d0 <histMove+0xc0>
 800c5a8:	4b10      	ldr	r3, [pc, #64]	; (800c5ec <histMove+0xdc>)
 800c5aa:	881b      	ldrh	r3, [r3, #0]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	425a      	negs	r2, r3
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	b2d2      	uxtb	r2, r2
 800c5ba:	bf58      	it	pl
 800c5bc:	4253      	negpl	r3, r2
 800c5be:	4a0c      	ldr	r2, [pc, #48]	; (800c5f0 <histMove+0xe0>)
 800c5c0:	5cd3      	ldrb	r3, [r2, r3]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d104      	bne.n	800c5d0 <histMove+0xc0>
				histCur = q;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	4b07      	ldr	r3, [pc, #28]	; (800c5e8 <histMove+0xd8>)
 800c5cc:	801a      	strh	r2, [r3, #0]
				break;
 800c5ce:	e006      	b.n	800c5de <histMove+0xce>
		for (int q = histCur - 1;q >= 0 ; q--) {
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	3b01      	subs	r3, #1
 800c5d4:	60bb      	str	r3, [r7, #8]
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	dad7      	bge.n	800c58c <histMove+0x7c>
};
 800c5dc:	e7ff      	b.n	800c5de <histMove+0xce>
 800c5de:	bf00      	nop
 800c5e0:	3714      	adds	r7, #20
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bc80      	pop	{r7}
 800c5e6:	4770      	bx	lr
 800c5e8:	200031dc 	.word	0x200031dc
 800c5ec:	200031d8 	.word	0x200031d8
 800c5f0:	200030d8 	.word	0x200030d8
 800c5f4:	200031da 	.word	0x200031da

0800c5f8 <putInLineCh>:
/////////////////////////////////////////




void putInLineCh(char ch){
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	4603      	mov	r3, r0
 800c600:	71fb      	strb	r3, [r7, #7]
	if (lineLength + 1 > lineMaxLength) // buffer oversize
 800c602:	4b2a      	ldr	r3, [pc, #168]	; (800c6ac <putInLineCh+0xb4>)
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	1c5a      	adds	r2, r3, #1
 800c608:	4b29      	ldr	r3, [pc, #164]	; (800c6b0 <putInLineCh+0xb8>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	dc48      	bgt.n	800c6a2 <putInLineCh+0xaa>
		return;
	lineCmdStr[lineLength] = 0;
 800c610:	4b26      	ldr	r3, [pc, #152]	; (800c6ac <putInLineCh+0xb4>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	461a      	mov	r2, r3
 800c616:	4b27      	ldr	r3, [pc, #156]	; (800c6b4 <putInLineCh+0xbc>)
 800c618:	2100      	movs	r1, #0
 800c61a:	5499      	strb	r1, [r3, r2]
	if (lineCursor < lineLength)
 800c61c:	4b26      	ldr	r3, [pc, #152]	; (800c6b8 <putInLineCh+0xc0>)
 800c61e:	781a      	ldrb	r2, [r3, #0]
 800c620:	4b22      	ldr	r3, [pc, #136]	; (800c6ac <putInLineCh+0xb4>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	429a      	cmp	r2, r3
 800c626:	d212      	bcs.n	800c64e <putInLineCh+0x56>
			memmove(&lineCmdStr[lineCursor + 1], &lineCmdStr[lineCursor], lineLength - lineCursor);
 800c628:	4b23      	ldr	r3, [pc, #140]	; (800c6b8 <putInLineCh+0xc0>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	3301      	adds	r3, #1
 800c62e:	4a21      	ldr	r2, [pc, #132]	; (800c6b4 <putInLineCh+0xbc>)
 800c630:	1898      	adds	r0, r3, r2
 800c632:	4b21      	ldr	r3, [pc, #132]	; (800c6b8 <putInLineCh+0xc0>)
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	461a      	mov	r2, r3
 800c638:	4b1e      	ldr	r3, [pc, #120]	; (800c6b4 <putInLineCh+0xbc>)
 800c63a:	18d1      	adds	r1, r2, r3
 800c63c:	4b1b      	ldr	r3, [pc, #108]	; (800c6ac <putInLineCh+0xb4>)
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	461a      	mov	r2, r3
 800c642:	4b1d      	ldr	r3, [pc, #116]	; (800c6b8 <putInLineCh+0xc0>)
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	461a      	mov	r2, r3
 800c64a:	f000 ffdc 	bl	800d606 <memmove>
	
	lineCmdStr[lineCursor] = ch;
 800c64e:	4b1a      	ldr	r3, [pc, #104]	; (800c6b8 <putInLineCh+0xc0>)
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	4619      	mov	r1, r3
 800c654:	4a17      	ldr	r2, [pc, #92]	; (800c6b4 <putInLineCh+0xbc>)
 800c656:	79fb      	ldrb	r3, [r7, #7]
 800c658:	5453      	strb	r3, [r2, r1]
	lineCmdStr[++lineLength] = 0;
 800c65a:	4b14      	ldr	r3, [pc, #80]	; (800c6ac <putInLineCh+0xb4>)
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	3301      	adds	r3, #1
 800c660:	b2da      	uxtb	r2, r3
 800c662:	4b12      	ldr	r3, [pc, #72]	; (800c6ac <putInLineCh+0xb4>)
 800c664:	701a      	strb	r2, [r3, #0]
 800c666:	4b11      	ldr	r3, [pc, #68]	; (800c6ac <putInLineCh+0xb4>)
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	4b11      	ldr	r3, [pc, #68]	; (800c6b4 <putInLineCh+0xbc>)
 800c66e:	2100      	movs	r1, #0
 800c670:	5499      	strb	r1, [r3, r2]
	if (lineCursor < lineLength) {
 800c672:	4b11      	ldr	r3, [pc, #68]	; (800c6b8 <putInLineCh+0xc0>)
 800c674:	781a      	ldrb	r2, [r3, #0]
 800c676:	4b0d      	ldr	r3, [pc, #52]	; (800c6ac <putInLineCh+0xb4>)
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d206      	bcs.n	800c68c <putInLineCh+0x94>
			redrawLineAfterCursor();
 800c67e:	f7ff fe21 	bl	800c2c4 <redrawLineAfterCursor>
			printFunc(ESC_CUR_FORW);
 800c682:	4b0e      	ldr	r3, [pc, #56]	; (800c6bc <putInLineCh+0xc4>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	480e      	ldr	r0, [pc, #56]	; (800c6c0 <putInLineCh+0xc8>)
 800c688:	4798      	blx	r3
 800c68a:	e003      	b.n	800c694 <putInLineCh+0x9c>
	} else {
		printCh(ch);
 800c68c:	79fb      	ldrb	r3, [r7, #7]
 800c68e:	4618      	mov	r0, r3
 800c690:	f7ff fdfc 	bl	800c28c <printCh>
	};
	lineCursor++;
 800c694:	4b08      	ldr	r3, [pc, #32]	; (800c6b8 <putInLineCh+0xc0>)
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	3301      	adds	r3, #1
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	4b06      	ldr	r3, [pc, #24]	; (800c6b8 <putInLineCh+0xc0>)
 800c69e:	701a      	strb	r2, [r3, #0]
 800c6a0:	e000      	b.n	800c6a4 <putInLineCh+0xac>
		return;
 800c6a2:	bf00      	nop
};
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	200030d2 	.word	0x200030d2
 800c6b0:	200030d4 	.word	0x200030d4
 800c6b4:	20003050 	.word	0x20003050
 800c6b8:	200030d1 	.word	0x200030d1
 800c6bc:	20003048 	.word	0x20003048
 800c6c0:	0800efe0 	.word	0x0800efe0

0800c6c4 <delInLine>:
void delInLine(bool bs) {
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	71fb      	strb	r3, [r7, #7]
	if (!lineLength) return;
 800c6ce:	4b24      	ldr	r3, [pc, #144]	; (800c760 <delInLine+0x9c>)
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d03d      	beq.n	800c752 <delInLine+0x8e>
	if (bs && lineCursor > 0){ //del previus symbol from cursor
 800c6d6:	79fb      	ldrb	r3, [r7, #7]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00d      	beq.n	800c6f8 <delInLine+0x34>
 800c6dc:	4b21      	ldr	r3, [pc, #132]	; (800c764 <delInLine+0xa0>)
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d009      	beq.n	800c6f8 <delInLine+0x34>
		lineCursor--;
 800c6e4:	4b1f      	ldr	r3, [pc, #124]	; (800c764 <delInLine+0xa0>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	4b1d      	ldr	r3, [pc, #116]	; (800c764 <delInLine+0xa0>)
 800c6ee:	701a      	strb	r2, [r3, #0]
		printFunc(ESC_CUR_BACK);
 800c6f0:	4b1d      	ldr	r3, [pc, #116]	; (800c768 <delInLine+0xa4>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	481d      	ldr	r0, [pc, #116]	; (800c76c <delInLine+0xa8>)
 800c6f6:	4798      	blx	r3
	}
	if (!bs && lineCursor >= lineLength) return;
 800c6f8:	79fb      	ldrb	r3, [r7, #7]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d105      	bne.n	800c70a <delInLine+0x46>
 800c6fe:	4b19      	ldr	r3, [pc, #100]	; (800c764 <delInLine+0xa0>)
 800c700:	781a      	ldrb	r2, [r3, #0]
 800c702:	4b17      	ldr	r3, [pc, #92]	; (800c760 <delInLine+0x9c>)
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	429a      	cmp	r2, r3
 800c708:	d225      	bcs.n	800c756 <delInLine+0x92>
	int mm = lineLength - lineCursor;
 800c70a:	4b15      	ldr	r3, [pc, #84]	; (800c760 <delInLine+0x9c>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	461a      	mov	r2, r3
 800c710:	4b14      	ldr	r3, [pc, #80]	; (800c764 <delInLine+0xa0>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	60fb      	str	r3, [r7, #12]
	//if (!mm) return;
	memmove(&lineCmdStr[lineCursor], &lineCmdStr[lineCursor + 1], mm);
 800c718:	4b12      	ldr	r3, [pc, #72]	; (800c764 <delInLine+0xa0>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	461a      	mov	r2, r3
 800c71e:	4b14      	ldr	r3, [pc, #80]	; (800c770 <delInLine+0xac>)
 800c720:	18d0      	adds	r0, r2, r3
 800c722:	4b10      	ldr	r3, [pc, #64]	; (800c764 <delInLine+0xa0>)
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	3301      	adds	r3, #1
 800c728:	4a11      	ldr	r2, [pc, #68]	; (800c770 <delInLine+0xac>)
 800c72a:	4413      	add	r3, r2
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	4619      	mov	r1, r3
 800c730:	f000 ff69 	bl	800d606 <memmove>
	lineCmdStr[--lineLength] = 0;
 800c734:	4b0a      	ldr	r3, [pc, #40]	; (800c760 <delInLine+0x9c>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	3b01      	subs	r3, #1
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	4b08      	ldr	r3, [pc, #32]	; (800c760 <delInLine+0x9c>)
 800c73e:	701a      	strb	r2, [r3, #0]
 800c740:	4b07      	ldr	r3, [pc, #28]	; (800c760 <delInLine+0x9c>)
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	461a      	mov	r2, r3
 800c746:	4b0a      	ldr	r3, [pc, #40]	; (800c770 <delInLine+0xac>)
 800c748:	2100      	movs	r1, #0
 800c74a:	5499      	strb	r1, [r3, r2]
	redrawLineAfterCursor();
 800c74c:	f7ff fdba 	bl	800c2c4 <redrawLineAfterCursor>
 800c750:	e002      	b.n	800c758 <delInLine+0x94>
	if (!lineLength) return;
 800c752:	bf00      	nop
 800c754:	e000      	b.n	800c758 <delInLine+0x94>
	if (!bs && lineCursor >= lineLength) return;
 800c756:	bf00      	nop
	//printCh(KEY_BS);
	
};
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	200030d2 	.word	0x200030d2
 800c764:	200030d1 	.word	0x200030d1
 800c768:	20003048 	.word	0x20003048
 800c76c:	0800efe8 	.word	0x0800efe8
 800c770:	20003050 	.word	0x20003050

0800c774 <closeTerm>:
//////////////////////////////////////
void closeTerm(void){
 800c774:	b580      	push	{r7, lr}
 800c776:	af00      	add	r7, sp, #0
	termStarted = false;
 800c778:	4b04      	ldr	r3, [pc, #16]	; (800c78c <closeTerm+0x18>)
 800c77a:	2200      	movs	r2, #0
 800c77c:	701a      	strb	r2, [r3, #0]
	printFunc(ESC_NEWLINE"terminal closed to open press <ENTER>"ESC_NEWLINE);
 800c77e:	4b04      	ldr	r3, [pc, #16]	; (800c790 <closeTerm+0x1c>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4804      	ldr	r0, [pc, #16]	; (800c794 <closeTerm+0x20>)
 800c784:	4798      	blx	r3
};
 800c786:	bf00      	nop
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	20003044 	.word	0x20003044
 800c790:	20003048 	.word	0x20003048
 800c794:	0800eff0 	.word	0x0800eff0

0800c798 <processCmds>:
//////////////////////////////////////
bool processCmds(char * cmdStr) {
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
	if(!cmdStr[0]) return true;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d101      	bne.n	800c7ac <processCmds+0x14>
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e038      	b.n	800c81e <processCmds+0x86>
	EMCCommand * cmd = commands;
 800c7ac:	4b1e      	ldr	r3, [pc, #120]	; (800c828 <processCmds+0x90>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60fb      	str	r3, [r7, #12]
	while(cmd->cmdName) {
 800c7b2:	e02f      	b.n	800c814 <processCmds+0x7c>
		int len = strlen(cmd->cmdName);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7f3 fcd3 	bl	8000164 <strlen>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	60bb      	str	r3, [r7, #8]
		if (strncmp(cmdStr, cmd->cmdName, len) == 0) {
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 ffbd 	bl	800d74a <strncmp>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d11b      	bne.n	800c80e <processCmds+0x76>
			if (cmdStr[len] == ' ') return cmd->cmdFunc(&(cmdStr[len+1]));
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	4413      	add	r3, r2
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	2b20      	cmp	r3, #32
 800c7e0:	d109      	bne.n	800c7f6 <processCmds+0x5e>
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	3201      	adds	r2, #1
 800c7ea:	6879      	ldr	r1, [r7, #4]
 800c7ec:	440a      	add	r2, r1
 800c7ee:	4610      	mov	r0, r2
 800c7f0:	4798      	blx	r3
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	e013      	b.n	800c81e <processCmds+0x86>
			else if (cmdStr[len] == 0) return cmd->cmdFunc(NULL);
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d105      	bne.n	800c80e <processCmds+0x76>
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	2000      	movs	r0, #0
 800c808:	4798      	blx	r3
 800c80a:	4603      	mov	r3, r0
 800c80c:	e007      	b.n	800c81e <processCmds+0x86>
		}
		cmd++;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3310      	adds	r3, #16
 800c812:	60fb      	str	r3, [r7, #12]
	while(cmd->cmdName) {
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1cb      	bne.n	800c7b4 <processCmds+0x1c>
	};
	return false;
 800c81c:	2300      	movs	r3, #0
};
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	2000304c 	.word	0x2000304c

0800c82c <toLower>:
//////////////////////////////////////
char * toLower(char * s) {
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
	for (char *p = s; *p; p++) *p = tolower(*p);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	e017      	b.n	800c86a <toLower+0x3e>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	72fb      	strb	r3, [r7, #11]
 800c840:	f000 feb6 	bl	800d5b0 <__locale_ctype_ptr>
 800c844:	4602      	mov	r2, r0
 800c846:	7afb      	ldrb	r3, [r7, #11]
 800c848:	3301      	adds	r3, #1
 800c84a:	4413      	add	r3, r2
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	f003 0303 	and.w	r3, r3, #3
 800c852:	2b01      	cmp	r3, #1
 800c854:	d102      	bne.n	800c85c <toLower+0x30>
 800c856:	7afb      	ldrb	r3, [r7, #11]
 800c858:	3320      	adds	r3, #32
 800c85a:	e000      	b.n	800c85e <toLower+0x32>
 800c85c:	7afb      	ldrb	r3, [r7, #11]
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	701a      	strb	r2, [r3, #0]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	3301      	adds	r3, #1
 800c868:	60fb      	str	r3, [r7, #12]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d1e3      	bne.n	800c83a <toLower+0xe>
	return s;
 800c872:	687b      	ldr	r3, [r7, #4]
};
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <processNewLine>:
void processNewLine(bool alt) {
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	4603      	mov	r3, r0
 800c884:	71fb      	strb	r3, [r7, #7]
	
	if (!termStarted) {
 800c886:	4b1f      	ldr	r3, [pc, #124]	; (800c904 <processNewLine+0x88>)
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d115      	bne.n	800c8ba <processNewLine+0x3e>
		printFunc(ESC_STARTTERM);
 800c88e:	4b1e      	ldr	r3, [pc, #120]	; (800c908 <processNewLine+0x8c>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	481e      	ldr	r0, [pc, #120]	; (800c90c <processNewLine+0x90>)
 800c894:	4798      	blx	r3
		printFunc(WELCOME_STR);
 800c896:	4b1c      	ldr	r3, [pc, #112]	; (800c908 <processNewLine+0x8c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	481d      	ldr	r0, [pc, #116]	; (800c910 <processNewLine+0x94>)
 800c89c:	4798      	blx	r3
		termStarted = true;
 800c89e:	4b19      	ldr	r3, [pc, #100]	; (800c904 <processNewLine+0x88>)
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	701a      	strb	r2, [r3, #0]
		lineCursor = lineLength = lineCmdStr[0] = 0;
 800c8a4:	4b1b      	ldr	r3, [pc, #108]	; (800c914 <processNewLine+0x98>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	701a      	strb	r2, [r3, #0]
 800c8aa:	4b1b      	ldr	r3, [pc, #108]	; (800c918 <processNewLine+0x9c>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	701a      	strb	r2, [r3, #0]
 800c8b0:	4b19      	ldr	r3, [pc, #100]	; (800c918 <processNewLine+0x9c>)
 800c8b2:	781a      	ldrb	r2, [r3, #0]
 800c8b4:	4b19      	ldr	r3, [pc, #100]	; (800c91c <processNewLine+0xa0>)
 800c8b6:	701a      	strb	r2, [r3, #0]
		return;
 800c8b8:	e020      	b.n	800c8fc <processNewLine+0x80>
	};
	printFunc(ESC_NEWLINE);
 800c8ba:	4b13      	ldr	r3, [pc, #76]	; (800c908 <processNewLine+0x8c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4818      	ldr	r0, [pc, #96]	; (800c920 <processNewLine+0xa4>)
 800c8c0:	4798      	blx	r3
	//printFunc(lineCmdStr);
	//printFunc(ESC_NEWLINE);
	toLower(lineCmdStr);
 800c8c2:	4814      	ldr	r0, [pc, #80]	; (800c914 <processNewLine+0x98>)
 800c8c4:	f7ff ffb2 	bl	800c82c <toLower>
	histPutIn();
 800c8c8:	f7ff fd8a 	bl	800c3e0 <histPutIn>
	if (!processCmds(lineCmdStr))
 800c8cc:	4811      	ldr	r0, [pc, #68]	; (800c914 <processNewLine+0x98>)
 800c8ce:	f7ff ff63 	bl	800c798 <processCmds>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d103      	bne.n	800c8e0 <processNewLine+0x64>
		printFunc("Error parsing command. Type help for list of available commands\r\n");
 800c8d8:	4b0b      	ldr	r3, [pc, #44]	; (800c908 <processNewLine+0x8c>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4811      	ldr	r0, [pc, #68]	; (800c924 <processNewLine+0xa8>)
 800c8de:	4798      	blx	r3
	printFunc(PROMPT_STR);
 800c8e0:	4b09      	ldr	r3, [pc, #36]	; (800c908 <processNewLine+0x8c>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4810      	ldr	r0, [pc, #64]	; (800c928 <processNewLine+0xac>)
 800c8e6:	4798      	blx	r3
	lineCursor = lineLength = lineCmdStr[0] = 0;
 800c8e8:	4b0a      	ldr	r3, [pc, #40]	; (800c914 <processNewLine+0x98>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	701a      	strb	r2, [r3, #0]
 800c8ee:	4b0a      	ldr	r3, [pc, #40]	; (800c918 <processNewLine+0x9c>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	701a      	strb	r2, [r3, #0]
 800c8f4:	4b08      	ldr	r3, [pc, #32]	; (800c918 <processNewLine+0x9c>)
 800c8f6:	781a      	ldrb	r2, [r3, #0]
 800c8f8:	4b08      	ldr	r3, [pc, #32]	; (800c91c <processNewLine+0xa0>)
 800c8fa:	701a      	strb	r2, [r3, #0]
};
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20003044 	.word	0x20003044
 800c908:	20003048 	.word	0x20003048
 800c90c:	0800f01c 	.word	0x0800f01c
 800c910:	0800f044 	.word	0x0800f044
 800c914:	20003050 	.word	0x20003050
 800c918:	200030d2 	.word	0x200030d2
 800c91c:	200030d1 	.word	0x200030d1
 800c920:	0800efdc 	.word	0x0800efdc
 800c924:	0800f0b0 	.word	0x0800f0b0
 800c928:	0800f0f4 	.word	0x0800f0f4

0800c92c <moveLineCursor>:

bool moveLineCursor(bool forward, bool byWord) {
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	4603      	mov	r3, r0
 800c934:	460a      	mov	r2, r1
 800c936:	71fb      	strb	r3, [r7, #7]
 800c938:	4613      	mov	r3, r2
 800c93a:	71bb      	strb	r3, [r7, #6]
	//int saveCursor = lineCursor;
	//char s[7] = {0};
	if(forward) {//move cursor to forward
 800c93c:	79fb      	ldrb	r3, [r7, #7]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d039      	beq.n	800c9b6 <moveLineCursor+0x8a>
		if (lineCursor >= lineLength) return false; //end of lineCmdStr dont move
 800c942:	4b3a      	ldr	r3, [pc, #232]	; (800ca2c <moveLineCursor+0x100>)
 800c944:	781a      	ldrb	r2, [r3, #0]
 800c946:	4b3a      	ldr	r3, [pc, #232]	; (800ca30 <moveLineCursor+0x104>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d301      	bcc.n	800c952 <moveLineCursor+0x26>
 800c94e:	2300      	movs	r3, #0
 800c950:	e067      	b.n	800ca22 <moveLineCursor+0xf6>
		lineCursor++;
 800c952:	4b36      	ldr	r3, [pc, #216]	; (800ca2c <moveLineCursor+0x100>)
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	3301      	adds	r3, #1
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	4b34      	ldr	r3, [pc, #208]	; (800ca2c <moveLineCursor+0x100>)
 800c95c:	701a      	strb	r2, [r3, #0]
		if (byWord) {
 800c95e:	79bb      	ldrb	r3, [r7, #6]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d05b      	beq.n	800ca1c <moveLineCursor+0xf0>
			while(lineCursor < lineLength && lineCmdStr[lineCursor] != 0x20)
 800c964:	e005      	b.n	800c972 <moveLineCursor+0x46>
				lineCursor++;
 800c966:	4b31      	ldr	r3, [pc, #196]	; (800ca2c <moveLineCursor+0x100>)
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	3301      	adds	r3, #1
 800c96c:	b2da      	uxtb	r2, r3
 800c96e:	4b2f      	ldr	r3, [pc, #188]	; (800ca2c <moveLineCursor+0x100>)
 800c970:	701a      	strb	r2, [r3, #0]
			while(lineCursor < lineLength && lineCmdStr[lineCursor] != 0x20)
 800c972:	4b2e      	ldr	r3, [pc, #184]	; (800ca2c <moveLineCursor+0x100>)
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	4b2e      	ldr	r3, [pc, #184]	; (800ca30 <moveLineCursor+0x104>)
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d20d      	bcs.n	800c99a <moveLineCursor+0x6e>
 800c97e:	4b2b      	ldr	r3, [pc, #172]	; (800ca2c <moveLineCursor+0x100>)
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	461a      	mov	r2, r3
 800c984:	4b2b      	ldr	r3, [pc, #172]	; (800ca34 <moveLineCursor+0x108>)
 800c986:	5c9b      	ldrb	r3, [r3, r2]
 800c988:	2b20      	cmp	r3, #32
 800c98a:	d1ec      	bne.n	800c966 <moveLineCursor+0x3a>
			while(lineCursor < lineLength && lineCmdStr[lineCursor] == 0x20)
 800c98c:	e005      	b.n	800c99a <moveLineCursor+0x6e>
				lineCursor++;
 800c98e:	4b27      	ldr	r3, [pc, #156]	; (800ca2c <moveLineCursor+0x100>)
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	3301      	adds	r3, #1
 800c994:	b2da      	uxtb	r2, r3
 800c996:	4b25      	ldr	r3, [pc, #148]	; (800ca2c <moveLineCursor+0x100>)
 800c998:	701a      	strb	r2, [r3, #0]
			while(lineCursor < lineLength && lineCmdStr[lineCursor] == 0x20)
 800c99a:	4b24      	ldr	r3, [pc, #144]	; (800ca2c <moveLineCursor+0x100>)
 800c99c:	781a      	ldrb	r2, [r3, #0]
 800c99e:	4b24      	ldr	r3, [pc, #144]	; (800ca30 <moveLineCursor+0x104>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d23a      	bcs.n	800ca1c <moveLineCursor+0xf0>
 800c9a6:	4b21      	ldr	r3, [pc, #132]	; (800ca2c <moveLineCursor+0x100>)
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	4b21      	ldr	r3, [pc, #132]	; (800ca34 <moveLineCursor+0x108>)
 800c9ae:	5c9b      	ldrb	r3, [r3, r2]
 800c9b0:	2b20      	cmp	r3, #32
 800c9b2:	d0ec      	beq.n	800c98e <moveLineCursor+0x62>
 800c9b4:	e032      	b.n	800ca1c <moveLineCursor+0xf0>
		}
		//snprintf(s, 6,  ESC_CUR_FORW_N, lineCursor - saveCursor);
	} else { //move cursor to back
		if (lineCursor <= 0) return false; //cursor at start of line
 800c9b6:	4b1d      	ldr	r3, [pc, #116]	; (800ca2c <moveLineCursor+0x100>)
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <moveLineCursor+0x96>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e02f      	b.n	800ca22 <moveLineCursor+0xf6>
		lineCursor--;
 800c9c2:	4b1a      	ldr	r3, [pc, #104]	; (800ca2c <moveLineCursor+0x100>)
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	b2da      	uxtb	r2, r3
 800c9ca:	4b18      	ldr	r3, [pc, #96]	; (800ca2c <moveLineCursor+0x100>)
 800c9cc:	701a      	strb	r2, [r3, #0]
		if (byWord) {
 800c9ce:	79bb      	ldrb	r3, [r7, #6]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d023      	beq.n	800ca1c <moveLineCursor+0xf0>
			while(lineCursor > 0 && lineCmdStr[lineCursor] == 0x20)
 800c9d4:	e005      	b.n	800c9e2 <moveLineCursor+0xb6>
				lineCursor--;
 800c9d6:	4b15      	ldr	r3, [pc, #84]	; (800ca2c <moveLineCursor+0x100>)
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	4b13      	ldr	r3, [pc, #76]	; (800ca2c <moveLineCursor+0x100>)
 800c9e0:	701a      	strb	r2, [r3, #0]
			while(lineCursor > 0 && lineCmdStr[lineCursor] == 0x20)
 800c9e2:	4b12      	ldr	r3, [pc, #72]	; (800ca2c <moveLineCursor+0x100>)
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00d      	beq.n	800ca06 <moveLineCursor+0xda>
 800c9ea:	4b10      	ldr	r3, [pc, #64]	; (800ca2c <moveLineCursor+0x100>)
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	4b10      	ldr	r3, [pc, #64]	; (800ca34 <moveLineCursor+0x108>)
 800c9f2:	5c9b      	ldrb	r3, [r3, r2]
 800c9f4:	2b20      	cmp	r3, #32
 800c9f6:	d0ee      	beq.n	800c9d6 <moveLineCursor+0xaa>
			while(lineCursor > 0 && lineCmdStr[lineCursor - 1] != 0x20)
 800c9f8:	e005      	b.n	800ca06 <moveLineCursor+0xda>
				lineCursor--;
 800c9fa:	4b0c      	ldr	r3, [pc, #48]	; (800ca2c <moveLineCursor+0x100>)
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	4b0a      	ldr	r3, [pc, #40]	; (800ca2c <moveLineCursor+0x100>)
 800ca04:	701a      	strb	r2, [r3, #0]
			while(lineCursor > 0 && lineCmdStr[lineCursor - 1] != 0x20)
 800ca06:	4b09      	ldr	r3, [pc, #36]	; (800ca2c <moveLineCursor+0x100>)
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d006      	beq.n	800ca1c <moveLineCursor+0xf0>
 800ca0e:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <moveLineCursor+0x100>)
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	3b01      	subs	r3, #1
 800ca14:	4a07      	ldr	r2, [pc, #28]	; (800ca34 <moveLineCursor+0x108>)
 800ca16:	5cd3      	ldrb	r3, [r2, r3]
 800ca18:	2b20      	cmp	r3, #32
 800ca1a:	d1ee      	bne.n	800c9fa <moveLineCursor+0xce>
		};
		//snprintf(s, 6,  ESC_CUR_BACK_N, saveCursor - lineCursor);
	};
	//printFunc(s); 
	redrawCursor();
 800ca1c:	f7ff fc78 	bl	800c310 <redrawCursor>
	return true;
 800ca20:	2301      	movs	r3, #1
};
 800ca22:	4618      	mov	r0, r3
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200030d1 	.word	0x200030d1
 800ca30:	200030d2 	.word	0x200030d2
 800ca34:	20003050 	.word	0x20003050

0800ca38 <processACMultiple>:
////////////////////////////////////////////////
void processACMultiple(char *lastCmd){
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b086      	sub	sp, #24
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
	EMCCommand * cmd = commands;
 800ca40:	4b42      	ldr	r3, [pc, #264]	; (800cb4c <processACMultiple+0x114>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	617b      	str	r3, [r7, #20]
	printFunc("\r\nAvailable commands: ");
 800ca46:	4b42      	ldr	r3, [pc, #264]	; (800cb50 <processACMultiple+0x118>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4842      	ldr	r0, [pc, #264]	; (800cb54 <processACMultiple+0x11c>)
 800ca4c:	4798      	blx	r3
	int i = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	613b      	str	r3, [r7, #16]
	while(cmd->cmdName) {
 800ca52:	e03d      	b.n	800cad0 <processACMultiple+0x98>
		if (strncmp(cmd->cmdName, lineCmdStr, lineLength) == 0) {
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	6818      	ldr	r0, [r3, #0]
 800ca58:	4b3f      	ldr	r3, [pc, #252]	; (800cb58 <processACMultiple+0x120>)
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	493f      	ldr	r1, [pc, #252]	; (800cb5c <processACMultiple+0x124>)
 800ca60:	f000 fe73 	bl	800d74a <strncmp>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d12f      	bne.n	800caca <processACMultiple+0x92>
			if (lastCmd != cmd->cmdName) 
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d020      	beq.n	800cab6 <processACMultiple+0x7e>
				for(i = lineLength; lastCmd[i] && cmd->cmdName[i]; i++)
 800ca74:	4b38      	ldr	r3, [pc, #224]	; (800cb58 <processACMultiple+0x120>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	613b      	str	r3, [r7, #16]
 800ca7a:	e00d      	b.n	800ca98 <processACMultiple+0x60>
					if (lastCmd[i] != cmd->cmdName[i]) break;
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	4413      	add	r3, r2
 800ca82:	781a      	ldrb	r2, [r3, #0]
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	6819      	ldr	r1, [r3, #0]
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	440b      	add	r3, r1
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d110      	bne.n	800cab4 <processACMultiple+0x7c>
				for(i = lineLength; lastCmd[i] && cmd->cmdName[i]; i++)
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	3301      	adds	r3, #1
 800ca96:	613b      	str	r3, [r7, #16]
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d008      	beq.n	800cab6 <processACMultiple+0x7e>
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	4413      	add	r3, r2
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1e4      	bne.n	800ca7c <processACMultiple+0x44>
 800cab2:	e000      	b.n	800cab6 <processACMultiple+0x7e>
					if (lastCmd[i] != cmd->cmdName[i]) break;
 800cab4:	bf00      	nop
			
			printFunc(cmd->cmdName);
 800cab6:	4b26      	ldr	r3, [pc, #152]	; (800cb50 <processACMultiple+0x118>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	6812      	ldr	r2, [r2, #0]
 800cabe:	4610      	mov	r0, r2
 800cac0:	4798      	blx	r3
			printFunc(" ");
 800cac2:	4b23      	ldr	r3, [pc, #140]	; (800cb50 <processACMultiple+0x118>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4826      	ldr	r0, [pc, #152]	; (800cb60 <processACMultiple+0x128>)
 800cac8:	4798      	blx	r3
		}
		cmd++;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	3310      	adds	r3, #16
 800cace:	617b      	str	r3, [r7, #20]
	while(cmd->cmdName) {
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1bd      	bne.n	800ca54 <processACMultiple+0x1c>
	}
	printFunc(ESC_NEWLINE);
 800cad8:	4b1d      	ldr	r3, [pc, #116]	; (800cb50 <processACMultiple+0x118>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4821      	ldr	r0, [pc, #132]	; (800cb64 <processACMultiple+0x12c>)
 800cade:	4798      	blx	r3
	printFunc(PROMPT_STR);
 800cae0:	4b1b      	ldr	r3, [pc, #108]	; (800cb50 <processACMultiple+0x118>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4820      	ldr	r0, [pc, #128]	; (800cb68 <processACMultiple+0x130>)
 800cae6:	4798      	blx	r3
	printFunc(lineCmdStr);
 800cae8:	4b19      	ldr	r3, [pc, #100]	; (800cb50 <processACMultiple+0x118>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	481b      	ldr	r0, [pc, #108]	; (800cb5c <processACMultiple+0x124>)
 800caee:	4798      	blx	r3
	for(int q = lineLength; q < i; q++) lineCmdStr[q] = lastCmd[q];
 800caf0:	4b19      	ldr	r3, [pc, #100]	; (800cb58 <processACMultiple+0x120>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	60fb      	str	r3, [r7, #12]
 800caf6:	e00b      	b.n	800cb10 <processACMultiple+0xd8>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	4413      	add	r3, r2
 800cafe:	7819      	ldrb	r1, [r3, #0]
 800cb00:	4a16      	ldr	r2, [pc, #88]	; (800cb5c <processACMultiple+0x124>)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	4413      	add	r3, r2
 800cb06:	460a      	mov	r2, r1
 800cb08:	701a      	strb	r2, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	60fb      	str	r3, [r7, #12]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	dbef      	blt.n	800caf8 <processACMultiple+0xc0>
	lineCmdStr[i] = 0;
 800cb18:	4a10      	ldr	r2, [pc, #64]	; (800cb5c <processACMultiple+0x124>)
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	2200      	movs	r2, #0
 800cb20:	701a      	strb	r2, [r3, #0]
	printFunc(&lineCmdStr[lineLength]);
 800cb22:	4b0b      	ldr	r3, [pc, #44]	; (800cb50 <processACMultiple+0x118>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a0c      	ldr	r2, [pc, #48]	; (800cb58 <processACMultiple+0x120>)
 800cb28:	7812      	ldrb	r2, [r2, #0]
 800cb2a:	4611      	mov	r1, r2
 800cb2c:	4a0b      	ldr	r2, [pc, #44]	; (800cb5c <processACMultiple+0x124>)
 800cb2e:	440a      	add	r2, r1
 800cb30:	4610      	mov	r0, r2
 800cb32:	4798      	blx	r3
	lineCursor = lineLength = i;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	4b07      	ldr	r3, [pc, #28]	; (800cb58 <processACMultiple+0x120>)
 800cb3a:	701a      	strb	r2, [r3, #0]
 800cb3c:	4b06      	ldr	r3, [pc, #24]	; (800cb58 <processACMultiple+0x120>)
 800cb3e:	781a      	ldrb	r2, [r3, #0]
 800cb40:	4b0a      	ldr	r3, [pc, #40]	; (800cb6c <processACMultiple+0x134>)
 800cb42:	701a      	strb	r2, [r3, #0]
	//printFunc(&lastCmd[lineLength]
};
 800cb44:	bf00      	nop
 800cb46:	3718      	adds	r7, #24
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	2000304c 	.word	0x2000304c
 800cb50:	20003048 	.word	0x20003048
 800cb54:	0800f0fc 	.word	0x0800f0fc
 800cb58:	200030d2 	.word	0x200030d2
 800cb5c:	20003050 	.word	0x20003050
 800cb60:	0800f114 	.word	0x0800f114
 800cb64:	0800efdc 	.word	0x0800efdc
 800cb68:	0800f0f4 	.word	0x0800f0f4
 800cb6c:	200030d1 	.word	0x200030d1

0800cb70 <processAutoComplete>:
void processAutoComplete(void){
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
	if (!lineLength) return; // empty string
 800cb76:	4b28      	ldr	r3, [pc, #160]	; (800cc18 <processAutoComplete+0xa8>)
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d048      	beq.n	800cc10 <processAutoComplete+0xa0>
	EMCCommand * cmd = commands;
 800cb7e:	4b27      	ldr	r3, [pc, #156]	; (800cc1c <processAutoComplete+0xac>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	60fb      	str	r3, [r7, #12]
	char * lastCmdName = NULL;
 800cb84:	2300      	movs	r3, #0
 800cb86:	60bb      	str	r3, [r7, #8]
	int cmdCount = 0;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	607b      	str	r3, [r7, #4]
	while(cmd->cmdName) {
 800cb8c:	e013      	b.n	800cbb6 <processAutoComplete+0x46>
		if (strncmp(cmd->cmdName, lineCmdStr, lineLength) == 0) {
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6818      	ldr	r0, [r3, #0]
 800cb92:	4b21      	ldr	r3, [pc, #132]	; (800cc18 <processAutoComplete+0xa8>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	461a      	mov	r2, r3
 800cb98:	4921      	ldr	r1, [pc, #132]	; (800cc20 <processAutoComplete+0xb0>)
 800cb9a:	f000 fdd6 	bl	800d74a <strncmp>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d105      	bne.n	800cbb0 <processAutoComplete+0x40>
			lastCmdName = cmd->cmdName;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	60bb      	str	r3, [r7, #8]
			cmdCount++;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	3301      	adds	r3, #1
 800cbae:	607b      	str	r3, [r7, #4]
		}
		cmd++;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3310      	adds	r3, #16
 800cbb4:	60fb      	str	r3, [r7, #12]
	while(cmd->cmdName) {
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1e7      	bne.n	800cb8e <processAutoComplete+0x1e>
	};
	if(cmdCount == 1) {// simple command do autocomplete
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d11e      	bne.n	800cc02 <processAutoComplete+0x92>
		
		strncat(lineCmdStr, &lastCmdName[lineLength], CMD_LINE_LEN - 1);
 800cbc4:	4b14      	ldr	r3, [pc, #80]	; (800cc18 <processAutoComplete+0xa8>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	4413      	add	r3, r2
 800cbce:	227f      	movs	r2, #127	; 0x7f
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	4813      	ldr	r0, [pc, #76]	; (800cc20 <processAutoComplete+0xb0>)
 800cbd4:	f000 fda5 	bl	800d722 <strncat>
		//strncat(lineCmdStr, " ", CMD_LINE_LEN - 1);
		printFunc(&lastCmdName[lineLength]);
 800cbd8:	4b12      	ldr	r3, [pc, #72]	; (800cc24 <processAutoComplete+0xb4>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a0e      	ldr	r2, [pc, #56]	; (800cc18 <processAutoComplete+0xa8>)
 800cbde:	7812      	ldrb	r2, [r2, #0]
 800cbe0:	4611      	mov	r1, r2
 800cbe2:	68ba      	ldr	r2, [r7, #8]
 800cbe4:	440a      	add	r2, r1
 800cbe6:	4610      	mov	r0, r2
 800cbe8:	4798      	blx	r3
		//printFunc(" ");
		lineCursor = lineLength = strlen(lineCmdStr);
 800cbea:	480d      	ldr	r0, [pc, #52]	; (800cc20 <processAutoComplete+0xb0>)
 800cbec:	f7f3 faba 	bl	8000164 <strlen>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	b2da      	uxtb	r2, r3
 800cbf4:	4b08      	ldr	r3, [pc, #32]	; (800cc18 <processAutoComplete+0xa8>)
 800cbf6:	701a      	strb	r2, [r3, #0]
 800cbf8:	4b07      	ldr	r3, [pc, #28]	; (800cc18 <processAutoComplete+0xa8>)
 800cbfa:	781a      	ldrb	r2, [r3, #0]
 800cbfc:	4b0a      	ldr	r3, [pc, #40]	; (800cc28 <processAutoComplete+0xb8>)
 800cbfe:	701a      	strb	r2, [r3, #0]
 800cc00:	e007      	b.n	800cc12 <processAutoComplete+0xa2>
	} else if (cmdCount > 1) processACMultiple(lastCmdName);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	dd04      	ble.n	800cc12 <processAutoComplete+0xa2>
 800cc08:	68b8      	ldr	r0, [r7, #8]
 800cc0a:	f7ff ff15 	bl	800ca38 <processACMultiple>
 800cc0e:	e000      	b.n	800cc12 <processAutoComplete+0xa2>
	if (!lineLength) return; // empty string
 800cc10:	bf00      	nop
};
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	200030d2 	.word	0x200030d2
 800cc1c:	2000304c 	.word	0x2000304c
 800cc20:	20003050 	.word	0x20003050
 800cc24:	20003048 	.word	0x20003048
 800cc28:	200030d1 	.word	0x200030d1

0800cc2c <processConsoleStr2>:
// processConsoleStr2
// str - input string
// alt - return true if expected alt sequence
// return remaining string
////////////////////////////////////////////////
char * processConsoleStr2(char * str, bool * alt) {
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
	int strl = strlen(str);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7f3 fa94 	bl	8000164 <strlen>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	60fb      	str	r3, [r7, #12]
	bool localAlt = *alt;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	72fb      	strb	r3, [r7, #11]
	*alt = false;
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	701a      	strb	r2, [r3, #0]
	if (strl >= 4 && str[0] == 0x1b && str[1] == 0x5b && str[3] == 0x7e) {// INS (0x32) | DEL (0x33) | HOME (0x31) | END (0x34) | PGUP (0x35) | PGDOWN (0x36)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2b03      	cmp	r3, #3
 800cc50:	dd2b      	ble.n	800ccaa <processConsoleStr2+0x7e>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	2b1b      	cmp	r3, #27
 800cc58:	d127      	bne.n	800ccaa <processConsoleStr2+0x7e>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	2b5b      	cmp	r3, #91	; 0x5b
 800cc62:	d122      	bne.n	800ccaa <processConsoleStr2+0x7e>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	3303      	adds	r3, #3
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b7e      	cmp	r3, #126	; 0x7e
 800cc6c:	d11d      	bne.n	800ccaa <processConsoleStr2+0x7e>
		switch(str[2]) {
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	3302      	adds	r3, #2
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	2b33      	cmp	r3, #51	; 0x33
 800cc76:	d004      	beq.n	800cc82 <processConsoleStr2+0x56>
 800cc78:	2b34      	cmp	r3, #52	; 0x34
 800cc7a:	d00c      	beq.n	800cc96 <processConsoleStr2+0x6a>
 800cc7c:	2b31      	cmp	r3, #49	; 0x31
 800cc7e:	d004      	beq.n	800cc8a <processConsoleStr2+0x5e>
 800cc80:	e010      	b.n	800cca4 <processConsoleStr2+0x78>
			case 0x33: // DEL
				delInLine(false);
 800cc82:	2000      	movs	r0, #0
 800cc84:	f7ff fd1e 	bl	800c6c4 <delInLine>
				break;
 800cc88:	e00c      	b.n	800cca4 <processConsoleStr2+0x78>
			case 0x31: // HOME
				lineCursor = 0;
 800cc8a:	4b69      	ldr	r3, [pc, #420]	; (800ce30 <processConsoleStr2+0x204>)
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	701a      	strb	r2, [r3, #0]
				redrawCursor();
 800cc90:	f7ff fb3e 	bl	800c310 <redrawCursor>
				break;
 800cc94:	e006      	b.n	800cca4 <processConsoleStr2+0x78>
			case 0x34: // END
				lineCursor = lineLength;
 800cc96:	4b67      	ldr	r3, [pc, #412]	; (800ce34 <processConsoleStr2+0x208>)
 800cc98:	781a      	ldrb	r2, [r3, #0]
 800cc9a:	4b65      	ldr	r3, [pc, #404]	; (800ce30 <processConsoleStr2+0x204>)
 800cc9c:	701a      	strb	r2, [r3, #0]
				redrawCursor();
 800cc9e:	f7ff fb37 	bl	800c310 <redrawCursor>
				break;
 800cca2:	bf00      	nop
		};
		return &str[4];
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	3304      	adds	r3, #4
 800cca8:	e0bd      	b.n	800ce26 <processConsoleStr2+0x1fa>
  ///////////////////////////////////////////////////////////////////////////////////////
	} else if (strl >= 3 && str[0] == 0x1b && str[1] == 'O') { // CSO codes CTRL + (LEFT (0x44) | RIGHT (0x43) | UP (0x41) | DOWN (0x42) | NUMPAD5 (0x47) )
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	dd1c      	ble.n	800ccea <processConsoleStr2+0xbe>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2b1b      	cmp	r3, #27
 800ccb6:	d118      	bne.n	800ccea <processConsoleStr2+0xbe>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	2b4f      	cmp	r3, #79	; 0x4f
 800ccc0:	d113      	bne.n	800ccea <processConsoleStr2+0xbe>
		switch(str[2]) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3302      	adds	r3, #2
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	2b43      	cmp	r3, #67	; 0x43
 800ccca:	d006      	beq.n	800ccda <processConsoleStr2+0xae>
 800cccc:	2b44      	cmp	r3, #68	; 0x44
 800ccce:	d109      	bne.n	800cce4 <processConsoleStr2+0xb8>
			case 0x44: // CTRL + LEFT
				moveLineCursor(false, true);
 800ccd0:	2101      	movs	r1, #1
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	f7ff fe2a 	bl	800c92c <moveLineCursor>
				break;
 800ccd8:	e004      	b.n	800cce4 <processConsoleStr2+0xb8>
			case 0x43: // CTRL + RIGHT
				moveLineCursor(true, true);
 800ccda:	2101      	movs	r1, #1
 800ccdc:	2001      	movs	r0, #1
 800ccde:	f7ff fe25 	bl	800c92c <moveLineCursor>
				break;
 800cce2:	bf00      	nop
		};
		return &str[3];
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3303      	adds	r3, #3
 800cce8:	e09d      	b.n	800ce26 <processConsoleStr2+0x1fa>
	///////////////////////////////////////////////////////////////////////////////////////
	} else if (strl >= 3 && str[0] == 0x1b && str[1] == '[') { //CSI codes
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2b02      	cmp	r3, #2
 800ccee:	dd54      	ble.n	800cd9a <processConsoleStr2+0x16e>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b1b      	cmp	r3, #27
 800ccf6:	d150      	bne.n	800cd9a <processConsoleStr2+0x16e>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2b5b      	cmp	r3, #91	; 0x5b
 800cd00:	d14b      	bne.n	800cd9a <processConsoleStr2+0x16e>
		if (sscanf(&str[2], "%d;%dR", &termRows, &termCols) == 2) {
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	1c98      	adds	r0, r3, #2
 800cd06:	4b4c      	ldr	r3, [pc, #304]	; (800ce38 <processConsoleStr2+0x20c>)
 800cd08:	4a4c      	ldr	r2, [pc, #304]	; (800ce3c <processConsoleStr2+0x210>)
 800cd0a:	494d      	ldr	r1, [pc, #308]	; (800ce40 <processConsoleStr2+0x214>)
 800cd0c:	f000 fcd0 	bl	800d6b0 <siscanf>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d116      	bne.n	800cd44 <processConsoleStr2+0x118>
			//answer back terminal to CSI 6 n command - current terminal size
			//set current terminal size etc
			lineMaxLength = CMD_LINE_LEN > (termCols - 1) ? (termCols - 1) : CMD_LINE_LEN;
 800cd16:	4b48      	ldr	r3, [pc, #288]	; (800ce38 <processConsoleStr2+0x20c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	2b80      	cmp	r3, #128	; 0x80
 800cd1e:	bfa8      	it	ge
 800cd20:	2380      	movge	r3, #128	; 0x80
 800cd22:	4a48      	ldr	r2, [pc, #288]	; (800ce44 <processConsoleStr2+0x218>)
 800cd24:	6013      	str	r3, [r2, #0]
			lineMaxLength -= strlen(PROMPT_STR);
 800cd26:	4b47      	ldr	r3, [pc, #284]	; (800ce44 <processConsoleStr2+0x218>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	3b07      	subs	r3, #7
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	4b45      	ldr	r3, [pc, #276]	; (800ce44 <processConsoleStr2+0x218>)
 800cd30:	601a      	str	r2, [r3, #0]
			return strchr(&str[2], 'R') + 1;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	3302      	adds	r3, #2
 800cd36:	2152      	movs	r1, #82	; 0x52
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 fce5 	bl	800d708 <strchr>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	3301      	adds	r3, #1
 800cd42:	e070      	b.n	800ce26 <processConsoleStr2+0x1fa>
		};
		switch(str[2]) {
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	3302      	adds	r3, #2
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	3b41      	subs	r3, #65	; 0x41
 800cd4c:	2b03      	cmp	r3, #3
 800cd4e:	d821      	bhi.n	800cd94 <processConsoleStr2+0x168>
 800cd50:	a201      	add	r2, pc, #4	; (adr r2, 800cd58 <processConsoleStr2+0x12c>)
 800cd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd56:	bf00      	nop
 800cd58:	0800cd7d 	.word	0x0800cd7d
 800cd5c:	0800cd89 	.word	0x0800cd89
 800cd60:	0800cd73 	.word	0x0800cd73
 800cd64:	0800cd69 	.word	0x0800cd69
			case 0x44: // LEFT
				moveLineCursor(false, false);
 800cd68:	2100      	movs	r1, #0
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	f7ff fdde 	bl	800c92c <moveLineCursor>
				break;
 800cd70:	e010      	b.n	800cd94 <processConsoleStr2+0x168>
			case 0x43: // RIGHT
				moveLineCursor(true, false);
 800cd72:	2100      	movs	r1, #0
 800cd74:	2001      	movs	r0, #1
 800cd76:	f7ff fdd9 	bl	800c92c <moveLineCursor>
				break;
 800cd7a:	e00b      	b.n	800cd94 <processConsoleStr2+0x168>
			case 0x41: // UP
				//histPutIn();
				histMove(false);
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	f7ff fbc7 	bl	800c510 <histMove>
				histGetFrom();
 800cd82:	f7ff fb83 	bl	800c48c <histGetFrom>
				break;
 800cd86:	e005      	b.n	800cd94 <processConsoleStr2+0x168>
			case 0x42: // DOWN
				//histPutIn();
				histMove(true);
 800cd88:	2001      	movs	r0, #1
 800cd8a:	f7ff fbc1 	bl	800c510 <histMove>
				histGetFrom();
 800cd8e:	f7ff fb7d 	bl	800c48c <histGetFrom>
				break;
 800cd92:	bf00      	nop
		};
		return &str[3];
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	3303      	adds	r3, #3
 800cd98:	e045      	b.n	800ce26 <processConsoleStr2+0x1fa>
	///////////////////////////////////////////////////////////////////////////////////////
	} else { //single char keys
		switch(str[0]){
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	2b0c      	cmp	r3, #12
 800cda0:	d03e      	beq.n	800ce20 <processConsoleStr2+0x1f4>
 800cda2:	2b0c      	cmp	r3, #12
 800cda4:	dc04      	bgt.n	800cdb0 <processConsoleStr2+0x184>
 800cda6:	2b08      	cmp	r3, #8
 800cda8:	d01f      	beq.n	800cdea <processConsoleStr2+0x1be>
 800cdaa:	2b09      	cmp	r3, #9
 800cdac:	d026      	beq.n	800cdfc <processConsoleStr2+0x1d0>
 800cdae:	e028      	b.n	800ce02 <processConsoleStr2+0x1d6>
 800cdb0:	2b1b      	cmp	r3, #27
 800cdb2:	d004      	beq.n	800cdbe <processConsoleStr2+0x192>
 800cdb4:	2b7f      	cmp	r3, #127	; 0x7f
 800cdb6:	d018      	beq.n	800cdea <processConsoleStr2+0x1be>
 800cdb8:	2b0d      	cmp	r3, #13
 800cdba:	d01a      	beq.n	800cdf2 <processConsoleStr2+0x1c6>
 800cdbc:	e021      	b.n	800ce02 <processConsoleStr2+0x1d6>
			case 0x1b: // ESC
				if (!localAlt) *alt = true;
 800cdbe:	7afb      	ldrb	r3, [r7, #11]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d103      	bne.n	800cdcc <processConsoleStr2+0x1a0>
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	701a      	strb	r2, [r3, #0]
				else { // DOUBLE ESCAPE PRESSED
					lineLength = lineCmdStr[0] = lineCursor = 0;
					redrawCursor();
					redrawLineAfterCursor();
				}
				break;
 800cdca:	e02a      	b.n	800ce22 <processConsoleStr2+0x1f6>
					lineLength = lineCmdStr[0] = lineCursor = 0;
 800cdcc:	4b18      	ldr	r3, [pc, #96]	; (800ce30 <processConsoleStr2+0x204>)
 800cdce:	2200      	movs	r2, #0
 800cdd0:	701a      	strb	r2, [r3, #0]
 800cdd2:	4b1d      	ldr	r3, [pc, #116]	; (800ce48 <processConsoleStr2+0x21c>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	701a      	strb	r2, [r3, #0]
 800cdd8:	4b1b      	ldr	r3, [pc, #108]	; (800ce48 <processConsoleStr2+0x21c>)
 800cdda:	781a      	ldrb	r2, [r3, #0]
 800cddc:	4b15      	ldr	r3, [pc, #84]	; (800ce34 <processConsoleStr2+0x208>)
 800cdde:	701a      	strb	r2, [r3, #0]
					redrawCursor();
 800cde0:	f7ff fa96 	bl	800c310 <redrawCursor>
					redrawLineAfterCursor();
 800cde4:	f7ff fa6e 	bl	800c2c4 <redrawLineAfterCursor>
				break;
 800cde8:	e01b      	b.n	800ce22 <processConsoleStr2+0x1f6>
			case 0x08: // BACKSPACE
			case 0x7F: // CTRL + BACKSPACE
				delInLine(true);
 800cdea:	2001      	movs	r0, #1
 800cdec:	f7ff fc6a 	bl	800c6c4 <delInLine>
				break;
 800cdf0:	e017      	b.n	800ce22 <processConsoleStr2+0x1f6>
			case 0xd: // ENTER
				processNewLine(localAlt);
 800cdf2:	7afb      	ldrb	r3, [r7, #11]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7ff fd41 	bl	800c87c <processNewLine>
				break;
 800cdfa:	e012      	b.n	800ce22 <processConsoleStr2+0x1f6>
			case '\t': //TAB
				processAutoComplete();
 800cdfc:	f7ff feb8 	bl	800cb70 <processAutoComplete>
				break;
 800ce00:	e00f      	b.n	800ce22 <processConsoleStr2+0x1f6>
			case 0xc: // CTRL + L
				break;
			default: 
				if (str[0] >= 0x20 && str[0] <= 0x7F) // other keys
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	2b1f      	cmp	r3, #31
 800ce08:	d90b      	bls.n	800ce22 <processConsoleStr2+0x1f6>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	b25b      	sxtb	r3, r3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	db06      	blt.n	800ce22 <processConsoleStr2+0x1f6>
					putInLineCh(str[0]);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7ff fbed 	bl	800c5f8 <putInLineCh>
 800ce1e:	e000      	b.n	800ce22 <processConsoleStr2+0x1f6>
				break;
 800ce20:	bf00      	nop
		};
		return &str[1];
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3301      	adds	r3, #1
	};
};	
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	200030d1 	.word	0x200030d1
 800ce34:	200030d2 	.word	0x200030d2
 800ce38:	2000303c 	.word	0x2000303c
 800ce3c:	20003040 	.word	0x20003040
 800ce40:	0800f118 	.word	0x0800f118
 800ce44:	200030d4 	.word	0x200030d4
 800ce48:	20003050 	.word	0x20003050

0800ce4c <processConsoleStr>:
void processConsoleStr(char * str, uint32_t * len){
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
	static bool alt = false;
	str[*len] = 0;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	2200      	movs	r2, #0
 800ce60:	701a      	strb	r2, [r3, #0]
	while(str[0] != 0) str = processConsoleStr2(str, &alt);
 800ce62:	e004      	b.n	800ce6e <processConsoleStr+0x22>
 800ce64:	4906      	ldr	r1, [pc, #24]	; (800ce80 <processConsoleStr+0x34>)
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7ff fee0 	bl	800cc2c <processConsoleStr2>
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1f6      	bne.n	800ce64 <processConsoleStr+0x18>
};
 800ce76:	bf00      	nop
 800ce78:	3708      	adds	r7, #8
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	200031de 	.word	0x200031de

0800ce84 <__setOutputs>:
inputStruct inputs[MAX_INPUTS] = {{.timer = 0, .count = 0}};

void initThreads(void);
int startTimer(register int timerNum);

void __setOutputs(void){
 800ce84:	b580      	push	{r7, lr}
 800ce86:	af00      	add	r7, sp, #0
	HAL_SPI_Transmit(&hspi2, (uint8_t *) pcurStateOutputs, 2, 50);
 800ce88:	4b0e      	ldr	r3, [pc, #56]	; (800cec4 <__setOutputs+0x40>)
 800ce8a:	6819      	ldr	r1, [r3, #0]
 800ce8c:	2332      	movs	r3, #50	; 0x32
 800ce8e:	2202      	movs	r2, #2
 800ce90:	480d      	ldr	r0, [pc, #52]	; (800cec8 <__setOutputs+0x44>)
 800ce92:	f7f6 fbbc 	bl	800360e <HAL_SPI_Transmit>
	//for led: toggle pin to push data to out registers
	HAL_GPIO_WritePin(LED_PUSH_DATA_GPIO_Port, LED_PUSH_DATA_Pin, GPIO_PIN_RESET);
 800ce96:	2200      	movs	r2, #0
 800ce98:	2110      	movs	r1, #16
 800ce9a:	480c      	ldr	r0, [pc, #48]	; (800cecc <__setOutputs+0x48>)
 800ce9c:	f7f4 f8a1 	bl	8000fe2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_PUSH_DATA_GPIO_Port, LED_PUSH_DATA_Pin, GPIO_PIN_SET);
 800cea0:	2201      	movs	r2, #1
 800cea2:	2110      	movs	r1, #16
 800cea4:	4809      	ldr	r0, [pc, #36]	; (800cecc <__setOutputs+0x48>)
 800cea6:	f7f4 f89c 	bl	8000fe2 <HAL_GPIO_WritePin>
	//for out: toggle pin to push data to out registers
	HAL_GPIO_WritePin(OUT_PUSH_DATA_GPIO_Port, OUT_PUSH_DATA_Pin, GPIO_PIN_RESET);
 800ceaa:	2200      	movs	r2, #0
 800ceac:	2108      	movs	r1, #8
 800ceae:	4808      	ldr	r0, [pc, #32]	; (800ced0 <__setOutputs+0x4c>)
 800ceb0:	f7f4 f897 	bl	8000fe2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_PUSH_DATA_GPIO_Port, OUT_PUSH_DATA_Pin, GPIO_PIN_SET);
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	2108      	movs	r1, #8
 800ceb8:	4805      	ldr	r0, [pc, #20]	; (800ced0 <__setOutputs+0x4c>)
 800ceba:	f7f4 f892 	bl	8000fe2 <HAL_GPIO_WritePin>
};
 800cebe:	bf00      	nop
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	20000214 	.word	0x20000214
 800cec8:	20003244 	.word	0x20003244
 800cecc:	40010c00 	.word	0x40010c00
 800ced0:	40010800 	.word	0x40010800

0800ced4 <setOutputs>:
void setOutputs(BitPorts outputs){
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	4603      	mov	r3, r0
 800cedc:	80fb      	strh	r3, [r7, #6]
	*pcurStateOutputs = outputs;
 800cede:	4b05      	ldr	r3, [pc, #20]	; (800cef4 <setOutputs+0x20>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	88fa      	ldrh	r2, [r7, #6]
 800cee4:	801a      	strh	r2, [r3, #0]
	__setOutputs();
 800cee6:	f7ff ffcd 	bl	800ce84 <__setOutputs>
};
 800ceea:	bf00      	nop
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	20000214 	.word	0x20000214

0800cef8 <setOutputsByInputConfig>:

void setOutputsByInputConfig(ConfigInput * ci){
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
	switch(ci->op){
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	2b03      	cmp	r3, #3
 800cf06:	d033      	beq.n	800cf70 <setOutputsByInputConfig+0x78>
 800cf08:	2b03      	cmp	r3, #3
 800cf0a:	dc06      	bgt.n	800cf1a <setOutputsByInputConfig+0x22>
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d010      	beq.n	800cf32 <setOutputsByInputConfig+0x3a>
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	dc1b      	bgt.n	800cf4c <setOutputsByInputConfig+0x54>
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d03b      	beq.n	800cf90 <setOutputsByInputConfig+0x98>
 800cf18:	e037      	b.n	800cf8a <setOutputsByInputConfig+0x92>
 800cf1a:	2b81      	cmp	r3, #129	; 0x81
 800cf1c:	d009      	beq.n	800cf32 <setOutputsByInputConfig+0x3a>
 800cf1e:	2b81      	cmp	r3, #129	; 0x81
 800cf20:	dc02      	bgt.n	800cf28 <setOutputsByInputConfig+0x30>
 800cf22:	2b80      	cmp	r3, #128	; 0x80
 800cf24:	d034      	beq.n	800cf90 <setOutputsByInputConfig+0x98>
 800cf26:	e030      	b.n	800cf8a <setOutputsByInputConfig+0x92>
 800cf28:	2b82      	cmp	r3, #130	; 0x82
 800cf2a:	d00f      	beq.n	800cf4c <setOutputsByInputConfig+0x54>
 800cf2c:	2b83      	cmp	r3, #131	; 0x83
 800cf2e:	d01f      	beq.n	800cf70 <setOutputsByInputConfig+0x78>
 800cf30:	e02b      	b.n	800cf8a <setOutputsByInputConfig+0x92>
	case nop:
	case timerNop:
		return;
	case on:
	case timerOn:
		*pcurStateOutputs |= ci->out;
 800cf32:	4b19      	ldr	r3, [pc, #100]	; (800cf98 <setOutputsByInputConfig+0xa0>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	8819      	ldrh	r1, [r3, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	4b15      	ldr	r3, [pc, #84]	; (800cf98 <setOutputsByInputConfig+0xa0>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	430a      	orrs	r2, r1
 800cf46:	b292      	uxth	r2, r2
 800cf48:	801a      	strh	r2, [r3, #0]
		break;
 800cf4a:	e01e      	b.n	800cf8a <setOutputsByInputConfig+0x92>
	case off:
	case timerOff:
		*pcurStateOutputs &= ~ci->out;
 800cf4c:	4b12      	ldr	r3, [pc, #72]	; (800cf98 <setOutputsByInputConfig+0xa0>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	b21a      	sxth	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	b21b      	sxth	r3, r3
 800cf5e:	43db      	mvns	r3, r3
 800cf60:	b21b      	sxth	r3, r3
 800cf62:	4013      	ands	r3, r2
 800cf64:	b21a      	sxth	r2, r3
 800cf66:	4b0c      	ldr	r3, [pc, #48]	; (800cf98 <setOutputsByInputConfig+0xa0>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	b292      	uxth	r2, r2
 800cf6c:	801a      	strh	r2, [r3, #0]
		break;
 800cf6e:	e00c      	b.n	800cf8a <setOutputsByInputConfig+0x92>
	case toggle:
	case timerToggle:
		*pcurStateOutputs ^= ci->out;
 800cf70:	4b09      	ldr	r3, [pc, #36]	; (800cf98 <setOutputsByInputConfig+0xa0>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	8819      	ldrh	r1, [r3, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	4b06      	ldr	r3, [pc, #24]	; (800cf98 <setOutputsByInputConfig+0xa0>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	404a      	eors	r2, r1
 800cf84:	b292      	uxth	r2, r2
 800cf86:	801a      	strh	r2, [r3, #0]
		break;
 800cf88:	bf00      	nop
	}
	__setOutputs();
 800cf8a:	f7ff ff7b 	bl	800ce84 <__setOutputs>
 800cf8e:	e000      	b.n	800cf92 <setOutputsByInputConfig+0x9a>
		return;
 800cf90:	bf00      	nop
}
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	20000214 	.word	0x20000214

0800cf9c <setOutputsOff>:

void setOutputsOff(BitPorts outputs){
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	80fb      	strh	r3, [r7, #6]
	*pcurStateOutputs &= ~outputs;
 800cfa6:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <setOutputsOff+0x34>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	881b      	ldrh	r3, [r3, #0]
 800cfac:	b21a      	sxth	r2, r3
 800cfae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cfb2:	43db      	mvns	r3, r3
 800cfb4:	b21b      	sxth	r3, r3
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	b21a      	sxth	r2, r3
 800cfba:	4b05      	ldr	r3, [pc, #20]	; (800cfd0 <setOutputsOff+0x34>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	b292      	uxth	r2, r2
 800cfc0:	801a      	strh	r2, [r3, #0]
	__setOutputs();
 800cfc2:	f7ff ff5f 	bl	800ce84 <__setOutputs>
}
 800cfc6:	bf00      	nop
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	20000214 	.word	0x20000214

0800cfd4 <firstEnableOutputs>:


void firstEnableOutputs(void){
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	af00      	add	r7, sp, #0
	//curStateOutputs = 0;
	setOutputs(*pcurStateOutputs);
 800cfd8:	4b08      	ldr	r3, [pc, #32]	; (800cffc <firstEnableOutputs+0x28>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	881b      	ldrh	r3, [r3, #0]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7ff ff78 	bl	800ced4 <setOutputs>
	HAL_GPIO_WritePin(LED_ENABLE_GPIO_Port, LED_ENABLE_Pin, GPIO_PIN_RESET);
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	2120      	movs	r1, #32
 800cfe8:	4805      	ldr	r0, [pc, #20]	; (800d000 <firstEnableOutputs+0x2c>)
 800cfea:	f7f3 fffa 	bl	8000fe2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_ENABLE_GPIO_Port, OUT_ENABLE_Pin, GPIO_PIN_RESET);
 800cfee:	2200      	movs	r2, #0
 800cff0:	2110      	movs	r1, #16
 800cff2:	4804      	ldr	r0, [pc, #16]	; (800d004 <firstEnableOutputs+0x30>)
 800cff4:	f7f3 fff5 	bl	8000fe2 <HAL_GPIO_WritePin>
};
 800cff8:	bf00      	nop
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	20000214 	.word	0x20000214
 800d000:	40010c00 	.word	0x40010c00
 800d004:	40010800 	.word	0x40010800

0800d008 <initIO>:

void initIO(void) {
 800d008:	b580      	push	{r7, lr}
 800d00a:	af00      	add	r7, sp, #0
	firstEnableOutputs();
 800d00c:	f7ff ffe2 	bl	800cfd4 <firstEnableOutputs>
	initThreads();
 800d010:	f000 fa6c 	bl	800d4ec <initThreads>
}
 800d014:	bf00      	nop
 800d016:	bd80      	pop	{r7, pc}

0800d018 <setOutputOn>:
void setOutputOn(int num) {
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
	if (num < 0 || num >= MAX_OUTPUTS) return;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	db12      	blt.n	800d04c <setOutputOn+0x34>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2b0f      	cmp	r3, #15
 800d02a:	dc0f      	bgt.n	800d04c <setOutputOn+0x34>
	setOutputs(1 << num | *pcurStateOutputs);
 800d02c:	2201      	movs	r2, #1
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	fa02 f303 	lsl.w	r3, r2, r3
 800d034:	b21a      	sxth	r2, r3
 800d036:	4b07      	ldr	r3, [pc, #28]	; (800d054 <setOutputOn+0x3c>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	881b      	ldrh	r3, [r3, #0]
 800d03c:	b21b      	sxth	r3, r3
 800d03e:	4313      	orrs	r3, r2
 800d040:	b21b      	sxth	r3, r3
 800d042:	b29b      	uxth	r3, r3
 800d044:	4618      	mov	r0, r3
 800d046:	f7ff ff45 	bl	800ced4 <setOutputs>
 800d04a:	e000      	b.n	800d04e <setOutputOn+0x36>
	if (num < 0 || num >= MAX_OUTPUTS) return;
 800d04c:	bf00      	nop
};
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	20000214 	.word	0x20000214

0800d058 <setOutputOff>:

void setOutputOff(int num) {
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
	if (num < 0 || num >= MAX_OUTPUTS) return;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	db14      	blt.n	800d090 <setOutputOff+0x38>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b0f      	cmp	r3, #15
 800d06a:	dc11      	bgt.n	800d090 <setOutputOff+0x38>
	setOutputs(~(1 << num) & *pcurStateOutputs);
 800d06c:	2201      	movs	r2, #1
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	fa02 f303 	lsl.w	r3, r2, r3
 800d074:	b21b      	sxth	r3, r3
 800d076:	43db      	mvns	r3, r3
 800d078:	b21a      	sxth	r2, r3
 800d07a:	4b07      	ldr	r3, [pc, #28]	; (800d098 <setOutputOff+0x40>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	881b      	ldrh	r3, [r3, #0]
 800d080:	b21b      	sxth	r3, r3
 800d082:	4013      	ands	r3, r2
 800d084:	b21b      	sxth	r3, r3
 800d086:	b29b      	uxth	r3, r3
 800d088:	4618      	mov	r0, r3
 800d08a:	f7ff ff23 	bl	800ced4 <setOutputs>
 800d08e:	e000      	b.n	800d092 <setOutputOff+0x3a>
	if (num < 0 || num >= MAX_OUTPUTS) return;
 800d090:	bf00      	nop
};
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	20000214 	.word	0x20000214

0800d09c <setOutputToggle>:
void setOutputToggle(int num) {
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
	if (num < 0 || num >= MAX_OUTPUTS) return;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	db12      	blt.n	800d0d0 <setOutputToggle+0x34>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b0f      	cmp	r3, #15
 800d0ae:	dc0f      	bgt.n	800d0d0 <setOutputToggle+0x34>
	setOutputs(1 << num ^ *pcurStateOutputs);
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b8:	b21a      	sxth	r2, r3
 800d0ba:	4b07      	ldr	r3, [pc, #28]	; (800d0d8 <setOutputToggle+0x3c>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	881b      	ldrh	r3, [r3, #0]
 800d0c0:	b21b      	sxth	r3, r3
 800d0c2:	4053      	eors	r3, r2
 800d0c4:	b21b      	sxth	r3, r3
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7ff ff03 	bl	800ced4 <setOutputs>
 800d0ce:	e000      	b.n	800d0d2 <setOutputToggle+0x36>
	if (num < 0 || num >= MAX_OUTPUTS) return;
 800d0d0:	bf00      	nop
};
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	20000214 	.word	0x20000214

0800d0dc <getOutputState>:

int getOutputState(int num) {
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
	if (num < 0 || num >= MAX_OUTPUTS) return -1;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	db02      	blt.n	800d0f0 <getOutputState+0x14>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b0f      	cmp	r3, #15
 800d0ee:	dd02      	ble.n	800d0f6 <getOutputState+0x1a>
 800d0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f4:	e00d      	b.n	800d112 <getOutputState+0x36>
	if(1 << num & *pcurStateOutputs) return 1;
 800d0f6:	4b09      	ldr	r3, [pc, #36]	; (800d11c <getOutputState+0x40>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	881b      	ldrh	r3, [r3, #0]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	fa42 f303 	asr.w	r3, r2, r3
 800d104:	f003 0301 	and.w	r3, r3, #1
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d001      	beq.n	800d110 <getOutputState+0x34>
 800d10c:	2301      	movs	r3, #1
 800d10e:	e000      	b.n	800d112 <getOutputState+0x36>
	else return 0;
 800d110:	2300      	movs	r3, #0
};
 800d112:	4618      	mov	r0, r3
 800d114:	370c      	adds	r7, #12
 800d116:	46bd      	mov	sp, r7
 800d118:	bc80      	pop	{r7}
 800d11a:	4770      	bx	lr
 800d11c:	20000214 	.word	0x20000214

0800d120 <readInputs>:
/// inputs
///////////////////////



BitPorts readInputs(void) {
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
	BitPorts buf;
	//HAL_GPIO_WritePin(IN_CLK_INH_GPIO_Port, IN_CLK_INH_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(IN_LOAD_GPIO_Port, IN_LOAD_Pin, GPIO_PIN_RESET);
 800d126:	2200      	movs	r2, #0
 800d128:	2102      	movs	r1, #2
 800d12a:	480b      	ldr	r0, [pc, #44]	; (800d158 <readInputs+0x38>)
 800d12c:	f7f3 ff59 	bl	8000fe2 <HAL_GPIO_WritePin>
	osDelay(1);
 800d130:	2001      	movs	r0, #1
 800d132:	f7fa febf 	bl	8007eb4 <osDelay>
	HAL_GPIO_WritePin(IN_LOAD_GPIO_Port, IN_LOAD_Pin, GPIO_PIN_SET);
 800d136:	2201      	movs	r2, #1
 800d138:	2102      	movs	r1, #2
 800d13a:	4807      	ldr	r0, [pc, #28]	; (800d158 <readInputs+0x38>)
 800d13c:	f7f3 ff51 	bl	8000fe2 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint8_t *)&buf, MAX_INPUTS_BYTES, 5);
 800d140:	1db9      	adds	r1, r7, #6
 800d142:	2305      	movs	r3, #5
 800d144:	2202      	movs	r2, #2
 800d146:	4805      	ldr	r0, [pc, #20]	; (800d15c <readInputs+0x3c>)
 800d148:	f7f6 fb9d 	bl	8003886 <HAL_SPI_Receive>
	return buf;
 800d14c:	88fb      	ldrh	r3, [r7, #6]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	40010800 	.word	0x40010800
 800d15c:	20003244 	.word	0x20003244

0800d160 <processInputEvent>:

int inputBtnDownCounter = 0;

void processInputEvent(enumProcessInputEvents eventId, uint8_t inNum) {
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	4603      	mov	r3, r0
 800d168:	460a      	mov	r2, r1
 800d16a:	71fb      	strb	r3, [r7, #7]
 800d16c:	4613      	mov	r3, r2
 800d16e:	71bb      	strb	r3, [r7, #6]
	ConfigInput * ci;
	switch(eventId){
 800d170:	79fb      	ldrb	r3, [r7, #7]
 800d172:	2b12      	cmp	r3, #18
 800d174:	d85b      	bhi.n	800d22e <processInputEvent+0xce>
 800d176:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <processInputEvent+0x1c>)
 800d178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17c:	0800d203 	.word	0x0800d203
 800d180:	0800d1eb 	.word	0x0800d1eb
 800d184:	0800d1f7 	.word	0x0800d1f7
 800d188:	0800d22f 	.word	0x0800d22f
 800d18c:	0800d22f 	.word	0x0800d22f
 800d190:	0800d22f 	.word	0x0800d22f
 800d194:	0800d22f 	.word	0x0800d22f
 800d198:	0800d22f 	.word	0x0800d22f
 800d19c:	0800d22f 	.word	0x0800d22f
 800d1a0:	0800d22f 	.word	0x0800d22f
 800d1a4:	0800d22f 	.word	0x0800d22f
 800d1a8:	0800d22f 	.word	0x0800d22f
 800d1ac:	0800d22f 	.word	0x0800d22f
 800d1b0:	0800d22f 	.word	0x0800d22f
 800d1b4:	0800d22f 	.word	0x0800d22f
 800d1b8:	0800d22f 	.word	0x0800d22f
 800d1bc:	0800d22f 	.word	0x0800d22f
 800d1c0:	0800d1c9 	.word	0x0800d1c9
 800d1c4:	0800d20f 	.word	0x0800d20f
	case eventInputDown:
		ci = getInput(inNum);
 800d1c8:	79bb      	ldrb	r3, [r7, #6]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe f9e2 	bl	800b594 <getInput>
 800d1d0:	60f8      	str	r0, [r7, #12]
		inputBtnDownCounter++;
 800d1d2:	4b21      	ldr	r3, [pc, #132]	; (800d258 <processInputEvent+0xf8>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	4a1f      	ldr	r2, [pc, #124]	; (800d258 <processInputEvent+0xf8>)
 800d1da:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d1e2:	481e      	ldr	r0, [pc, #120]	; (800d25c <processInputEvent+0xfc>)
 800d1e4:	f7f3 fefd 	bl	8000fe2 <HAL_GPIO_WritePin>
		break;
 800d1e8:	e021      	b.n	800d22e <processInputEvent+0xce>
	case eventInputClick:
		ci = getInputClick(inNum);
 800d1ea:	79bb      	ldrb	r3, [r7, #6]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fe f9e5 	bl	800b5bc <getInputClick>
 800d1f2:	60f8      	str	r0, [r7, #12]
		break;
 800d1f4:	e01b      	b.n	800d22e <processInputEvent+0xce>
	case eventInputDoubleClick:
	//case eventInputTripleClick:
	//case eventInput4Click:
		ci = getInputDoubleClick(inNum);
 800d1f6:	79bb      	ldrb	r3, [r7, #6]
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe f9f5 	bl	800b5e8 <getInputDoubleClick>
 800d1fe:	60f8      	str	r0, [r7, #12]
		break;
 800d200:	e015      	b.n	800d22e <processInputEvent+0xce>
	case eventInputLongPress:
		ci = getInputLPress(inNum);
 800d202:	79bb      	ldrb	r3, [r7, #6]
 800d204:	4618      	mov	r0, r3
 800d206:	f7fe fa05 	bl	800b614 <getInputLPress>
 800d20a:	60f8      	str	r0, [r7, #12]
		break;
 800d20c:	e00f      	b.n	800d22e <processInputEvent+0xce>
	case eventInputUp:
		if (--inputBtnDownCounter == 0)
 800d20e:	4b12      	ldr	r3, [pc, #72]	; (800d258 <processInputEvent+0xf8>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	3b01      	subs	r3, #1
 800d214:	4a10      	ldr	r2, [pc, #64]	; (800d258 <processInputEvent+0xf8>)
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	4b0f      	ldr	r3, [pc, #60]	; (800d258 <processInputEvent+0xf8>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d117      	bne.n	800d250 <processInputEvent+0xf0>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800d220:	2200      	movs	r2, #0
 800d222:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d226:	480d      	ldr	r0, [pc, #52]	; (800d25c <processInputEvent+0xfc>)
 800d228:	f7f3 fedb 	bl	8000fe2 <HAL_GPIO_WritePin>
		return;
 800d22c:	e010      	b.n	800d250 <processInputEvent+0xf0>
	}
	setOutputsByInputConfig(ci);
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f7ff fe62 	bl	800cef8 <setOutputsByInputConfig>
	if (ci && (ci->op & timerNop) == timerNop)
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00b      	beq.n	800d252 <processInputEvent+0xf2>
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	b25b      	sxtb	r3, r3
 800d240:	2b00      	cmp	r3, #0
 800d242:	da06      	bge.n	800d252 <processInputEvent+0xf2>
		startTimer(ci->timerN);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	78db      	ldrb	r3, [r3, #3]
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 f8c7 	bl	800d3dc <startTimer>
 800d24e:	e000      	b.n	800d252 <processInputEvent+0xf2>
		return;
 800d250:	bf00      	nop
};
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	20003220 	.word	0x20003220
 800d25c:	40010800 	.word	0x40010800

0800d260 <threadInputTimers>:


// поток счетчиков
// считаем для longPress
void threadInputTimers(void* argument){
 800d260:	b590      	push	{r4, r7, lr}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
	while (1) {
		for (register unsigned char i = 0; i < MAX_INPUTS; i++) {
 800d268:	2400      	movs	r4, #0
 800d26a:	e039      	b.n	800d2e0 <threadInputTimers+0x80>
			if (inputs[i].timer != 0) {
 800d26c:	4622      	mov	r2, r4
 800d26e:	4b1f      	ldr	r3, [pc, #124]	; (800d2ec <threadInputTimers+0x8c>)
 800d270:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d030      	beq.n	800d2da <threadInputTimers+0x7a>
				inputs[i].timer--;
 800d278:	4623      	mov	r3, r4
 800d27a:	4a1c      	ldr	r2, [pc, #112]	; (800d2ec <threadInputTimers+0x8c>)
 800d27c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800d280:	3a01      	subs	r2, #1
 800d282:	b2d1      	uxtb	r1, r2
 800d284:	4a19      	ldr	r2, [pc, #100]	; (800d2ec <threadInputTimers+0x8c>)
 800d286:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
				if (inputs[i].timer == 0) { //< counter tick to zero. now generating events
 800d28a:	4622      	mov	r2, r4
 800d28c:	4b17      	ldr	r3, [pc, #92]	; (800d2ec <threadInputTimers+0x8c>)
 800d28e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d121      	bne.n	800d2da <threadInputTimers+0x7a>
					if (inputs[i].count == 0) processInputEvent(eventInputLongPress, i);
 800d296:	4623      	mov	r3, r4
 800d298:	4a14      	ldr	r2, [pc, #80]	; (800d2ec <threadInputTimers+0x8c>)
 800d29a:	005b      	lsls	r3, r3, #1
 800d29c:	4413      	add	r3, r2
 800d29e:	785b      	ldrb	r3, [r3, #1]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d104      	bne.n	800d2ae <threadInputTimers+0x4e>
 800d2a4:	4621      	mov	r1, r4
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	f7ff ff5a 	bl	800d160 <processInputEvent>
 800d2ac:	e00f      	b.n	800d2ce <threadInputTimers+0x6e>
					else if (inputs[i].count == 1) processInputEvent(eventInputClick, i);
 800d2ae:	4623      	mov	r3, r4
 800d2b0:	4a0e      	ldr	r2, [pc, #56]	; (800d2ec <threadInputTimers+0x8c>)
 800d2b2:	005b      	lsls	r3, r3, #1
 800d2b4:	4413      	add	r3, r2
 800d2b6:	785b      	ldrb	r3, [r3, #1]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d104      	bne.n	800d2c6 <threadInputTimers+0x66>
 800d2bc:	4621      	mov	r1, r4
 800d2be:	2001      	movs	r0, #1
 800d2c0:	f7ff ff4e 	bl	800d160 <processInputEvent>
 800d2c4:	e003      	b.n	800d2ce <threadInputTimers+0x6e>
					else processInputEvent(eventInputDoubleClick, i);
 800d2c6:	4621      	mov	r1, r4
 800d2c8:	2002      	movs	r0, #2
 800d2ca:	f7ff ff49 	bl	800d160 <processInputEvent>
					//else processInputEvent(inputs[i].count, i);
					inputs[i].count = 0;
 800d2ce:	4623      	mov	r3, r4
 800d2d0:	4a06      	ldr	r2, [pc, #24]	; (800d2ec <threadInputTimers+0x8c>)
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	4413      	add	r3, r2
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	705a      	strb	r2, [r3, #1]
		for (register unsigned char i = 0; i < MAX_INPUTS; i++) {
 800d2da:	4623      	mov	r3, r4
 800d2dc:	3301      	adds	r3, #1
 800d2de:	b2dc      	uxtb	r4, r3
 800d2e0:	2c0f      	cmp	r4, #15
 800d2e2:	d9c3      	bls.n	800d26c <threadInputTimers+0xc>
				}
			};
		}
		osDelay(10); // 1/100 - secound 100Hz
 800d2e4:	200a      	movs	r0, #10
 800d2e6:	f7fa fde5 	bl	8007eb4 <osDelay>
		for (register unsigned char i = 0; i < MAX_INPUTS; i++) {
 800d2ea:	e7bd      	b.n	800d268 <threadInputTimers+0x8>
 800d2ec:	20003200 	.word	0x20003200

0800d2f0 <processInputEvents>:
	};
}


void processInputEvents(register BitPorts changed, register BitPorts state){
 800d2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	4688      	mov	r8, r1
	for (register int i = 0; i < MAX_INPUTS; i++){
 800d2fa:	2400      	movs	r4, #0
 800d2fc:	e031      	b.n	800d362 <processInputEvents+0x72>
		register BitPorts msk = 1 << i;
 800d2fe:	2301      	movs	r3, #1
 800d300:	40a3      	lsls	r3, r4
 800d302:	b29d      	uxth	r5, r3
		if (changed & msk) { //< this is input changed state
 800d304:	ea06 0305 	and.w	r3, r6, r5
 800d308:	b29b      	uxth	r3, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d028      	beq.n	800d360 <processInputEvents+0x70>
			if (state & msk) { //< input button is up
 800d30e:	ea08 0305 	and.w	r3, r8, r5
 800d312:	b29b      	uxth	r3, r3
 800d314:	2b00      	cmp	r3, #0
 800d316:	d015      	beq.n	800d344 <processInputEvents+0x54>
				processInputEvent(eventInputUp, i);
 800d318:	b2e3      	uxtb	r3, r4
 800d31a:	4619      	mov	r1, r3
 800d31c:	2012      	movs	r0, #18
 800d31e:	f7ff ff1f 	bl	800d160 <processInputEvent>
				if (inputs[i].timer) inputs[i].count++;
 800d322:	4b12      	ldr	r3, [pc, #72]	; (800d36c <processInputEvents+0x7c>)
 800d324:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d019      	beq.n	800d360 <processInputEvents+0x70>
 800d32c:	4a0f      	ldr	r2, [pc, #60]	; (800d36c <processInputEvents+0x7c>)
 800d32e:	0063      	lsls	r3, r4, #1
 800d330:	4413      	add	r3, r2
 800d332:	785b      	ldrb	r3, [r3, #1]
 800d334:	3301      	adds	r3, #1
 800d336:	b2d9      	uxtb	r1, r3
 800d338:	4a0c      	ldr	r2, [pc, #48]	; (800d36c <processInputEvents+0x7c>)
 800d33a:	0063      	lsls	r3, r4, #1
 800d33c:	4413      	add	r3, r2
 800d33e:	460a      	mov	r2, r1
 800d340:	705a      	strb	r2, [r3, #1]
 800d342:	e00d      	b.n	800d360 <processInputEvents+0x70>
			} else { //< input button is down
				processInputEvent(eventInputDown, i);
 800d344:	b2e3      	uxtb	r3, r4
 800d346:	4619      	mov	r1, r3
 800d348:	2011      	movs	r0, #17
 800d34a:	f7ff ff09 	bl	800d160 <processInputEvent>
				if (inputs[i].timer == 0) //< first input button down
 800d34e:	4b07      	ldr	r3, [pc, #28]	; (800d36c <processInputEvents+0x7c>)
 800d350:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d103      	bne.n	800d360 <processInputEvents+0x70>
					inputs[i].timer = LONG_PRESS_COUNT;
 800d358:	4b04      	ldr	r3, [pc, #16]	; (800d36c <processInputEvents+0x7c>)
 800d35a:	2264      	movs	r2, #100	; 0x64
 800d35c:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
	for (register int i = 0; i < MAX_INPUTS; i++){
 800d360:	3401      	adds	r4, #1
 800d362:	2c0f      	cmp	r4, #15
 800d364:	ddcb      	ble.n	800d2fe <processInputEvents+0xe>
			}
		}
	}
}
 800d366:	bf00      	nop
 800d368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d36c:	20003200 	.word	0x20003200

0800d370 <threadSPI>:
// считывание входных регистров и запись в выходные по событиям
void threadSPI(void* argument) {
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
	//BitPorts outData = 0;
	while(1) {
		/*register BitPorts*/ inputBits = readInputs();
 800d378:	f7ff fed2 	bl	800d120 <readInputs>
 800d37c:	4603      	mov	r3, r0
 800d37e:	461a      	mov	r2, r3
 800d380:	4b13      	ldr	r3, [pc, #76]	; (800d3d0 <threadSPI+0x60>)
 800d382:	801a      	strh	r2, [r3, #0]
		if (inputBits != inputsCurState) {
 800d384:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <threadSPI+0x60>)
 800d386:	881a      	ldrh	r2, [r3, #0]
 800d388:	4b12      	ldr	r3, [pc, #72]	; (800d3d4 <threadSPI+0x64>)
 800d38a:	881b      	ldrh	r3, [r3, #0]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d01a      	beq.n	800d3c6 <threadSPI+0x56>
			if (inputBits == inputsCurState2) { //два раза одно и тоже значит на входах что-то поменялось
 800d390:	4b0f      	ldr	r3, [pc, #60]	; (800d3d0 <threadSPI+0x60>)
 800d392:	881a      	ldrh	r2, [r3, #0]
 800d394:	4b10      	ldr	r3, [pc, #64]	; (800d3d8 <threadSPI+0x68>)
 800d396:	881b      	ldrh	r3, [r3, #0]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d110      	bne.n	800d3be <threadSPI+0x4e>
				//выявляем что поменялось и генерим события
				//inputs ^ inputsCurState; //измененные биты устанавливаются в 1
				processInputEvents(inputBits ^ inputsCurState, inputBits);
 800d39c:	4b0c      	ldr	r3, [pc, #48]	; (800d3d0 <threadSPI+0x60>)
 800d39e:	881a      	ldrh	r2, [r3, #0]
 800d3a0:	4b0c      	ldr	r3, [pc, #48]	; (800d3d4 <threadSPI+0x64>)
 800d3a2:	881b      	ldrh	r3, [r3, #0]
 800d3a4:	4053      	eors	r3, r2
 800d3a6:	b29a      	uxth	r2, r3
 800d3a8:	4b09      	ldr	r3, [pc, #36]	; (800d3d0 <threadSPI+0x60>)
 800d3aa:	881b      	ldrh	r3, [r3, #0]
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	4610      	mov	r0, r2
 800d3b0:	f7ff ff9e 	bl	800d2f0 <processInputEvents>
				inputsCurState = inputBits;
 800d3b4:	4b06      	ldr	r3, [pc, #24]	; (800d3d0 <threadSPI+0x60>)
 800d3b6:	881a      	ldrh	r2, [r3, #0]
 800d3b8:	4b06      	ldr	r3, [pc, #24]	; (800d3d4 <threadSPI+0x64>)
 800d3ba:	801a      	strh	r2, [r3, #0]
 800d3bc:	e003      	b.n	800d3c6 <threadSPI+0x56>
			} else inputsCurState2 = inputBits;
 800d3be:	4b04      	ldr	r3, [pc, #16]	; (800d3d0 <threadSPI+0x60>)
 800d3c0:	881a      	ldrh	r2, [r3, #0]
 800d3c2:	4b05      	ldr	r3, [pc, #20]	; (800d3d8 <threadSPI+0x68>)
 800d3c4:	801a      	strh	r2, [r3, #0]
		}
		osDelay(10);
 800d3c6:	200a      	movs	r0, #10
 800d3c8:	f7fa fd74 	bl	8007eb4 <osDelay>
		/*register BitPorts*/ inputBits = readInputs();
 800d3cc:	e7d4      	b.n	800d378 <threadSPI+0x8>
 800d3ce:	bf00      	nop
 800d3d0:	200040ac 	.word	0x200040ac
 800d3d4:	20000218 	.word	0x20000218
 800d3d8:	2000021a 	.word	0x2000021a

0800d3dc <startTimer>:
}

/////////
/// timers
/////////
int startTimer(register int timerNum){
 800d3dc:	b598      	push	{r3, r4, r7, lr}
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	4604      	mov	r4, r0
	if (timerNum < 0 || timerNum > MAX_TIMERS) return -1;
 800d3e2:	2c00      	cmp	r4, #0
 800d3e4:	db01      	blt.n	800d3ea <startTimer+0xe>
 800d3e6:	2c10      	cmp	r4, #16
 800d3e8:	dd02      	ble.n	800d3f0 <startTimer+0x14>
 800d3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ee:	e017      	b.n	800d420 <startTimer+0x44>
	timersArray[timerNum] = getConfigTimer(timerNum)->secs;
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f7fe f925 	bl	800b640 <getConfigTimer>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	4b09      	ldr	r3, [pc, #36]	; (800d424 <startTimer+0x48>)
 800d400:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	*activeTimers |= 1 << timerNum;
 800d404:	4b08      	ldr	r3, [pc, #32]	; (800d428 <startTimer+0x4c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	881b      	ldrh	r3, [r3, #0]
 800d40a:	b21a      	sxth	r2, r3
 800d40c:	2301      	movs	r3, #1
 800d40e:	40a3      	lsls	r3, r4
 800d410:	b21b      	sxth	r3, r3
 800d412:	4313      	orrs	r3, r2
 800d414:	b21a      	sxth	r2, r3
 800d416:	4b04      	ldr	r3, [pc, #16]	; (800d428 <startTimer+0x4c>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	b292      	uxth	r2, r2
 800d41c:	801a      	strh	r2, [r3, #0]
	return 0;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	bd98      	pop	{r3, r4, r7, pc}
 800d424:	200031e0 	.word	0x200031e0
 800d428:	2000021c 	.word	0x2000021c

0800d42c <processTimerEvent>:
void processTimerEvent(register int timerId){
 800d42c:	b598      	push	{r3, r4, r7, lr}
 800d42e:	af00      	add	r7, sp, #0
 800d430:	4604      	mov	r4, r0
	setOutputsOff(getConfigTimer(timerId)->out);
 800d432:	4620      	mov	r0, r4
 800d434:	f7fe f904 	bl	800b640 <getConfigTimer>
 800d438:	4603      	mov	r3, r0
 800d43a:	881b      	ldrh	r3, [r3, #0]
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	4618      	mov	r0, r3
 800d440:	f7ff fdac 	bl	800cf9c <setOutputsOff>
	*activeTimers &= ~ 1 << timerId;
 800d444:	4b07      	ldr	r3, [pc, #28]	; (800d464 <processTimerEvent+0x38>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	881b      	ldrh	r3, [r3, #0]
 800d44a:	b21a      	sxth	r2, r3
 800d44c:	f06f 0301 	mvn.w	r3, #1
 800d450:	40a3      	lsls	r3, r4
 800d452:	b21b      	sxth	r3, r3
 800d454:	4013      	ands	r3, r2
 800d456:	b21a      	sxth	r2, r3
 800d458:	4b02      	ldr	r3, [pc, #8]	; (800d464 <processTimerEvent+0x38>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	b292      	uxth	r2, r2
 800d45e:	801a      	strh	r2, [r3, #0]
}
 800d460:	bf00      	nop
 800d462:	bd98      	pop	{r3, r4, r7, pc}
 800d464:	2000021c 	.word	0x2000021c

0800d468 <threadTimers>:

void threadTimers(void * argument){
 800d468:	b590      	push	{r4, r7, lr}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
	while (1){
		for (register int i = 0; i < MAX_TIMERS; i++) {
 800d470:	2400      	movs	r4, #0
 800d472:	e015      	b.n	800d4a0 <threadTimers+0x38>
			if (timersArray[i]) {
 800d474:	4b0e      	ldr	r3, [pc, #56]	; (800d4b0 <threadTimers+0x48>)
 800d476:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d00f      	beq.n	800d49e <threadTimers+0x36>
				timersArray[i]--;
 800d47e:	4b0c      	ldr	r3, [pc, #48]	; (800d4b0 <threadTimers+0x48>)
 800d480:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800d484:	3b01      	subs	r3, #1
 800d486:	b29a      	uxth	r2, r3
 800d488:	4b09      	ldr	r3, [pc, #36]	; (800d4b0 <threadTimers+0x48>)
 800d48a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				if (timersArray[i] == 0) processTimerEvent(i);
 800d48e:	4b08      	ldr	r3, [pc, #32]	; (800d4b0 <threadTimers+0x48>)
 800d490:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d102      	bne.n	800d49e <threadTimers+0x36>
 800d498:	4620      	mov	r0, r4
 800d49a:	f7ff ffc7 	bl	800d42c <processTimerEvent>
		for (register int i = 0; i < MAX_TIMERS; i++) {
 800d49e:	3401      	adds	r4, #1
 800d4a0:	2c0f      	cmp	r4, #15
 800d4a2:	dde7      	ble.n	800d474 <threadTimers+0xc>
			}
		}
		osDelay(1000); //1Herz
 800d4a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d4a8:	f7fa fd04 	bl	8007eb4 <osDelay>
		for (register int i = 0; i < MAX_TIMERS; i++) {
 800d4ac:	e7e0      	b.n	800d470 <threadTimers+0x8>
 800d4ae:	bf00      	nop
 800d4b0:	200031e0 	.word	0x200031e0

0800d4b4 <offActiveTimers>:
	}
}

void offActiveTimers(void){
 800d4b4:	b598      	push	{r3, r4, r7, lr}
 800d4b6:	af00      	add	r7, sp, #0
	for(register uint16_t i = 0; i < MAX_TIMERS; i++){
 800d4b8:	2400      	movs	r4, #0
 800d4ba:	e011      	b.n	800d4e0 <offActiveTimers+0x2c>
		if (*activeTimers & (1 << i))
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <offActiveTimers+0x34>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	881b      	ldrh	r3, [r3, #0]
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	4623      	mov	r3, r4
 800d4c6:	fa42 f303 	asr.w	r3, r2, r3
 800d4ca:	f003 0301 	and.w	r3, r3, #1
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d003      	beq.n	800d4da <offActiveTimers+0x26>
			processTimerEvent(i);
 800d4d2:	4623      	mov	r3, r4
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff ffa9 	bl	800d42c <processTimerEvent>
	for(register uint16_t i = 0; i < MAX_TIMERS; i++){
 800d4da:	4623      	mov	r3, r4
 800d4dc:	3301      	adds	r3, #1
 800d4de:	b29c      	uxth	r4, r3
 800d4e0:	2c0f      	cmp	r4, #15
 800d4e2:	d9eb      	bls.n	800d4bc <offActiveTimers+0x8>
	}
}
 800d4e4:	bf00      	nop
 800d4e6:	bd98      	pop	{r3, r4, r7, pc}
 800d4e8:	2000021c 	.word	0x2000021c

0800d4ec <initThreads>:
//  .priority = (osPriority_t) osPriorityNormal,
//  .stack_size = 128 * 4
//};

// инициализация потоков
void initThreads(void) {
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af02      	add	r7, sp, #8
	offActiveTimers(); //off All output ports controlled by Timers at start
 800d4f2:	f7ff ffdf 	bl	800d4b4 <offActiveTimers>

	//osThreadNew(threadInputTimers, NULL, &tattr_InputTimers);
	//osThreadNew(threadSPI, NULL, &tattr_SPI);
	xTaskCreate ((TaskFunction_t)threadInputTimers, "", (uint16_t)64, NULL, osPriorityAboveNormal, &thInputTimers);
 800d4f6:	4b10      	ldr	r3, [pc, #64]	; (800d538 <initThreads+0x4c>)
 800d4f8:	9301      	str	r3, [sp, #4]
 800d4fa:	2320      	movs	r3, #32
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	2300      	movs	r3, #0
 800d500:	2240      	movs	r2, #64	; 0x40
 800d502:	490e      	ldr	r1, [pc, #56]	; (800d53c <initThreads+0x50>)
 800d504:	480e      	ldr	r0, [pc, #56]	; (800d540 <initThreads+0x54>)
 800d506:	f7fb fb10 	bl	8008b2a <xTaskCreate>
	xTaskCreate((TaskFunction_t)threadSPI, "", (uint16_t)64, NULL, osPriorityAboveNormal, &thSPI);
 800d50a:	4b0e      	ldr	r3, [pc, #56]	; (800d544 <initThreads+0x58>)
 800d50c:	9301      	str	r3, [sp, #4]
 800d50e:	2320      	movs	r3, #32
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	2300      	movs	r3, #0
 800d514:	2240      	movs	r2, #64	; 0x40
 800d516:	4909      	ldr	r1, [pc, #36]	; (800d53c <initThreads+0x50>)
 800d518:	480b      	ldr	r0, [pc, #44]	; (800d548 <initThreads+0x5c>)
 800d51a:	f7fb fb06 	bl	8008b2a <xTaskCreate>
	xTaskCreate ((TaskFunction_t)threadTimers, "", (uint16_t)64, NULL, osPriorityAboveNormal, &thTimers);
 800d51e:	4b0b      	ldr	r3, [pc, #44]	; (800d54c <initThreads+0x60>)
 800d520:	9301      	str	r3, [sp, #4]
 800d522:	2320      	movs	r3, #32
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	2300      	movs	r3, #0
 800d528:	2240      	movs	r2, #64	; 0x40
 800d52a:	4904      	ldr	r1, [pc, #16]	; (800d53c <initThreads+0x50>)
 800d52c:	4808      	ldr	r0, [pc, #32]	; (800d550 <initThreads+0x64>)
 800d52e:	f7fb fafc 	bl	8008b2a <xTaskCreate>
}
 800d532:	bf00      	nop
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	200040a0 	.word	0x200040a0
 800d53c:	0800f120 	.word	0x0800f120
 800d540:	0800d261 	.word	0x0800d261
 800d544:	200040a4 	.word	0x200040a4
 800d548:	0800d371 	.word	0x0800d371
 800d54c:	200040a8 	.word	0x200040a8
 800d550:	0800d469 	.word	0x0800d469

0800d554 <__errno>:
 800d554:	4b01      	ldr	r3, [pc, #4]	; (800d55c <__errno+0x8>)
 800d556:	6818      	ldr	r0, [r3, #0]
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	20000220 	.word	0x20000220

0800d560 <__libc_init_array>:
 800d560:	b570      	push	{r4, r5, r6, lr}
 800d562:	2500      	movs	r5, #0
 800d564:	4e0c      	ldr	r6, [pc, #48]	; (800d598 <__libc_init_array+0x38>)
 800d566:	4c0d      	ldr	r4, [pc, #52]	; (800d59c <__libc_init_array+0x3c>)
 800d568:	1ba4      	subs	r4, r4, r6
 800d56a:	10a4      	asrs	r4, r4, #2
 800d56c:	42a5      	cmp	r5, r4
 800d56e:	d109      	bne.n	800d584 <__libc_init_array+0x24>
 800d570:	f001 f9d0 	bl	800e914 <_init>
 800d574:	2500      	movs	r5, #0
 800d576:	4e0a      	ldr	r6, [pc, #40]	; (800d5a0 <__libc_init_array+0x40>)
 800d578:	4c0a      	ldr	r4, [pc, #40]	; (800d5a4 <__libc_init_array+0x44>)
 800d57a:	1ba4      	subs	r4, r4, r6
 800d57c:	10a4      	asrs	r4, r4, #2
 800d57e:	42a5      	cmp	r5, r4
 800d580:	d105      	bne.n	800d58e <__libc_init_array+0x2e>
 800d582:	bd70      	pop	{r4, r5, r6, pc}
 800d584:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d588:	4798      	blx	r3
 800d58a:	3501      	adds	r5, #1
 800d58c:	e7ee      	b.n	800d56c <__libc_init_array+0xc>
 800d58e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d592:	4798      	blx	r3
 800d594:	3501      	adds	r5, #1
 800d596:	e7f2      	b.n	800d57e <__libc_init_array+0x1e>
 800d598:	0800f34c 	.word	0x0800f34c
 800d59c:	0800f34c 	.word	0x0800f34c
 800d5a0:	0800f34c 	.word	0x0800f34c
 800d5a4:	0800f350 	.word	0x0800f350

0800d5a8 <__locale_ctype_ptr_l>:
 800d5a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d5ac:	4770      	bx	lr
	...

0800d5b0 <__locale_ctype_ptr>:
 800d5b0:	4b04      	ldr	r3, [pc, #16]	; (800d5c4 <__locale_ctype_ptr+0x14>)
 800d5b2:	4a05      	ldr	r2, [pc, #20]	; (800d5c8 <__locale_ctype_ptr+0x18>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6a1b      	ldr	r3, [r3, #32]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	bf08      	it	eq
 800d5bc:	4613      	moveq	r3, r2
 800d5be:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800d5c2:	4770      	bx	lr
 800d5c4:	20000220 	.word	0x20000220
 800d5c8:	20000284 	.word	0x20000284

0800d5cc <__ascii_mbtowc>:
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	b901      	cbnz	r1, 800d5d2 <__ascii_mbtowc+0x6>
 800d5d0:	a901      	add	r1, sp, #4
 800d5d2:	b142      	cbz	r2, 800d5e6 <__ascii_mbtowc+0x1a>
 800d5d4:	b14b      	cbz	r3, 800d5ea <__ascii_mbtowc+0x1e>
 800d5d6:	7813      	ldrb	r3, [r2, #0]
 800d5d8:	600b      	str	r3, [r1, #0]
 800d5da:	7812      	ldrb	r2, [r2, #0]
 800d5dc:	1c10      	adds	r0, r2, #0
 800d5de:	bf18      	it	ne
 800d5e0:	2001      	movne	r0, #1
 800d5e2:	b002      	add	sp, #8
 800d5e4:	4770      	bx	lr
 800d5e6:	4610      	mov	r0, r2
 800d5e8:	e7fb      	b.n	800d5e2 <__ascii_mbtowc+0x16>
 800d5ea:	f06f 0001 	mvn.w	r0, #1
 800d5ee:	e7f8      	b.n	800d5e2 <__ascii_mbtowc+0x16>

0800d5f0 <memcpy>:
 800d5f0:	b510      	push	{r4, lr}
 800d5f2:	1e43      	subs	r3, r0, #1
 800d5f4:	440a      	add	r2, r1
 800d5f6:	4291      	cmp	r1, r2
 800d5f8:	d100      	bne.n	800d5fc <memcpy+0xc>
 800d5fa:	bd10      	pop	{r4, pc}
 800d5fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d600:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d604:	e7f7      	b.n	800d5f6 <memcpy+0x6>

0800d606 <memmove>:
 800d606:	4288      	cmp	r0, r1
 800d608:	b510      	push	{r4, lr}
 800d60a:	eb01 0302 	add.w	r3, r1, r2
 800d60e:	d807      	bhi.n	800d620 <memmove+0x1a>
 800d610:	1e42      	subs	r2, r0, #1
 800d612:	4299      	cmp	r1, r3
 800d614:	d00a      	beq.n	800d62c <memmove+0x26>
 800d616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d61a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d61e:	e7f8      	b.n	800d612 <memmove+0xc>
 800d620:	4283      	cmp	r3, r0
 800d622:	d9f5      	bls.n	800d610 <memmove+0xa>
 800d624:	1881      	adds	r1, r0, r2
 800d626:	1ad2      	subs	r2, r2, r3
 800d628:	42d3      	cmn	r3, r2
 800d62a:	d100      	bne.n	800d62e <memmove+0x28>
 800d62c:	bd10      	pop	{r4, pc}
 800d62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d632:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d636:	e7f7      	b.n	800d628 <memmove+0x22>

0800d638 <memset>:
 800d638:	4603      	mov	r3, r0
 800d63a:	4402      	add	r2, r0
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d100      	bne.n	800d642 <memset+0xa>
 800d640:	4770      	bx	lr
 800d642:	f803 1b01 	strb.w	r1, [r3], #1
 800d646:	e7f9      	b.n	800d63c <memset+0x4>

0800d648 <sniprintf>:
 800d648:	b40c      	push	{r2, r3}
 800d64a:	b530      	push	{r4, r5, lr}
 800d64c:	4b17      	ldr	r3, [pc, #92]	; (800d6ac <sniprintf+0x64>)
 800d64e:	1e0c      	subs	r4, r1, #0
 800d650:	b09d      	sub	sp, #116	; 0x74
 800d652:	681d      	ldr	r5, [r3, #0]
 800d654:	da08      	bge.n	800d668 <sniprintf+0x20>
 800d656:	238b      	movs	r3, #139	; 0x8b
 800d658:	f04f 30ff 	mov.w	r0, #4294967295
 800d65c:	602b      	str	r3, [r5, #0]
 800d65e:	b01d      	add	sp, #116	; 0x74
 800d660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d664:	b002      	add	sp, #8
 800d666:	4770      	bx	lr
 800d668:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d66c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d670:	bf0c      	ite	eq
 800d672:	4623      	moveq	r3, r4
 800d674:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d678:	9304      	str	r3, [sp, #16]
 800d67a:	9307      	str	r3, [sp, #28]
 800d67c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d680:	9002      	str	r0, [sp, #8]
 800d682:	9006      	str	r0, [sp, #24]
 800d684:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d688:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d68a:	ab21      	add	r3, sp, #132	; 0x84
 800d68c:	a902      	add	r1, sp, #8
 800d68e:	4628      	mov	r0, r5
 800d690:	9301      	str	r3, [sp, #4]
 800d692:	f000 fa79 	bl	800db88 <_svfiprintf_r>
 800d696:	1c43      	adds	r3, r0, #1
 800d698:	bfbc      	itt	lt
 800d69a:	238b      	movlt	r3, #139	; 0x8b
 800d69c:	602b      	strlt	r3, [r5, #0]
 800d69e:	2c00      	cmp	r4, #0
 800d6a0:	d0dd      	beq.n	800d65e <sniprintf+0x16>
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	9b02      	ldr	r3, [sp, #8]
 800d6a6:	701a      	strb	r2, [r3, #0]
 800d6a8:	e7d9      	b.n	800d65e <sniprintf+0x16>
 800d6aa:	bf00      	nop
 800d6ac:	20000220 	.word	0x20000220

0800d6b0 <siscanf>:
 800d6b0:	b40e      	push	{r1, r2, r3}
 800d6b2:	f44f 7201 	mov.w	r2, #516	; 0x204
 800d6b6:	b530      	push	{r4, r5, lr}
 800d6b8:	b09c      	sub	sp, #112	; 0x70
 800d6ba:	ac1f      	add	r4, sp, #124	; 0x7c
 800d6bc:	f854 5b04 	ldr.w	r5, [r4], #4
 800d6c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d6c4:	9002      	str	r0, [sp, #8]
 800d6c6:	9006      	str	r0, [sp, #24]
 800d6c8:	f7f2 fd4c 	bl	8000164 <strlen>
 800d6cc:	4b0b      	ldr	r3, [pc, #44]	; (800d6fc <siscanf+0x4c>)
 800d6ce:	9003      	str	r0, [sp, #12]
 800d6d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6d6:	9314      	str	r3, [sp, #80]	; 0x50
 800d6d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d6dc:	9007      	str	r0, [sp, #28]
 800d6de:	4808      	ldr	r0, [pc, #32]	; (800d700 <siscanf+0x50>)
 800d6e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d6e4:	462a      	mov	r2, r5
 800d6e6:	4623      	mov	r3, r4
 800d6e8:	a902      	add	r1, sp, #8
 800d6ea:	6800      	ldr	r0, [r0, #0]
 800d6ec:	9401      	str	r4, [sp, #4]
 800d6ee:	f000 fb9d 	bl	800de2c <__ssvfiscanf_r>
 800d6f2:	b01c      	add	sp, #112	; 0x70
 800d6f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6f8:	b003      	add	sp, #12
 800d6fa:	4770      	bx	lr
 800d6fc:	0800d705 	.word	0x0800d705
 800d700:	20000220 	.word	0x20000220

0800d704 <__seofread>:
 800d704:	2000      	movs	r0, #0
 800d706:	4770      	bx	lr

0800d708 <strchr>:
 800d708:	b2c9      	uxtb	r1, r1
 800d70a:	4603      	mov	r3, r0
 800d70c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d710:	b11a      	cbz	r2, 800d71a <strchr+0x12>
 800d712:	428a      	cmp	r2, r1
 800d714:	d1f9      	bne.n	800d70a <strchr+0x2>
 800d716:	4618      	mov	r0, r3
 800d718:	4770      	bx	lr
 800d71a:	2900      	cmp	r1, #0
 800d71c:	bf18      	it	ne
 800d71e:	2300      	movne	r3, #0
 800d720:	e7f9      	b.n	800d716 <strchr+0xe>

0800d722 <strncat>:
 800d722:	4603      	mov	r3, r0
 800d724:	b530      	push	{r4, r5, lr}
 800d726:	781c      	ldrb	r4, [r3, #0]
 800d728:	1c5d      	adds	r5, r3, #1
 800d72a:	b944      	cbnz	r4, 800d73e <strncat+0x1c>
 800d72c:	f112 32ff 	adds.w	r2, r2, #4294967295
 800d730:	d304      	bcc.n	800d73c <strncat+0x1a>
 800d732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d736:	f803 4b01 	strb.w	r4, [r3], #1
 800d73a:	b914      	cbnz	r4, 800d742 <strncat+0x20>
 800d73c:	bd30      	pop	{r4, r5, pc}
 800d73e:	462b      	mov	r3, r5
 800d740:	e7f1      	b.n	800d726 <strncat+0x4>
 800d742:	2a00      	cmp	r2, #0
 800d744:	d1f2      	bne.n	800d72c <strncat+0xa>
 800d746:	701a      	strb	r2, [r3, #0]
 800d748:	e7f0      	b.n	800d72c <strncat+0xa>

0800d74a <strncmp>:
 800d74a:	b510      	push	{r4, lr}
 800d74c:	b16a      	cbz	r2, 800d76a <strncmp+0x20>
 800d74e:	3901      	subs	r1, #1
 800d750:	1884      	adds	r4, r0, r2
 800d752:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d756:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d103      	bne.n	800d766 <strncmp+0x1c>
 800d75e:	42a0      	cmp	r0, r4
 800d760:	d001      	beq.n	800d766 <strncmp+0x1c>
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1f5      	bne.n	800d752 <strncmp+0x8>
 800d766:	1a98      	subs	r0, r3, r2
 800d768:	bd10      	pop	{r4, pc}
 800d76a:	4610      	mov	r0, r2
 800d76c:	e7fc      	b.n	800d768 <strncmp+0x1e>
	...

0800d770 <strtok>:
 800d770:	4b13      	ldr	r3, [pc, #76]	; (800d7c0 <strtok+0x50>)
 800d772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d776:	681d      	ldr	r5, [r3, #0]
 800d778:	4606      	mov	r6, r0
 800d77a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800d77c:	460f      	mov	r7, r1
 800d77e:	b9b4      	cbnz	r4, 800d7ae <strtok+0x3e>
 800d780:	2050      	movs	r0, #80	; 0x50
 800d782:	f000 f8f9 	bl	800d978 <malloc>
 800d786:	65a8      	str	r0, [r5, #88]	; 0x58
 800d788:	e9c0 4400 	strd	r4, r4, [r0]
 800d78c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d790:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d794:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d798:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d79c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d7a0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d7a4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d7a8:	6184      	str	r4, [r0, #24]
 800d7aa:	7704      	strb	r4, [r0, #28]
 800d7ac:	6244      	str	r4, [r0, #36]	; 0x24
 800d7ae:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800d7b0:	4639      	mov	r1, r7
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	f000 b803 	b.w	800d7c4 <__strtok_r>
 800d7be:	bf00      	nop
 800d7c0:	20000220 	.word	0x20000220

0800d7c4 <__strtok_r>:
 800d7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7c6:	b918      	cbnz	r0, 800d7d0 <__strtok_r+0xc>
 800d7c8:	6810      	ldr	r0, [r2, #0]
 800d7ca:	b908      	cbnz	r0, 800d7d0 <__strtok_r+0xc>
 800d7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	4604      	mov	r4, r0
 800d7d2:	460f      	mov	r7, r1
 800d7d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d7d8:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d7dc:	b91e      	cbnz	r6, 800d7e6 <__strtok_r+0x22>
 800d7de:	b96d      	cbnz	r5, 800d7fc <__strtok_r+0x38>
 800d7e0:	6015      	str	r5, [r2, #0]
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	e7f2      	b.n	800d7cc <__strtok_r+0x8>
 800d7e6:	42b5      	cmp	r5, r6
 800d7e8:	d1f6      	bne.n	800d7d8 <__strtok_r+0x14>
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1ef      	bne.n	800d7ce <__strtok_r+0xa>
 800d7ee:	6014      	str	r4, [r2, #0]
 800d7f0:	7003      	strb	r3, [r0, #0]
 800d7f2:	e7eb      	b.n	800d7cc <__strtok_r+0x8>
 800d7f4:	462b      	mov	r3, r5
 800d7f6:	e00d      	b.n	800d814 <__strtok_r+0x50>
 800d7f8:	b926      	cbnz	r6, 800d804 <__strtok_r+0x40>
 800d7fa:	461c      	mov	r4, r3
 800d7fc:	4623      	mov	r3, r4
 800d7fe:	460f      	mov	r7, r1
 800d800:	f813 5b01 	ldrb.w	r5, [r3], #1
 800d804:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d808:	42b5      	cmp	r5, r6
 800d80a:	d1f5      	bne.n	800d7f8 <__strtok_r+0x34>
 800d80c:	2d00      	cmp	r5, #0
 800d80e:	d0f1      	beq.n	800d7f4 <__strtok_r+0x30>
 800d810:	2100      	movs	r1, #0
 800d812:	7021      	strb	r1, [r4, #0]
 800d814:	6013      	str	r3, [r2, #0]
 800d816:	e7d9      	b.n	800d7cc <__strtok_r+0x8>

0800d818 <_strtoul_l.isra.0>:
 800d818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d81c:	4680      	mov	r8, r0
 800d81e:	4689      	mov	r9, r1
 800d820:	4692      	mov	sl, r2
 800d822:	461e      	mov	r6, r3
 800d824:	460f      	mov	r7, r1
 800d826:	463d      	mov	r5, r7
 800d828:	9808      	ldr	r0, [sp, #32]
 800d82a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d82e:	f7ff febb 	bl	800d5a8 <__locale_ctype_ptr_l>
 800d832:	4420      	add	r0, r4
 800d834:	7843      	ldrb	r3, [r0, #1]
 800d836:	f013 0308 	ands.w	r3, r3, #8
 800d83a:	d130      	bne.n	800d89e <_strtoul_l.isra.0+0x86>
 800d83c:	2c2d      	cmp	r4, #45	; 0x2d
 800d83e:	d130      	bne.n	800d8a2 <_strtoul_l.isra.0+0x8a>
 800d840:	2101      	movs	r1, #1
 800d842:	787c      	ldrb	r4, [r7, #1]
 800d844:	1cbd      	adds	r5, r7, #2
 800d846:	2e00      	cmp	r6, #0
 800d848:	d05c      	beq.n	800d904 <_strtoul_l.isra.0+0xec>
 800d84a:	2e10      	cmp	r6, #16
 800d84c:	d109      	bne.n	800d862 <_strtoul_l.isra.0+0x4a>
 800d84e:	2c30      	cmp	r4, #48	; 0x30
 800d850:	d107      	bne.n	800d862 <_strtoul_l.isra.0+0x4a>
 800d852:	782b      	ldrb	r3, [r5, #0]
 800d854:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d858:	2b58      	cmp	r3, #88	; 0x58
 800d85a:	d14e      	bne.n	800d8fa <_strtoul_l.isra.0+0xe2>
 800d85c:	2610      	movs	r6, #16
 800d85e:	786c      	ldrb	r4, [r5, #1]
 800d860:	3502      	adds	r5, #2
 800d862:	f04f 32ff 	mov.w	r2, #4294967295
 800d866:	fbb2 f2f6 	udiv	r2, r2, r6
 800d86a:	2300      	movs	r3, #0
 800d86c:	fb06 fc02 	mul.w	ip, r6, r2
 800d870:	4618      	mov	r0, r3
 800d872:	ea6f 0c0c 	mvn.w	ip, ip
 800d876:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d87a:	2f09      	cmp	r7, #9
 800d87c:	d817      	bhi.n	800d8ae <_strtoul_l.isra.0+0x96>
 800d87e:	463c      	mov	r4, r7
 800d880:	42a6      	cmp	r6, r4
 800d882:	dd23      	ble.n	800d8cc <_strtoul_l.isra.0+0xb4>
 800d884:	2b00      	cmp	r3, #0
 800d886:	db1e      	blt.n	800d8c6 <_strtoul_l.isra.0+0xae>
 800d888:	4282      	cmp	r2, r0
 800d88a:	d31c      	bcc.n	800d8c6 <_strtoul_l.isra.0+0xae>
 800d88c:	d101      	bne.n	800d892 <_strtoul_l.isra.0+0x7a>
 800d88e:	45a4      	cmp	ip, r4
 800d890:	db19      	blt.n	800d8c6 <_strtoul_l.isra.0+0xae>
 800d892:	2301      	movs	r3, #1
 800d894:	fb00 4006 	mla	r0, r0, r6, r4
 800d898:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d89c:	e7eb      	b.n	800d876 <_strtoul_l.isra.0+0x5e>
 800d89e:	462f      	mov	r7, r5
 800d8a0:	e7c1      	b.n	800d826 <_strtoul_l.isra.0+0xe>
 800d8a2:	2c2b      	cmp	r4, #43	; 0x2b
 800d8a4:	bf04      	itt	eq
 800d8a6:	1cbd      	addeq	r5, r7, #2
 800d8a8:	787c      	ldrbeq	r4, [r7, #1]
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	e7cb      	b.n	800d846 <_strtoul_l.isra.0+0x2e>
 800d8ae:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d8b2:	2f19      	cmp	r7, #25
 800d8b4:	d801      	bhi.n	800d8ba <_strtoul_l.isra.0+0xa2>
 800d8b6:	3c37      	subs	r4, #55	; 0x37
 800d8b8:	e7e2      	b.n	800d880 <_strtoul_l.isra.0+0x68>
 800d8ba:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d8be:	2f19      	cmp	r7, #25
 800d8c0:	d804      	bhi.n	800d8cc <_strtoul_l.isra.0+0xb4>
 800d8c2:	3c57      	subs	r4, #87	; 0x57
 800d8c4:	e7dc      	b.n	800d880 <_strtoul_l.isra.0+0x68>
 800d8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ca:	e7e5      	b.n	800d898 <_strtoul_l.isra.0+0x80>
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	da09      	bge.n	800d8e4 <_strtoul_l.isra.0+0xcc>
 800d8d0:	2322      	movs	r3, #34	; 0x22
 800d8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d6:	f8c8 3000 	str.w	r3, [r8]
 800d8da:	f1ba 0f00 	cmp.w	sl, #0
 800d8de:	d107      	bne.n	800d8f0 <_strtoul_l.isra.0+0xd8>
 800d8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e4:	b101      	cbz	r1, 800d8e8 <_strtoul_l.isra.0+0xd0>
 800d8e6:	4240      	negs	r0, r0
 800d8e8:	f1ba 0f00 	cmp.w	sl, #0
 800d8ec:	d0f8      	beq.n	800d8e0 <_strtoul_l.isra.0+0xc8>
 800d8ee:	b10b      	cbz	r3, 800d8f4 <_strtoul_l.isra.0+0xdc>
 800d8f0:	f105 39ff 	add.w	r9, r5, #4294967295
 800d8f4:	f8ca 9000 	str.w	r9, [sl]
 800d8f8:	e7f2      	b.n	800d8e0 <_strtoul_l.isra.0+0xc8>
 800d8fa:	2430      	movs	r4, #48	; 0x30
 800d8fc:	2e00      	cmp	r6, #0
 800d8fe:	d1b0      	bne.n	800d862 <_strtoul_l.isra.0+0x4a>
 800d900:	2608      	movs	r6, #8
 800d902:	e7ae      	b.n	800d862 <_strtoul_l.isra.0+0x4a>
 800d904:	2c30      	cmp	r4, #48	; 0x30
 800d906:	d0a4      	beq.n	800d852 <_strtoul_l.isra.0+0x3a>
 800d908:	260a      	movs	r6, #10
 800d90a:	e7aa      	b.n	800d862 <_strtoul_l.isra.0+0x4a>

0800d90c <_strtoul_r>:
 800d90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d90e:	4c06      	ldr	r4, [pc, #24]	; (800d928 <_strtoul_r+0x1c>)
 800d910:	4d06      	ldr	r5, [pc, #24]	; (800d92c <_strtoul_r+0x20>)
 800d912:	6824      	ldr	r4, [r4, #0]
 800d914:	6a24      	ldr	r4, [r4, #32]
 800d916:	2c00      	cmp	r4, #0
 800d918:	bf08      	it	eq
 800d91a:	462c      	moveq	r4, r5
 800d91c:	9400      	str	r4, [sp, #0]
 800d91e:	f7ff ff7b 	bl	800d818 <_strtoul_l.isra.0>
 800d922:	b003      	add	sp, #12
 800d924:	bd30      	pop	{r4, r5, pc}
 800d926:	bf00      	nop
 800d928:	20000220 	.word	0x20000220
 800d92c:	20000284 	.word	0x20000284

0800d930 <strtoul>:
 800d930:	4b08      	ldr	r3, [pc, #32]	; (800d954 <strtoul+0x24>)
 800d932:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d934:	681c      	ldr	r4, [r3, #0]
 800d936:	4d08      	ldr	r5, [pc, #32]	; (800d958 <strtoul+0x28>)
 800d938:	6a23      	ldr	r3, [r4, #32]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	bf08      	it	eq
 800d93e:	462b      	moveq	r3, r5
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	4613      	mov	r3, r2
 800d944:	460a      	mov	r2, r1
 800d946:	4601      	mov	r1, r0
 800d948:	4620      	mov	r0, r4
 800d94a:	f7ff ff65 	bl	800d818 <_strtoul_l.isra.0>
 800d94e:	b003      	add	sp, #12
 800d950:	bd30      	pop	{r4, r5, pc}
 800d952:	bf00      	nop
 800d954:	20000220 	.word	0x20000220
 800d958:	20000284 	.word	0x20000284

0800d95c <__ascii_wctomb>:
 800d95c:	b149      	cbz	r1, 800d972 <__ascii_wctomb+0x16>
 800d95e:	2aff      	cmp	r2, #255	; 0xff
 800d960:	bf8b      	itete	hi
 800d962:	238a      	movhi	r3, #138	; 0x8a
 800d964:	700a      	strbls	r2, [r1, #0]
 800d966:	6003      	strhi	r3, [r0, #0]
 800d968:	2001      	movls	r0, #1
 800d96a:	bf88      	it	hi
 800d96c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d970:	4770      	bx	lr
 800d972:	4608      	mov	r0, r1
 800d974:	4770      	bx	lr
	...

0800d978 <malloc>:
 800d978:	4b02      	ldr	r3, [pc, #8]	; (800d984 <malloc+0xc>)
 800d97a:	4601      	mov	r1, r0
 800d97c:	6818      	ldr	r0, [r3, #0]
 800d97e:	f000 b84f 	b.w	800da20 <_malloc_r>
 800d982:	bf00      	nop
 800d984:	20000220 	.word	0x20000220

0800d988 <_free_r>:
 800d988:	b538      	push	{r3, r4, r5, lr}
 800d98a:	4605      	mov	r5, r0
 800d98c:	2900      	cmp	r1, #0
 800d98e:	d043      	beq.n	800da18 <_free_r+0x90>
 800d990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d994:	1f0c      	subs	r4, r1, #4
 800d996:	2b00      	cmp	r3, #0
 800d998:	bfb8      	it	lt
 800d99a:	18e4      	addlt	r4, r4, r3
 800d99c:	f000 ff8a 	bl	800e8b4 <__malloc_lock>
 800d9a0:	4a1e      	ldr	r2, [pc, #120]	; (800da1c <_free_r+0x94>)
 800d9a2:	6813      	ldr	r3, [r2, #0]
 800d9a4:	4610      	mov	r0, r2
 800d9a6:	b933      	cbnz	r3, 800d9b6 <_free_r+0x2e>
 800d9a8:	6063      	str	r3, [r4, #4]
 800d9aa:	6014      	str	r4, [r2, #0]
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9b2:	f000 bf80 	b.w	800e8b6 <__malloc_unlock>
 800d9b6:	42a3      	cmp	r3, r4
 800d9b8:	d90b      	bls.n	800d9d2 <_free_r+0x4a>
 800d9ba:	6821      	ldr	r1, [r4, #0]
 800d9bc:	1862      	adds	r2, r4, r1
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	bf01      	itttt	eq
 800d9c2:	681a      	ldreq	r2, [r3, #0]
 800d9c4:	685b      	ldreq	r3, [r3, #4]
 800d9c6:	1852      	addeq	r2, r2, r1
 800d9c8:	6022      	streq	r2, [r4, #0]
 800d9ca:	6063      	str	r3, [r4, #4]
 800d9cc:	6004      	str	r4, [r0, #0]
 800d9ce:	e7ed      	b.n	800d9ac <_free_r+0x24>
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	685a      	ldr	r2, [r3, #4]
 800d9d4:	b10a      	cbz	r2, 800d9da <_free_r+0x52>
 800d9d6:	42a2      	cmp	r2, r4
 800d9d8:	d9fa      	bls.n	800d9d0 <_free_r+0x48>
 800d9da:	6819      	ldr	r1, [r3, #0]
 800d9dc:	1858      	adds	r0, r3, r1
 800d9de:	42a0      	cmp	r0, r4
 800d9e0:	d10b      	bne.n	800d9fa <_free_r+0x72>
 800d9e2:	6820      	ldr	r0, [r4, #0]
 800d9e4:	4401      	add	r1, r0
 800d9e6:	1858      	adds	r0, r3, r1
 800d9e8:	4282      	cmp	r2, r0
 800d9ea:	6019      	str	r1, [r3, #0]
 800d9ec:	d1de      	bne.n	800d9ac <_free_r+0x24>
 800d9ee:	6810      	ldr	r0, [r2, #0]
 800d9f0:	6852      	ldr	r2, [r2, #4]
 800d9f2:	4401      	add	r1, r0
 800d9f4:	6019      	str	r1, [r3, #0]
 800d9f6:	605a      	str	r2, [r3, #4]
 800d9f8:	e7d8      	b.n	800d9ac <_free_r+0x24>
 800d9fa:	d902      	bls.n	800da02 <_free_r+0x7a>
 800d9fc:	230c      	movs	r3, #12
 800d9fe:	602b      	str	r3, [r5, #0]
 800da00:	e7d4      	b.n	800d9ac <_free_r+0x24>
 800da02:	6820      	ldr	r0, [r4, #0]
 800da04:	1821      	adds	r1, r4, r0
 800da06:	428a      	cmp	r2, r1
 800da08:	bf01      	itttt	eq
 800da0a:	6811      	ldreq	r1, [r2, #0]
 800da0c:	6852      	ldreq	r2, [r2, #4]
 800da0e:	1809      	addeq	r1, r1, r0
 800da10:	6021      	streq	r1, [r4, #0]
 800da12:	6062      	str	r2, [r4, #4]
 800da14:	605c      	str	r4, [r3, #4]
 800da16:	e7c9      	b.n	800d9ac <_free_r+0x24>
 800da18:	bd38      	pop	{r3, r4, r5, pc}
 800da1a:	bf00      	nop
 800da1c:	20003224 	.word	0x20003224

0800da20 <_malloc_r>:
 800da20:	b570      	push	{r4, r5, r6, lr}
 800da22:	1ccd      	adds	r5, r1, #3
 800da24:	f025 0503 	bic.w	r5, r5, #3
 800da28:	3508      	adds	r5, #8
 800da2a:	2d0c      	cmp	r5, #12
 800da2c:	bf38      	it	cc
 800da2e:	250c      	movcc	r5, #12
 800da30:	2d00      	cmp	r5, #0
 800da32:	4606      	mov	r6, r0
 800da34:	db01      	blt.n	800da3a <_malloc_r+0x1a>
 800da36:	42a9      	cmp	r1, r5
 800da38:	d903      	bls.n	800da42 <_malloc_r+0x22>
 800da3a:	230c      	movs	r3, #12
 800da3c:	6033      	str	r3, [r6, #0]
 800da3e:	2000      	movs	r0, #0
 800da40:	bd70      	pop	{r4, r5, r6, pc}
 800da42:	f000 ff37 	bl	800e8b4 <__malloc_lock>
 800da46:	4a21      	ldr	r2, [pc, #132]	; (800dacc <_malloc_r+0xac>)
 800da48:	6814      	ldr	r4, [r2, #0]
 800da4a:	4621      	mov	r1, r4
 800da4c:	b991      	cbnz	r1, 800da74 <_malloc_r+0x54>
 800da4e:	4c20      	ldr	r4, [pc, #128]	; (800dad0 <_malloc_r+0xb0>)
 800da50:	6823      	ldr	r3, [r4, #0]
 800da52:	b91b      	cbnz	r3, 800da5c <_malloc_r+0x3c>
 800da54:	4630      	mov	r0, r6
 800da56:	f000 fe19 	bl	800e68c <_sbrk_r>
 800da5a:	6020      	str	r0, [r4, #0]
 800da5c:	4629      	mov	r1, r5
 800da5e:	4630      	mov	r0, r6
 800da60:	f000 fe14 	bl	800e68c <_sbrk_r>
 800da64:	1c43      	adds	r3, r0, #1
 800da66:	d124      	bne.n	800dab2 <_malloc_r+0x92>
 800da68:	230c      	movs	r3, #12
 800da6a:	4630      	mov	r0, r6
 800da6c:	6033      	str	r3, [r6, #0]
 800da6e:	f000 ff22 	bl	800e8b6 <__malloc_unlock>
 800da72:	e7e4      	b.n	800da3e <_malloc_r+0x1e>
 800da74:	680b      	ldr	r3, [r1, #0]
 800da76:	1b5b      	subs	r3, r3, r5
 800da78:	d418      	bmi.n	800daac <_malloc_r+0x8c>
 800da7a:	2b0b      	cmp	r3, #11
 800da7c:	d90f      	bls.n	800da9e <_malloc_r+0x7e>
 800da7e:	600b      	str	r3, [r1, #0]
 800da80:	18cc      	adds	r4, r1, r3
 800da82:	50cd      	str	r5, [r1, r3]
 800da84:	4630      	mov	r0, r6
 800da86:	f000 ff16 	bl	800e8b6 <__malloc_unlock>
 800da8a:	f104 000b 	add.w	r0, r4, #11
 800da8e:	1d23      	adds	r3, r4, #4
 800da90:	f020 0007 	bic.w	r0, r0, #7
 800da94:	1ac3      	subs	r3, r0, r3
 800da96:	d0d3      	beq.n	800da40 <_malloc_r+0x20>
 800da98:	425a      	negs	r2, r3
 800da9a:	50e2      	str	r2, [r4, r3]
 800da9c:	e7d0      	b.n	800da40 <_malloc_r+0x20>
 800da9e:	684b      	ldr	r3, [r1, #4]
 800daa0:	428c      	cmp	r4, r1
 800daa2:	bf16      	itet	ne
 800daa4:	6063      	strne	r3, [r4, #4]
 800daa6:	6013      	streq	r3, [r2, #0]
 800daa8:	460c      	movne	r4, r1
 800daaa:	e7eb      	b.n	800da84 <_malloc_r+0x64>
 800daac:	460c      	mov	r4, r1
 800daae:	6849      	ldr	r1, [r1, #4]
 800dab0:	e7cc      	b.n	800da4c <_malloc_r+0x2c>
 800dab2:	1cc4      	adds	r4, r0, #3
 800dab4:	f024 0403 	bic.w	r4, r4, #3
 800dab8:	42a0      	cmp	r0, r4
 800daba:	d005      	beq.n	800dac8 <_malloc_r+0xa8>
 800dabc:	1a21      	subs	r1, r4, r0
 800dabe:	4630      	mov	r0, r6
 800dac0:	f000 fde4 	bl	800e68c <_sbrk_r>
 800dac4:	3001      	adds	r0, #1
 800dac6:	d0cf      	beq.n	800da68 <_malloc_r+0x48>
 800dac8:	6025      	str	r5, [r4, #0]
 800daca:	e7db      	b.n	800da84 <_malloc_r+0x64>
 800dacc:	20003224 	.word	0x20003224
 800dad0:	20003228 	.word	0x20003228

0800dad4 <__ssputs_r>:
 800dad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dad8:	688e      	ldr	r6, [r1, #8]
 800dada:	4682      	mov	sl, r0
 800dadc:	429e      	cmp	r6, r3
 800dade:	460c      	mov	r4, r1
 800dae0:	4690      	mov	r8, r2
 800dae2:	4699      	mov	r9, r3
 800dae4:	d837      	bhi.n	800db56 <__ssputs_r+0x82>
 800dae6:	898a      	ldrh	r2, [r1, #12]
 800dae8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800daec:	d031      	beq.n	800db52 <__ssputs_r+0x7e>
 800daee:	2302      	movs	r3, #2
 800daf0:	6825      	ldr	r5, [r4, #0]
 800daf2:	6909      	ldr	r1, [r1, #16]
 800daf4:	1a6f      	subs	r7, r5, r1
 800daf6:	6965      	ldr	r5, [r4, #20]
 800daf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dafc:	fb95 f5f3 	sdiv	r5, r5, r3
 800db00:	f109 0301 	add.w	r3, r9, #1
 800db04:	443b      	add	r3, r7
 800db06:	429d      	cmp	r5, r3
 800db08:	bf38      	it	cc
 800db0a:	461d      	movcc	r5, r3
 800db0c:	0553      	lsls	r3, r2, #21
 800db0e:	d530      	bpl.n	800db72 <__ssputs_r+0x9e>
 800db10:	4629      	mov	r1, r5
 800db12:	f7ff ff85 	bl	800da20 <_malloc_r>
 800db16:	4606      	mov	r6, r0
 800db18:	b950      	cbnz	r0, 800db30 <__ssputs_r+0x5c>
 800db1a:	230c      	movs	r3, #12
 800db1c:	f04f 30ff 	mov.w	r0, #4294967295
 800db20:	f8ca 3000 	str.w	r3, [sl]
 800db24:	89a3      	ldrh	r3, [r4, #12]
 800db26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db2a:	81a3      	strh	r3, [r4, #12]
 800db2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db30:	463a      	mov	r2, r7
 800db32:	6921      	ldr	r1, [r4, #16]
 800db34:	f7ff fd5c 	bl	800d5f0 <memcpy>
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db42:	81a3      	strh	r3, [r4, #12]
 800db44:	6126      	str	r6, [r4, #16]
 800db46:	443e      	add	r6, r7
 800db48:	6026      	str	r6, [r4, #0]
 800db4a:	464e      	mov	r6, r9
 800db4c:	6165      	str	r5, [r4, #20]
 800db4e:	1bed      	subs	r5, r5, r7
 800db50:	60a5      	str	r5, [r4, #8]
 800db52:	454e      	cmp	r6, r9
 800db54:	d900      	bls.n	800db58 <__ssputs_r+0x84>
 800db56:	464e      	mov	r6, r9
 800db58:	4632      	mov	r2, r6
 800db5a:	4641      	mov	r1, r8
 800db5c:	6820      	ldr	r0, [r4, #0]
 800db5e:	f7ff fd52 	bl	800d606 <memmove>
 800db62:	68a3      	ldr	r3, [r4, #8]
 800db64:	2000      	movs	r0, #0
 800db66:	1b9b      	subs	r3, r3, r6
 800db68:	60a3      	str	r3, [r4, #8]
 800db6a:	6823      	ldr	r3, [r4, #0]
 800db6c:	441e      	add	r6, r3
 800db6e:	6026      	str	r6, [r4, #0]
 800db70:	e7dc      	b.n	800db2c <__ssputs_r+0x58>
 800db72:	462a      	mov	r2, r5
 800db74:	f000 fea0 	bl	800e8b8 <_realloc_r>
 800db78:	4606      	mov	r6, r0
 800db7a:	2800      	cmp	r0, #0
 800db7c:	d1e2      	bne.n	800db44 <__ssputs_r+0x70>
 800db7e:	6921      	ldr	r1, [r4, #16]
 800db80:	4650      	mov	r0, sl
 800db82:	f7ff ff01 	bl	800d988 <_free_r>
 800db86:	e7c8      	b.n	800db1a <__ssputs_r+0x46>

0800db88 <_svfiprintf_r>:
 800db88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db8c:	461d      	mov	r5, r3
 800db8e:	898b      	ldrh	r3, [r1, #12]
 800db90:	b09d      	sub	sp, #116	; 0x74
 800db92:	061f      	lsls	r7, r3, #24
 800db94:	4680      	mov	r8, r0
 800db96:	460c      	mov	r4, r1
 800db98:	4616      	mov	r6, r2
 800db9a:	d50f      	bpl.n	800dbbc <_svfiprintf_r+0x34>
 800db9c:	690b      	ldr	r3, [r1, #16]
 800db9e:	b96b      	cbnz	r3, 800dbbc <_svfiprintf_r+0x34>
 800dba0:	2140      	movs	r1, #64	; 0x40
 800dba2:	f7ff ff3d 	bl	800da20 <_malloc_r>
 800dba6:	6020      	str	r0, [r4, #0]
 800dba8:	6120      	str	r0, [r4, #16]
 800dbaa:	b928      	cbnz	r0, 800dbb8 <_svfiprintf_r+0x30>
 800dbac:	230c      	movs	r3, #12
 800dbae:	f8c8 3000 	str.w	r3, [r8]
 800dbb2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb6:	e0c8      	b.n	800dd4a <_svfiprintf_r+0x1c2>
 800dbb8:	2340      	movs	r3, #64	; 0x40
 800dbba:	6163      	str	r3, [r4, #20]
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc0:	2320      	movs	r3, #32
 800dbc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbc6:	2330      	movs	r3, #48	; 0x30
 800dbc8:	f04f 0b01 	mov.w	fp, #1
 800dbcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbd0:	9503      	str	r5, [sp, #12]
 800dbd2:	4637      	mov	r7, r6
 800dbd4:	463d      	mov	r5, r7
 800dbd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dbda:	b10b      	cbz	r3, 800dbe0 <_svfiprintf_r+0x58>
 800dbdc:	2b25      	cmp	r3, #37	; 0x25
 800dbde:	d13e      	bne.n	800dc5e <_svfiprintf_r+0xd6>
 800dbe0:	ebb7 0a06 	subs.w	sl, r7, r6
 800dbe4:	d00b      	beq.n	800dbfe <_svfiprintf_r+0x76>
 800dbe6:	4653      	mov	r3, sl
 800dbe8:	4632      	mov	r2, r6
 800dbea:	4621      	mov	r1, r4
 800dbec:	4640      	mov	r0, r8
 800dbee:	f7ff ff71 	bl	800dad4 <__ssputs_r>
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	f000 80a4 	beq.w	800dd40 <_svfiprintf_r+0x1b8>
 800dbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbfa:	4453      	add	r3, sl
 800dbfc:	9309      	str	r3, [sp, #36]	; 0x24
 800dbfe:	783b      	ldrb	r3, [r7, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f000 809d 	beq.w	800dd40 <_svfiprintf_r+0x1b8>
 800dc06:	2300      	movs	r3, #0
 800dc08:	f04f 32ff 	mov.w	r2, #4294967295
 800dc0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc10:	9304      	str	r3, [sp, #16]
 800dc12:	9307      	str	r3, [sp, #28]
 800dc14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc18:	931a      	str	r3, [sp, #104]	; 0x68
 800dc1a:	462f      	mov	r7, r5
 800dc1c:	2205      	movs	r2, #5
 800dc1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dc22:	4850      	ldr	r0, [pc, #320]	; (800dd64 <_svfiprintf_r+0x1dc>)
 800dc24:	f000 fe38 	bl	800e898 <memchr>
 800dc28:	9b04      	ldr	r3, [sp, #16]
 800dc2a:	b9d0      	cbnz	r0, 800dc62 <_svfiprintf_r+0xda>
 800dc2c:	06d9      	lsls	r1, r3, #27
 800dc2e:	bf44      	itt	mi
 800dc30:	2220      	movmi	r2, #32
 800dc32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dc36:	071a      	lsls	r2, r3, #28
 800dc38:	bf44      	itt	mi
 800dc3a:	222b      	movmi	r2, #43	; 0x2b
 800dc3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dc40:	782a      	ldrb	r2, [r5, #0]
 800dc42:	2a2a      	cmp	r2, #42	; 0x2a
 800dc44:	d015      	beq.n	800dc72 <_svfiprintf_r+0xea>
 800dc46:	462f      	mov	r7, r5
 800dc48:	2000      	movs	r0, #0
 800dc4a:	250a      	movs	r5, #10
 800dc4c:	9a07      	ldr	r2, [sp, #28]
 800dc4e:	4639      	mov	r1, r7
 800dc50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc54:	3b30      	subs	r3, #48	; 0x30
 800dc56:	2b09      	cmp	r3, #9
 800dc58:	d94d      	bls.n	800dcf6 <_svfiprintf_r+0x16e>
 800dc5a:	b1b8      	cbz	r0, 800dc8c <_svfiprintf_r+0x104>
 800dc5c:	e00f      	b.n	800dc7e <_svfiprintf_r+0xf6>
 800dc5e:	462f      	mov	r7, r5
 800dc60:	e7b8      	b.n	800dbd4 <_svfiprintf_r+0x4c>
 800dc62:	4a40      	ldr	r2, [pc, #256]	; (800dd64 <_svfiprintf_r+0x1dc>)
 800dc64:	463d      	mov	r5, r7
 800dc66:	1a80      	subs	r0, r0, r2
 800dc68:	fa0b f000 	lsl.w	r0, fp, r0
 800dc6c:	4318      	orrs	r0, r3
 800dc6e:	9004      	str	r0, [sp, #16]
 800dc70:	e7d3      	b.n	800dc1a <_svfiprintf_r+0x92>
 800dc72:	9a03      	ldr	r2, [sp, #12]
 800dc74:	1d11      	adds	r1, r2, #4
 800dc76:	6812      	ldr	r2, [r2, #0]
 800dc78:	9103      	str	r1, [sp, #12]
 800dc7a:	2a00      	cmp	r2, #0
 800dc7c:	db01      	blt.n	800dc82 <_svfiprintf_r+0xfa>
 800dc7e:	9207      	str	r2, [sp, #28]
 800dc80:	e004      	b.n	800dc8c <_svfiprintf_r+0x104>
 800dc82:	4252      	negs	r2, r2
 800dc84:	f043 0302 	orr.w	r3, r3, #2
 800dc88:	9207      	str	r2, [sp, #28]
 800dc8a:	9304      	str	r3, [sp, #16]
 800dc8c:	783b      	ldrb	r3, [r7, #0]
 800dc8e:	2b2e      	cmp	r3, #46	; 0x2e
 800dc90:	d10c      	bne.n	800dcac <_svfiprintf_r+0x124>
 800dc92:	787b      	ldrb	r3, [r7, #1]
 800dc94:	2b2a      	cmp	r3, #42	; 0x2a
 800dc96:	d133      	bne.n	800dd00 <_svfiprintf_r+0x178>
 800dc98:	9b03      	ldr	r3, [sp, #12]
 800dc9a:	3702      	adds	r7, #2
 800dc9c:	1d1a      	adds	r2, r3, #4
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	9203      	str	r2, [sp, #12]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	bfb8      	it	lt
 800dca6:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcaa:	9305      	str	r3, [sp, #20]
 800dcac:	4d2e      	ldr	r5, [pc, #184]	; (800dd68 <_svfiprintf_r+0x1e0>)
 800dcae:	2203      	movs	r2, #3
 800dcb0:	7839      	ldrb	r1, [r7, #0]
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f000 fdf0 	bl	800e898 <memchr>
 800dcb8:	b138      	cbz	r0, 800dcca <_svfiprintf_r+0x142>
 800dcba:	2340      	movs	r3, #64	; 0x40
 800dcbc:	1b40      	subs	r0, r0, r5
 800dcbe:	fa03 f000 	lsl.w	r0, r3, r0
 800dcc2:	9b04      	ldr	r3, [sp, #16]
 800dcc4:	3701      	adds	r7, #1
 800dcc6:	4303      	orrs	r3, r0
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	7839      	ldrb	r1, [r7, #0]
 800dccc:	2206      	movs	r2, #6
 800dcce:	4827      	ldr	r0, [pc, #156]	; (800dd6c <_svfiprintf_r+0x1e4>)
 800dcd0:	1c7e      	adds	r6, r7, #1
 800dcd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcd6:	f000 fddf 	bl	800e898 <memchr>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d038      	beq.n	800dd50 <_svfiprintf_r+0x1c8>
 800dcde:	4b24      	ldr	r3, [pc, #144]	; (800dd70 <_svfiprintf_r+0x1e8>)
 800dce0:	bb13      	cbnz	r3, 800dd28 <_svfiprintf_r+0x1a0>
 800dce2:	9b03      	ldr	r3, [sp, #12]
 800dce4:	3307      	adds	r3, #7
 800dce6:	f023 0307 	bic.w	r3, r3, #7
 800dcea:	3308      	adds	r3, #8
 800dcec:	9303      	str	r3, [sp, #12]
 800dcee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf0:	444b      	add	r3, r9
 800dcf2:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf4:	e76d      	b.n	800dbd2 <_svfiprintf_r+0x4a>
 800dcf6:	fb05 3202 	mla	r2, r5, r2, r3
 800dcfa:	2001      	movs	r0, #1
 800dcfc:	460f      	mov	r7, r1
 800dcfe:	e7a6      	b.n	800dc4e <_svfiprintf_r+0xc6>
 800dd00:	2300      	movs	r3, #0
 800dd02:	250a      	movs	r5, #10
 800dd04:	4619      	mov	r1, r3
 800dd06:	3701      	adds	r7, #1
 800dd08:	9305      	str	r3, [sp, #20]
 800dd0a:	4638      	mov	r0, r7
 800dd0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd10:	3a30      	subs	r2, #48	; 0x30
 800dd12:	2a09      	cmp	r2, #9
 800dd14:	d903      	bls.n	800dd1e <_svfiprintf_r+0x196>
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d0c8      	beq.n	800dcac <_svfiprintf_r+0x124>
 800dd1a:	9105      	str	r1, [sp, #20]
 800dd1c:	e7c6      	b.n	800dcac <_svfiprintf_r+0x124>
 800dd1e:	fb05 2101 	mla	r1, r5, r1, r2
 800dd22:	2301      	movs	r3, #1
 800dd24:	4607      	mov	r7, r0
 800dd26:	e7f0      	b.n	800dd0a <_svfiprintf_r+0x182>
 800dd28:	ab03      	add	r3, sp, #12
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	4622      	mov	r2, r4
 800dd2e:	4b11      	ldr	r3, [pc, #68]	; (800dd74 <_svfiprintf_r+0x1ec>)
 800dd30:	a904      	add	r1, sp, #16
 800dd32:	4640      	mov	r0, r8
 800dd34:	f3af 8000 	nop.w
 800dd38:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dd3c:	4681      	mov	r9, r0
 800dd3e:	d1d6      	bne.n	800dcee <_svfiprintf_r+0x166>
 800dd40:	89a3      	ldrh	r3, [r4, #12]
 800dd42:	065b      	lsls	r3, r3, #25
 800dd44:	f53f af35 	bmi.w	800dbb2 <_svfiprintf_r+0x2a>
 800dd48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd4a:	b01d      	add	sp, #116	; 0x74
 800dd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd50:	ab03      	add	r3, sp, #12
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	4622      	mov	r2, r4
 800dd56:	4b07      	ldr	r3, [pc, #28]	; (800dd74 <_svfiprintf_r+0x1ec>)
 800dd58:	a904      	add	r1, sp, #16
 800dd5a:	4640      	mov	r0, r8
 800dd5c:	f000 fa2c 	bl	800e1b8 <_printf_i>
 800dd60:	e7ea      	b.n	800dd38 <_svfiprintf_r+0x1b0>
 800dd62:	bf00      	nop
 800dd64:	0800f29b 	.word	0x0800f29b
 800dd68:	0800f2a1 	.word	0x0800f2a1
 800dd6c:	0800f2a5 	.word	0x0800f2a5
 800dd70:	00000000 	.word	0x00000000
 800dd74:	0800dad5 	.word	0x0800dad5

0800dd78 <_sungetc_r>:
 800dd78:	b538      	push	{r3, r4, r5, lr}
 800dd7a:	1c4b      	adds	r3, r1, #1
 800dd7c:	4614      	mov	r4, r2
 800dd7e:	d103      	bne.n	800dd88 <_sungetc_r+0x10>
 800dd80:	f04f 35ff 	mov.w	r5, #4294967295
 800dd84:	4628      	mov	r0, r5
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
 800dd88:	8993      	ldrh	r3, [r2, #12]
 800dd8a:	b2cd      	uxtb	r5, r1
 800dd8c:	f023 0320 	bic.w	r3, r3, #32
 800dd90:	8193      	strh	r3, [r2, #12]
 800dd92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd94:	6852      	ldr	r2, [r2, #4]
 800dd96:	b18b      	cbz	r3, 800ddbc <_sungetc_r+0x44>
 800dd98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	dd08      	ble.n	800ddb0 <_sungetc_r+0x38>
 800dd9e:	6823      	ldr	r3, [r4, #0]
 800dda0:	1e5a      	subs	r2, r3, #1
 800dda2:	6022      	str	r2, [r4, #0]
 800dda4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dda8:	6863      	ldr	r3, [r4, #4]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	6063      	str	r3, [r4, #4]
 800ddae:	e7e9      	b.n	800dd84 <_sungetc_r+0xc>
 800ddb0:	4621      	mov	r1, r4
 800ddb2:	f000 fd39 	bl	800e828 <__submore>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	d0f1      	beq.n	800dd9e <_sungetc_r+0x26>
 800ddba:	e7e1      	b.n	800dd80 <_sungetc_r+0x8>
 800ddbc:	6921      	ldr	r1, [r4, #16]
 800ddbe:	6823      	ldr	r3, [r4, #0]
 800ddc0:	b151      	cbz	r1, 800ddd8 <_sungetc_r+0x60>
 800ddc2:	4299      	cmp	r1, r3
 800ddc4:	d208      	bcs.n	800ddd8 <_sungetc_r+0x60>
 800ddc6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ddca:	42a9      	cmp	r1, r5
 800ddcc:	d104      	bne.n	800ddd8 <_sungetc_r+0x60>
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	3201      	adds	r2, #1
 800ddd2:	6023      	str	r3, [r4, #0]
 800ddd4:	6062      	str	r2, [r4, #4]
 800ddd6:	e7d5      	b.n	800dd84 <_sungetc_r+0xc>
 800ddd8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800dddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dde0:	6363      	str	r3, [r4, #52]	; 0x34
 800dde2:	2303      	movs	r3, #3
 800dde4:	63a3      	str	r3, [r4, #56]	; 0x38
 800dde6:	4623      	mov	r3, r4
 800dde8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e7dc      	b.n	800ddac <_sungetc_r+0x34>

0800ddf2 <__ssrefill_r>:
 800ddf2:	b510      	push	{r4, lr}
 800ddf4:	460c      	mov	r4, r1
 800ddf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ddf8:	b169      	cbz	r1, 800de16 <__ssrefill_r+0x24>
 800ddfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddfe:	4299      	cmp	r1, r3
 800de00:	d001      	beq.n	800de06 <__ssrefill_r+0x14>
 800de02:	f7ff fdc1 	bl	800d988 <_free_r>
 800de06:	2000      	movs	r0, #0
 800de08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de0a:	6360      	str	r0, [r4, #52]	; 0x34
 800de0c:	6063      	str	r3, [r4, #4]
 800de0e:	b113      	cbz	r3, 800de16 <__ssrefill_r+0x24>
 800de10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800de12:	6023      	str	r3, [r4, #0]
 800de14:	bd10      	pop	{r4, pc}
 800de16:	6923      	ldr	r3, [r4, #16]
 800de18:	f04f 30ff 	mov.w	r0, #4294967295
 800de1c:	6023      	str	r3, [r4, #0]
 800de1e:	2300      	movs	r3, #0
 800de20:	6063      	str	r3, [r4, #4]
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	f043 0320 	orr.w	r3, r3, #32
 800de28:	81a3      	strh	r3, [r4, #12]
 800de2a:	e7f3      	b.n	800de14 <__ssrefill_r+0x22>

0800de2c <__ssvfiscanf_r>:
 800de2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de30:	460c      	mov	r4, r1
 800de32:	2100      	movs	r1, #0
 800de34:	4606      	mov	r6, r0
 800de36:	4692      	mov	sl, r2
 800de38:	270a      	movs	r7, #10
 800de3a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800de3e:	9144      	str	r1, [sp, #272]	; 0x110
 800de40:	9145      	str	r1, [sp, #276]	; 0x114
 800de42:	499e      	ldr	r1, [pc, #632]	; (800e0bc <__ssvfiscanf_r+0x290>)
 800de44:	f10d 0804 	add.w	r8, sp, #4
 800de48:	91a0      	str	r1, [sp, #640]	; 0x280
 800de4a:	499d      	ldr	r1, [pc, #628]	; (800e0c0 <__ssvfiscanf_r+0x294>)
 800de4c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800e0c4 <__ssvfiscanf_r+0x298>
 800de50:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800de54:	91a1      	str	r1, [sp, #644]	; 0x284
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	f89a 3000 	ldrb.w	r3, [sl]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f000 812a 	beq.w	800e0b6 <__ssvfiscanf_r+0x28a>
 800de62:	4655      	mov	r5, sl
 800de64:	f7ff fba4 	bl	800d5b0 <__locale_ctype_ptr>
 800de68:	f815 bb01 	ldrb.w	fp, [r5], #1
 800de6c:	4458      	add	r0, fp
 800de6e:	7843      	ldrb	r3, [r0, #1]
 800de70:	f013 0308 	ands.w	r3, r3, #8
 800de74:	d01c      	beq.n	800deb0 <__ssvfiscanf_r+0x84>
 800de76:	6863      	ldr	r3, [r4, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	dd12      	ble.n	800dea2 <__ssvfiscanf_r+0x76>
 800de7c:	f7ff fb98 	bl	800d5b0 <__locale_ctype_ptr>
 800de80:	6823      	ldr	r3, [r4, #0]
 800de82:	781a      	ldrb	r2, [r3, #0]
 800de84:	4410      	add	r0, r2
 800de86:	7842      	ldrb	r2, [r0, #1]
 800de88:	0712      	lsls	r2, r2, #28
 800de8a:	d401      	bmi.n	800de90 <__ssvfiscanf_r+0x64>
 800de8c:	46aa      	mov	sl, r5
 800de8e:	e7e3      	b.n	800de58 <__ssvfiscanf_r+0x2c>
 800de90:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800de92:	3301      	adds	r3, #1
 800de94:	3201      	adds	r2, #1
 800de96:	9245      	str	r2, [sp, #276]	; 0x114
 800de98:	6862      	ldr	r2, [r4, #4]
 800de9a:	6023      	str	r3, [r4, #0]
 800de9c:	3a01      	subs	r2, #1
 800de9e:	6062      	str	r2, [r4, #4]
 800dea0:	e7e9      	b.n	800de76 <__ssvfiscanf_r+0x4a>
 800dea2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dea4:	4621      	mov	r1, r4
 800dea6:	4630      	mov	r0, r6
 800dea8:	4798      	blx	r3
 800deaa:	2800      	cmp	r0, #0
 800deac:	d0e6      	beq.n	800de7c <__ssvfiscanf_r+0x50>
 800deae:	e7ed      	b.n	800de8c <__ssvfiscanf_r+0x60>
 800deb0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800deb4:	f040 8082 	bne.w	800dfbc <__ssvfiscanf_r+0x190>
 800deb8:	9343      	str	r3, [sp, #268]	; 0x10c
 800deba:	9341      	str	r3, [sp, #260]	; 0x104
 800debc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800dec0:	2b2a      	cmp	r3, #42	; 0x2a
 800dec2:	d103      	bne.n	800decc <__ssvfiscanf_r+0xa0>
 800dec4:	2310      	movs	r3, #16
 800dec6:	f10a 0502 	add.w	r5, sl, #2
 800deca:	9341      	str	r3, [sp, #260]	; 0x104
 800decc:	46aa      	mov	sl, r5
 800dece:	f815 1b01 	ldrb.w	r1, [r5], #1
 800ded2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ded6:	2a09      	cmp	r2, #9
 800ded8:	d922      	bls.n	800df20 <__ssvfiscanf_r+0xf4>
 800deda:	2203      	movs	r2, #3
 800dedc:	4879      	ldr	r0, [pc, #484]	; (800e0c4 <__ssvfiscanf_r+0x298>)
 800dede:	f000 fcdb 	bl	800e898 <memchr>
 800dee2:	b138      	cbz	r0, 800def4 <__ssvfiscanf_r+0xc8>
 800dee4:	eba0 0309 	sub.w	r3, r0, r9
 800dee8:	2001      	movs	r0, #1
 800deea:	46aa      	mov	sl, r5
 800deec:	4098      	lsls	r0, r3
 800deee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800def0:	4318      	orrs	r0, r3
 800def2:	9041      	str	r0, [sp, #260]	; 0x104
 800def4:	f89a 3000 	ldrb.w	r3, [sl]
 800def8:	f10a 0501 	add.w	r5, sl, #1
 800defc:	2b67      	cmp	r3, #103	; 0x67
 800defe:	d82b      	bhi.n	800df58 <__ssvfiscanf_r+0x12c>
 800df00:	2b65      	cmp	r3, #101	; 0x65
 800df02:	f080 809f 	bcs.w	800e044 <__ssvfiscanf_r+0x218>
 800df06:	2b47      	cmp	r3, #71	; 0x47
 800df08:	d810      	bhi.n	800df2c <__ssvfiscanf_r+0x100>
 800df0a:	2b45      	cmp	r3, #69	; 0x45
 800df0c:	f080 809a 	bcs.w	800e044 <__ssvfiscanf_r+0x218>
 800df10:	2b00      	cmp	r3, #0
 800df12:	d06c      	beq.n	800dfee <__ssvfiscanf_r+0x1c2>
 800df14:	2b25      	cmp	r3, #37	; 0x25
 800df16:	d051      	beq.n	800dfbc <__ssvfiscanf_r+0x190>
 800df18:	2303      	movs	r3, #3
 800df1a:	9742      	str	r7, [sp, #264]	; 0x108
 800df1c:	9347      	str	r3, [sp, #284]	; 0x11c
 800df1e:	e027      	b.n	800df70 <__ssvfiscanf_r+0x144>
 800df20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800df22:	fb07 1303 	mla	r3, r7, r3, r1
 800df26:	3b30      	subs	r3, #48	; 0x30
 800df28:	9343      	str	r3, [sp, #268]	; 0x10c
 800df2a:	e7cf      	b.n	800decc <__ssvfiscanf_r+0xa0>
 800df2c:	2b5b      	cmp	r3, #91	; 0x5b
 800df2e:	d06a      	beq.n	800e006 <__ssvfiscanf_r+0x1da>
 800df30:	d80c      	bhi.n	800df4c <__ssvfiscanf_r+0x120>
 800df32:	2b58      	cmp	r3, #88	; 0x58
 800df34:	d1f0      	bne.n	800df18 <__ssvfiscanf_r+0xec>
 800df36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800df38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df3c:	9241      	str	r2, [sp, #260]	; 0x104
 800df3e:	2210      	movs	r2, #16
 800df40:	9242      	str	r2, [sp, #264]	; 0x108
 800df42:	2b6e      	cmp	r3, #110	; 0x6e
 800df44:	bf8c      	ite	hi
 800df46:	2304      	movhi	r3, #4
 800df48:	2303      	movls	r3, #3
 800df4a:	e010      	b.n	800df6e <__ssvfiscanf_r+0x142>
 800df4c:	2b63      	cmp	r3, #99	; 0x63
 800df4e:	d065      	beq.n	800e01c <__ssvfiscanf_r+0x1f0>
 800df50:	2b64      	cmp	r3, #100	; 0x64
 800df52:	d1e1      	bne.n	800df18 <__ssvfiscanf_r+0xec>
 800df54:	9742      	str	r7, [sp, #264]	; 0x108
 800df56:	e7f4      	b.n	800df42 <__ssvfiscanf_r+0x116>
 800df58:	2b70      	cmp	r3, #112	; 0x70
 800df5a:	d04b      	beq.n	800dff4 <__ssvfiscanf_r+0x1c8>
 800df5c:	d826      	bhi.n	800dfac <__ssvfiscanf_r+0x180>
 800df5e:	2b6e      	cmp	r3, #110	; 0x6e
 800df60:	d062      	beq.n	800e028 <__ssvfiscanf_r+0x1fc>
 800df62:	d84c      	bhi.n	800dffe <__ssvfiscanf_r+0x1d2>
 800df64:	2b69      	cmp	r3, #105	; 0x69
 800df66:	d1d7      	bne.n	800df18 <__ssvfiscanf_r+0xec>
 800df68:	2300      	movs	r3, #0
 800df6a:	9342      	str	r3, [sp, #264]	; 0x108
 800df6c:	2303      	movs	r3, #3
 800df6e:	9347      	str	r3, [sp, #284]	; 0x11c
 800df70:	6863      	ldr	r3, [r4, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	dd68      	ble.n	800e048 <__ssvfiscanf_r+0x21c>
 800df76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800df78:	0659      	lsls	r1, r3, #25
 800df7a:	d407      	bmi.n	800df8c <__ssvfiscanf_r+0x160>
 800df7c:	f7ff fb18 	bl	800d5b0 <__locale_ctype_ptr>
 800df80:	6823      	ldr	r3, [r4, #0]
 800df82:	781a      	ldrb	r2, [r3, #0]
 800df84:	4410      	add	r0, r2
 800df86:	7842      	ldrb	r2, [r0, #1]
 800df88:	0712      	lsls	r2, r2, #28
 800df8a:	d464      	bmi.n	800e056 <__ssvfiscanf_r+0x22a>
 800df8c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800df8e:	2b02      	cmp	r3, #2
 800df90:	dc73      	bgt.n	800e07a <__ssvfiscanf_r+0x24e>
 800df92:	466b      	mov	r3, sp
 800df94:	4622      	mov	r2, r4
 800df96:	a941      	add	r1, sp, #260	; 0x104
 800df98:	4630      	mov	r0, r6
 800df9a:	f000 fa1f 	bl	800e3dc <_scanf_chars>
 800df9e:	2801      	cmp	r0, #1
 800dfa0:	f000 8089 	beq.w	800e0b6 <__ssvfiscanf_r+0x28a>
 800dfa4:	2802      	cmp	r0, #2
 800dfa6:	f47f af71 	bne.w	800de8c <__ssvfiscanf_r+0x60>
 800dfaa:	e01d      	b.n	800dfe8 <__ssvfiscanf_r+0x1bc>
 800dfac:	2b75      	cmp	r3, #117	; 0x75
 800dfae:	d0d1      	beq.n	800df54 <__ssvfiscanf_r+0x128>
 800dfb0:	2b78      	cmp	r3, #120	; 0x78
 800dfb2:	d0c0      	beq.n	800df36 <__ssvfiscanf_r+0x10a>
 800dfb4:	2b73      	cmp	r3, #115	; 0x73
 800dfb6:	d1af      	bne.n	800df18 <__ssvfiscanf_r+0xec>
 800dfb8:	2302      	movs	r3, #2
 800dfba:	e7d8      	b.n	800df6e <__ssvfiscanf_r+0x142>
 800dfbc:	6863      	ldr	r3, [r4, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	dd0c      	ble.n	800dfdc <__ssvfiscanf_r+0x1b0>
 800dfc2:	6823      	ldr	r3, [r4, #0]
 800dfc4:	781a      	ldrb	r2, [r3, #0]
 800dfc6:	455a      	cmp	r2, fp
 800dfc8:	d175      	bne.n	800e0b6 <__ssvfiscanf_r+0x28a>
 800dfca:	3301      	adds	r3, #1
 800dfcc:	6862      	ldr	r2, [r4, #4]
 800dfce:	6023      	str	r3, [r4, #0]
 800dfd0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800dfd2:	3a01      	subs	r2, #1
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	6062      	str	r2, [r4, #4]
 800dfd8:	9345      	str	r3, [sp, #276]	; 0x114
 800dfda:	e757      	b.n	800de8c <__ssvfiscanf_r+0x60>
 800dfdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dfde:	4621      	mov	r1, r4
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	4798      	blx	r3
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d0ec      	beq.n	800dfc2 <__ssvfiscanf_r+0x196>
 800dfe8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800dfea:	2800      	cmp	r0, #0
 800dfec:	d159      	bne.n	800e0a2 <__ssvfiscanf_r+0x276>
 800dfee:	f04f 30ff 	mov.w	r0, #4294967295
 800dff2:	e05c      	b.n	800e0ae <__ssvfiscanf_r+0x282>
 800dff4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dff6:	f042 0220 	orr.w	r2, r2, #32
 800dffa:	9241      	str	r2, [sp, #260]	; 0x104
 800dffc:	e79b      	b.n	800df36 <__ssvfiscanf_r+0x10a>
 800dffe:	2308      	movs	r3, #8
 800e000:	9342      	str	r3, [sp, #264]	; 0x108
 800e002:	2304      	movs	r3, #4
 800e004:	e7b3      	b.n	800df6e <__ssvfiscanf_r+0x142>
 800e006:	4629      	mov	r1, r5
 800e008:	4640      	mov	r0, r8
 800e00a:	f000 fb4f 	bl	800e6ac <__sccl>
 800e00e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e010:	4605      	mov	r5, r0
 800e012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e016:	9341      	str	r3, [sp, #260]	; 0x104
 800e018:	2301      	movs	r3, #1
 800e01a:	e7a8      	b.n	800df6e <__ssvfiscanf_r+0x142>
 800e01c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e022:	9341      	str	r3, [sp, #260]	; 0x104
 800e024:	2300      	movs	r3, #0
 800e026:	e7a2      	b.n	800df6e <__ssvfiscanf_r+0x142>
 800e028:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e02a:	06c3      	lsls	r3, r0, #27
 800e02c:	f53f af2e 	bmi.w	800de8c <__ssvfiscanf_r+0x60>
 800e030:	9b00      	ldr	r3, [sp, #0]
 800e032:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e034:	1d19      	adds	r1, r3, #4
 800e036:	9100      	str	r1, [sp, #0]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	07c0      	lsls	r0, r0, #31
 800e03c:	bf4c      	ite	mi
 800e03e:	801a      	strhmi	r2, [r3, #0]
 800e040:	601a      	strpl	r2, [r3, #0]
 800e042:	e723      	b.n	800de8c <__ssvfiscanf_r+0x60>
 800e044:	2305      	movs	r3, #5
 800e046:	e792      	b.n	800df6e <__ssvfiscanf_r+0x142>
 800e048:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e04a:	4621      	mov	r1, r4
 800e04c:	4630      	mov	r0, r6
 800e04e:	4798      	blx	r3
 800e050:	2800      	cmp	r0, #0
 800e052:	d090      	beq.n	800df76 <__ssvfiscanf_r+0x14a>
 800e054:	e7c8      	b.n	800dfe8 <__ssvfiscanf_r+0x1bc>
 800e056:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e058:	3201      	adds	r2, #1
 800e05a:	9245      	str	r2, [sp, #276]	; 0x114
 800e05c:	6862      	ldr	r2, [r4, #4]
 800e05e:	3a01      	subs	r2, #1
 800e060:	2a00      	cmp	r2, #0
 800e062:	6062      	str	r2, [r4, #4]
 800e064:	dd02      	ble.n	800e06c <__ssvfiscanf_r+0x240>
 800e066:	3301      	adds	r3, #1
 800e068:	6023      	str	r3, [r4, #0]
 800e06a:	e787      	b.n	800df7c <__ssvfiscanf_r+0x150>
 800e06c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e06e:	4621      	mov	r1, r4
 800e070:	4630      	mov	r0, r6
 800e072:	4798      	blx	r3
 800e074:	2800      	cmp	r0, #0
 800e076:	d081      	beq.n	800df7c <__ssvfiscanf_r+0x150>
 800e078:	e7b6      	b.n	800dfe8 <__ssvfiscanf_r+0x1bc>
 800e07a:	2b04      	cmp	r3, #4
 800e07c:	dc06      	bgt.n	800e08c <__ssvfiscanf_r+0x260>
 800e07e:	466b      	mov	r3, sp
 800e080:	4622      	mov	r2, r4
 800e082:	a941      	add	r1, sp, #260	; 0x104
 800e084:	4630      	mov	r0, r6
 800e086:	f000 fa0b 	bl	800e4a0 <_scanf_i>
 800e08a:	e788      	b.n	800df9e <__ssvfiscanf_r+0x172>
 800e08c:	4b0e      	ldr	r3, [pc, #56]	; (800e0c8 <__ssvfiscanf_r+0x29c>)
 800e08e:	2b00      	cmp	r3, #0
 800e090:	f43f aefc 	beq.w	800de8c <__ssvfiscanf_r+0x60>
 800e094:	466b      	mov	r3, sp
 800e096:	4622      	mov	r2, r4
 800e098:	a941      	add	r1, sp, #260	; 0x104
 800e09a:	4630      	mov	r0, r6
 800e09c:	f3af 8000 	nop.w
 800e0a0:	e77d      	b.n	800df9e <__ssvfiscanf_r+0x172>
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e0a8:	bf18      	it	ne
 800e0aa:	f04f 30ff 	movne.w	r0, #4294967295
 800e0ae:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800e0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e0b8:	e7f9      	b.n	800e0ae <__ssvfiscanf_r+0x282>
 800e0ba:	bf00      	nop
 800e0bc:	0800dd79 	.word	0x0800dd79
 800e0c0:	0800ddf3 	.word	0x0800ddf3
 800e0c4:	0800f2a1 	.word	0x0800f2a1
 800e0c8:	00000000 	.word	0x00000000

0800e0cc <_printf_common>:
 800e0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d0:	4691      	mov	r9, r2
 800e0d2:	461f      	mov	r7, r3
 800e0d4:	688a      	ldr	r2, [r1, #8]
 800e0d6:	690b      	ldr	r3, [r1, #16]
 800e0d8:	4606      	mov	r6, r0
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	bfb8      	it	lt
 800e0de:	4613      	movlt	r3, r2
 800e0e0:	f8c9 3000 	str.w	r3, [r9]
 800e0e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0e8:	460c      	mov	r4, r1
 800e0ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0ee:	b112      	cbz	r2, 800e0f6 <_printf_common+0x2a>
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	f8c9 3000 	str.w	r3, [r9]
 800e0f6:	6823      	ldr	r3, [r4, #0]
 800e0f8:	0699      	lsls	r1, r3, #26
 800e0fa:	bf42      	ittt	mi
 800e0fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e100:	3302      	addmi	r3, #2
 800e102:	f8c9 3000 	strmi.w	r3, [r9]
 800e106:	6825      	ldr	r5, [r4, #0]
 800e108:	f015 0506 	ands.w	r5, r5, #6
 800e10c:	d107      	bne.n	800e11e <_printf_common+0x52>
 800e10e:	f104 0a19 	add.w	sl, r4, #25
 800e112:	68e3      	ldr	r3, [r4, #12]
 800e114:	f8d9 2000 	ldr.w	r2, [r9]
 800e118:	1a9b      	subs	r3, r3, r2
 800e11a:	42ab      	cmp	r3, r5
 800e11c:	dc29      	bgt.n	800e172 <_printf_common+0xa6>
 800e11e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e122:	6822      	ldr	r2, [r4, #0]
 800e124:	3300      	adds	r3, #0
 800e126:	bf18      	it	ne
 800e128:	2301      	movne	r3, #1
 800e12a:	0692      	lsls	r2, r2, #26
 800e12c:	d42e      	bmi.n	800e18c <_printf_common+0xc0>
 800e12e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e132:	4639      	mov	r1, r7
 800e134:	4630      	mov	r0, r6
 800e136:	47c0      	blx	r8
 800e138:	3001      	adds	r0, #1
 800e13a:	d021      	beq.n	800e180 <_printf_common+0xb4>
 800e13c:	6823      	ldr	r3, [r4, #0]
 800e13e:	68e5      	ldr	r5, [r4, #12]
 800e140:	f003 0306 	and.w	r3, r3, #6
 800e144:	2b04      	cmp	r3, #4
 800e146:	bf18      	it	ne
 800e148:	2500      	movne	r5, #0
 800e14a:	f8d9 2000 	ldr.w	r2, [r9]
 800e14e:	f04f 0900 	mov.w	r9, #0
 800e152:	bf08      	it	eq
 800e154:	1aad      	subeq	r5, r5, r2
 800e156:	68a3      	ldr	r3, [r4, #8]
 800e158:	6922      	ldr	r2, [r4, #16]
 800e15a:	bf08      	it	eq
 800e15c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e160:	4293      	cmp	r3, r2
 800e162:	bfc4      	itt	gt
 800e164:	1a9b      	subgt	r3, r3, r2
 800e166:	18ed      	addgt	r5, r5, r3
 800e168:	341a      	adds	r4, #26
 800e16a:	454d      	cmp	r5, r9
 800e16c:	d11a      	bne.n	800e1a4 <_printf_common+0xd8>
 800e16e:	2000      	movs	r0, #0
 800e170:	e008      	b.n	800e184 <_printf_common+0xb8>
 800e172:	2301      	movs	r3, #1
 800e174:	4652      	mov	r2, sl
 800e176:	4639      	mov	r1, r7
 800e178:	4630      	mov	r0, r6
 800e17a:	47c0      	blx	r8
 800e17c:	3001      	adds	r0, #1
 800e17e:	d103      	bne.n	800e188 <_printf_common+0xbc>
 800e180:	f04f 30ff 	mov.w	r0, #4294967295
 800e184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e188:	3501      	adds	r5, #1
 800e18a:	e7c2      	b.n	800e112 <_printf_common+0x46>
 800e18c:	2030      	movs	r0, #48	; 0x30
 800e18e:	18e1      	adds	r1, r4, r3
 800e190:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e194:	1c5a      	adds	r2, r3, #1
 800e196:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e19a:	4422      	add	r2, r4
 800e19c:	3302      	adds	r3, #2
 800e19e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1a2:	e7c4      	b.n	800e12e <_printf_common+0x62>
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	4622      	mov	r2, r4
 800e1a8:	4639      	mov	r1, r7
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	47c0      	blx	r8
 800e1ae:	3001      	adds	r0, #1
 800e1b0:	d0e6      	beq.n	800e180 <_printf_common+0xb4>
 800e1b2:	f109 0901 	add.w	r9, r9, #1
 800e1b6:	e7d8      	b.n	800e16a <_printf_common+0x9e>

0800e1b8 <_printf_i>:
 800e1b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e1c0:	460c      	mov	r4, r1
 800e1c2:	7e09      	ldrb	r1, [r1, #24]
 800e1c4:	b085      	sub	sp, #20
 800e1c6:	296e      	cmp	r1, #110	; 0x6e
 800e1c8:	4617      	mov	r7, r2
 800e1ca:	4606      	mov	r6, r0
 800e1cc:	4698      	mov	r8, r3
 800e1ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1d0:	f000 80b3 	beq.w	800e33a <_printf_i+0x182>
 800e1d4:	d822      	bhi.n	800e21c <_printf_i+0x64>
 800e1d6:	2963      	cmp	r1, #99	; 0x63
 800e1d8:	d036      	beq.n	800e248 <_printf_i+0x90>
 800e1da:	d80a      	bhi.n	800e1f2 <_printf_i+0x3a>
 800e1dc:	2900      	cmp	r1, #0
 800e1de:	f000 80b9 	beq.w	800e354 <_printf_i+0x19c>
 800e1e2:	2958      	cmp	r1, #88	; 0x58
 800e1e4:	f000 8083 	beq.w	800e2ee <_printf_i+0x136>
 800e1e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e1f0:	e032      	b.n	800e258 <_printf_i+0xa0>
 800e1f2:	2964      	cmp	r1, #100	; 0x64
 800e1f4:	d001      	beq.n	800e1fa <_printf_i+0x42>
 800e1f6:	2969      	cmp	r1, #105	; 0x69
 800e1f8:	d1f6      	bne.n	800e1e8 <_printf_i+0x30>
 800e1fa:	6820      	ldr	r0, [r4, #0]
 800e1fc:	6813      	ldr	r3, [r2, #0]
 800e1fe:	0605      	lsls	r5, r0, #24
 800e200:	f103 0104 	add.w	r1, r3, #4
 800e204:	d52a      	bpl.n	800e25c <_printf_i+0xa4>
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6011      	str	r1, [r2, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	da03      	bge.n	800e216 <_printf_i+0x5e>
 800e20e:	222d      	movs	r2, #45	; 0x2d
 800e210:	425b      	negs	r3, r3
 800e212:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e216:	486f      	ldr	r0, [pc, #444]	; (800e3d4 <_printf_i+0x21c>)
 800e218:	220a      	movs	r2, #10
 800e21a:	e039      	b.n	800e290 <_printf_i+0xd8>
 800e21c:	2973      	cmp	r1, #115	; 0x73
 800e21e:	f000 809d 	beq.w	800e35c <_printf_i+0x1a4>
 800e222:	d808      	bhi.n	800e236 <_printf_i+0x7e>
 800e224:	296f      	cmp	r1, #111	; 0x6f
 800e226:	d020      	beq.n	800e26a <_printf_i+0xb2>
 800e228:	2970      	cmp	r1, #112	; 0x70
 800e22a:	d1dd      	bne.n	800e1e8 <_printf_i+0x30>
 800e22c:	6823      	ldr	r3, [r4, #0]
 800e22e:	f043 0320 	orr.w	r3, r3, #32
 800e232:	6023      	str	r3, [r4, #0]
 800e234:	e003      	b.n	800e23e <_printf_i+0x86>
 800e236:	2975      	cmp	r1, #117	; 0x75
 800e238:	d017      	beq.n	800e26a <_printf_i+0xb2>
 800e23a:	2978      	cmp	r1, #120	; 0x78
 800e23c:	d1d4      	bne.n	800e1e8 <_printf_i+0x30>
 800e23e:	2378      	movs	r3, #120	; 0x78
 800e240:	4865      	ldr	r0, [pc, #404]	; (800e3d8 <_printf_i+0x220>)
 800e242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e246:	e055      	b.n	800e2f4 <_printf_i+0x13c>
 800e248:	6813      	ldr	r3, [r2, #0]
 800e24a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e24e:	1d19      	adds	r1, r3, #4
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	6011      	str	r1, [r2, #0]
 800e254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e258:	2301      	movs	r3, #1
 800e25a:	e08c      	b.n	800e376 <_printf_i+0x1be>
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e262:	6011      	str	r1, [r2, #0]
 800e264:	bf18      	it	ne
 800e266:	b21b      	sxthne	r3, r3
 800e268:	e7cf      	b.n	800e20a <_printf_i+0x52>
 800e26a:	6813      	ldr	r3, [r2, #0]
 800e26c:	6825      	ldr	r5, [r4, #0]
 800e26e:	1d18      	adds	r0, r3, #4
 800e270:	6010      	str	r0, [r2, #0]
 800e272:	0628      	lsls	r0, r5, #24
 800e274:	d501      	bpl.n	800e27a <_printf_i+0xc2>
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	e002      	b.n	800e280 <_printf_i+0xc8>
 800e27a:	0668      	lsls	r0, r5, #25
 800e27c:	d5fb      	bpl.n	800e276 <_printf_i+0xbe>
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	296f      	cmp	r1, #111	; 0x6f
 800e282:	bf14      	ite	ne
 800e284:	220a      	movne	r2, #10
 800e286:	2208      	moveq	r2, #8
 800e288:	4852      	ldr	r0, [pc, #328]	; (800e3d4 <_printf_i+0x21c>)
 800e28a:	2100      	movs	r1, #0
 800e28c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e290:	6865      	ldr	r5, [r4, #4]
 800e292:	2d00      	cmp	r5, #0
 800e294:	60a5      	str	r5, [r4, #8]
 800e296:	f2c0 8095 	blt.w	800e3c4 <_printf_i+0x20c>
 800e29a:	6821      	ldr	r1, [r4, #0]
 800e29c:	f021 0104 	bic.w	r1, r1, #4
 800e2a0:	6021      	str	r1, [r4, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d13d      	bne.n	800e322 <_printf_i+0x16a>
 800e2a6:	2d00      	cmp	r5, #0
 800e2a8:	f040 808e 	bne.w	800e3c8 <_printf_i+0x210>
 800e2ac:	4665      	mov	r5, ip
 800e2ae:	2a08      	cmp	r2, #8
 800e2b0:	d10b      	bne.n	800e2ca <_printf_i+0x112>
 800e2b2:	6823      	ldr	r3, [r4, #0]
 800e2b4:	07db      	lsls	r3, r3, #31
 800e2b6:	d508      	bpl.n	800e2ca <_printf_i+0x112>
 800e2b8:	6923      	ldr	r3, [r4, #16]
 800e2ba:	6862      	ldr	r2, [r4, #4]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	bfde      	ittt	le
 800e2c0:	2330      	movle	r3, #48	; 0x30
 800e2c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e2c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e2ca:	ebac 0305 	sub.w	r3, ip, r5
 800e2ce:	6123      	str	r3, [r4, #16]
 800e2d0:	f8cd 8000 	str.w	r8, [sp]
 800e2d4:	463b      	mov	r3, r7
 800e2d6:	aa03      	add	r2, sp, #12
 800e2d8:	4621      	mov	r1, r4
 800e2da:	4630      	mov	r0, r6
 800e2dc:	f7ff fef6 	bl	800e0cc <_printf_common>
 800e2e0:	3001      	adds	r0, #1
 800e2e2:	d14d      	bne.n	800e380 <_printf_i+0x1c8>
 800e2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e8:	b005      	add	sp, #20
 800e2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2ee:	4839      	ldr	r0, [pc, #228]	; (800e3d4 <_printf_i+0x21c>)
 800e2f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e2f4:	6813      	ldr	r3, [r2, #0]
 800e2f6:	6821      	ldr	r1, [r4, #0]
 800e2f8:	1d1d      	adds	r5, r3, #4
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	6015      	str	r5, [r2, #0]
 800e2fe:	060a      	lsls	r2, r1, #24
 800e300:	d50b      	bpl.n	800e31a <_printf_i+0x162>
 800e302:	07ca      	lsls	r2, r1, #31
 800e304:	bf44      	itt	mi
 800e306:	f041 0120 	orrmi.w	r1, r1, #32
 800e30a:	6021      	strmi	r1, [r4, #0]
 800e30c:	b91b      	cbnz	r3, 800e316 <_printf_i+0x15e>
 800e30e:	6822      	ldr	r2, [r4, #0]
 800e310:	f022 0220 	bic.w	r2, r2, #32
 800e314:	6022      	str	r2, [r4, #0]
 800e316:	2210      	movs	r2, #16
 800e318:	e7b7      	b.n	800e28a <_printf_i+0xd2>
 800e31a:	064d      	lsls	r5, r1, #25
 800e31c:	bf48      	it	mi
 800e31e:	b29b      	uxthmi	r3, r3
 800e320:	e7ef      	b.n	800e302 <_printf_i+0x14a>
 800e322:	4665      	mov	r5, ip
 800e324:	fbb3 f1f2 	udiv	r1, r3, r2
 800e328:	fb02 3311 	mls	r3, r2, r1, r3
 800e32c:	5cc3      	ldrb	r3, [r0, r3]
 800e32e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e332:	460b      	mov	r3, r1
 800e334:	2900      	cmp	r1, #0
 800e336:	d1f5      	bne.n	800e324 <_printf_i+0x16c>
 800e338:	e7b9      	b.n	800e2ae <_printf_i+0xf6>
 800e33a:	6813      	ldr	r3, [r2, #0]
 800e33c:	6825      	ldr	r5, [r4, #0]
 800e33e:	1d18      	adds	r0, r3, #4
 800e340:	6961      	ldr	r1, [r4, #20]
 800e342:	6010      	str	r0, [r2, #0]
 800e344:	0628      	lsls	r0, r5, #24
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	d501      	bpl.n	800e34e <_printf_i+0x196>
 800e34a:	6019      	str	r1, [r3, #0]
 800e34c:	e002      	b.n	800e354 <_printf_i+0x19c>
 800e34e:	066a      	lsls	r2, r5, #25
 800e350:	d5fb      	bpl.n	800e34a <_printf_i+0x192>
 800e352:	8019      	strh	r1, [r3, #0]
 800e354:	2300      	movs	r3, #0
 800e356:	4665      	mov	r5, ip
 800e358:	6123      	str	r3, [r4, #16]
 800e35a:	e7b9      	b.n	800e2d0 <_printf_i+0x118>
 800e35c:	6813      	ldr	r3, [r2, #0]
 800e35e:	1d19      	adds	r1, r3, #4
 800e360:	6011      	str	r1, [r2, #0]
 800e362:	681d      	ldr	r5, [r3, #0]
 800e364:	6862      	ldr	r2, [r4, #4]
 800e366:	2100      	movs	r1, #0
 800e368:	4628      	mov	r0, r5
 800e36a:	f000 fa95 	bl	800e898 <memchr>
 800e36e:	b108      	cbz	r0, 800e374 <_printf_i+0x1bc>
 800e370:	1b40      	subs	r0, r0, r5
 800e372:	6060      	str	r0, [r4, #4]
 800e374:	6863      	ldr	r3, [r4, #4]
 800e376:	6123      	str	r3, [r4, #16]
 800e378:	2300      	movs	r3, #0
 800e37a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e37e:	e7a7      	b.n	800e2d0 <_printf_i+0x118>
 800e380:	6923      	ldr	r3, [r4, #16]
 800e382:	462a      	mov	r2, r5
 800e384:	4639      	mov	r1, r7
 800e386:	4630      	mov	r0, r6
 800e388:	47c0      	blx	r8
 800e38a:	3001      	adds	r0, #1
 800e38c:	d0aa      	beq.n	800e2e4 <_printf_i+0x12c>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	079b      	lsls	r3, r3, #30
 800e392:	d413      	bmi.n	800e3bc <_printf_i+0x204>
 800e394:	68e0      	ldr	r0, [r4, #12]
 800e396:	9b03      	ldr	r3, [sp, #12]
 800e398:	4298      	cmp	r0, r3
 800e39a:	bfb8      	it	lt
 800e39c:	4618      	movlt	r0, r3
 800e39e:	e7a3      	b.n	800e2e8 <_printf_i+0x130>
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	464a      	mov	r2, r9
 800e3a4:	4639      	mov	r1, r7
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	47c0      	blx	r8
 800e3aa:	3001      	adds	r0, #1
 800e3ac:	d09a      	beq.n	800e2e4 <_printf_i+0x12c>
 800e3ae:	3501      	adds	r5, #1
 800e3b0:	68e3      	ldr	r3, [r4, #12]
 800e3b2:	9a03      	ldr	r2, [sp, #12]
 800e3b4:	1a9b      	subs	r3, r3, r2
 800e3b6:	42ab      	cmp	r3, r5
 800e3b8:	dcf2      	bgt.n	800e3a0 <_printf_i+0x1e8>
 800e3ba:	e7eb      	b.n	800e394 <_printf_i+0x1dc>
 800e3bc:	2500      	movs	r5, #0
 800e3be:	f104 0919 	add.w	r9, r4, #25
 800e3c2:	e7f5      	b.n	800e3b0 <_printf_i+0x1f8>
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1ac      	bne.n	800e322 <_printf_i+0x16a>
 800e3c8:	7803      	ldrb	r3, [r0, #0]
 800e3ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e3d2:	e76c      	b.n	800e2ae <_printf_i+0xf6>
 800e3d4:	0800f2ac 	.word	0x0800f2ac
 800e3d8:	0800f2bd 	.word	0x0800f2bd

0800e3dc <_scanf_chars>:
 800e3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e0:	4615      	mov	r5, r2
 800e3e2:	688a      	ldr	r2, [r1, #8]
 800e3e4:	4680      	mov	r8, r0
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	b932      	cbnz	r2, 800e3f8 <_scanf_chars+0x1c>
 800e3ea:	698a      	ldr	r2, [r1, #24]
 800e3ec:	2a00      	cmp	r2, #0
 800e3ee:	bf14      	ite	ne
 800e3f0:	f04f 32ff 	movne.w	r2, #4294967295
 800e3f4:	2201      	moveq	r2, #1
 800e3f6:	608a      	str	r2, [r1, #8]
 800e3f8:	2600      	movs	r6, #0
 800e3fa:	6822      	ldr	r2, [r4, #0]
 800e3fc:	06d1      	lsls	r1, r2, #27
 800e3fe:	bf5f      	itttt	pl
 800e400:	681a      	ldrpl	r2, [r3, #0]
 800e402:	1d11      	addpl	r1, r2, #4
 800e404:	6019      	strpl	r1, [r3, #0]
 800e406:	6817      	ldrpl	r7, [r2, #0]
 800e408:	69a3      	ldr	r3, [r4, #24]
 800e40a:	b1db      	cbz	r3, 800e444 <_scanf_chars+0x68>
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d107      	bne.n	800e420 <_scanf_chars+0x44>
 800e410:	682b      	ldr	r3, [r5, #0]
 800e412:	6962      	ldr	r2, [r4, #20]
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	5cd3      	ldrb	r3, [r2, r3]
 800e418:	b9a3      	cbnz	r3, 800e444 <_scanf_chars+0x68>
 800e41a:	2e00      	cmp	r6, #0
 800e41c:	d131      	bne.n	800e482 <_scanf_chars+0xa6>
 800e41e:	e006      	b.n	800e42e <_scanf_chars+0x52>
 800e420:	2b02      	cmp	r3, #2
 800e422:	d007      	beq.n	800e434 <_scanf_chars+0x58>
 800e424:	2e00      	cmp	r6, #0
 800e426:	d12c      	bne.n	800e482 <_scanf_chars+0xa6>
 800e428:	69a3      	ldr	r3, [r4, #24]
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d129      	bne.n	800e482 <_scanf_chars+0xa6>
 800e42e:	2001      	movs	r0, #1
 800e430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e434:	f7ff f8bc 	bl	800d5b0 <__locale_ctype_ptr>
 800e438:	682b      	ldr	r3, [r5, #0]
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	4418      	add	r0, r3
 800e43e:	7843      	ldrb	r3, [r0, #1]
 800e440:	071b      	lsls	r3, r3, #28
 800e442:	d4ef      	bmi.n	800e424 <_scanf_chars+0x48>
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	3601      	adds	r6, #1
 800e448:	06da      	lsls	r2, r3, #27
 800e44a:	bf5e      	ittt	pl
 800e44c:	682b      	ldrpl	r3, [r5, #0]
 800e44e:	781b      	ldrbpl	r3, [r3, #0]
 800e450:	703b      	strbpl	r3, [r7, #0]
 800e452:	682a      	ldr	r2, [r5, #0]
 800e454:	686b      	ldr	r3, [r5, #4]
 800e456:	f102 0201 	add.w	r2, r2, #1
 800e45a:	602a      	str	r2, [r5, #0]
 800e45c:	68a2      	ldr	r2, [r4, #8]
 800e45e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e462:	f102 32ff 	add.w	r2, r2, #4294967295
 800e466:	606b      	str	r3, [r5, #4]
 800e468:	bf58      	it	pl
 800e46a:	3701      	addpl	r7, #1
 800e46c:	60a2      	str	r2, [r4, #8]
 800e46e:	b142      	cbz	r2, 800e482 <_scanf_chars+0xa6>
 800e470:	2b00      	cmp	r3, #0
 800e472:	dcc9      	bgt.n	800e408 <_scanf_chars+0x2c>
 800e474:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e478:	4629      	mov	r1, r5
 800e47a:	4640      	mov	r0, r8
 800e47c:	4798      	blx	r3
 800e47e:	2800      	cmp	r0, #0
 800e480:	d0c2      	beq.n	800e408 <_scanf_chars+0x2c>
 800e482:	6823      	ldr	r3, [r4, #0]
 800e484:	f013 0310 	ands.w	r3, r3, #16
 800e488:	d105      	bne.n	800e496 <_scanf_chars+0xba>
 800e48a:	68e2      	ldr	r2, [r4, #12]
 800e48c:	3201      	adds	r2, #1
 800e48e:	60e2      	str	r2, [r4, #12]
 800e490:	69a2      	ldr	r2, [r4, #24]
 800e492:	b102      	cbz	r2, 800e496 <_scanf_chars+0xba>
 800e494:	703b      	strb	r3, [r7, #0]
 800e496:	6923      	ldr	r3, [r4, #16]
 800e498:	2000      	movs	r0, #0
 800e49a:	441e      	add	r6, r3
 800e49c:	6126      	str	r6, [r4, #16]
 800e49e:	e7c7      	b.n	800e430 <_scanf_chars+0x54>

0800e4a0 <_scanf_i>:
 800e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	460c      	mov	r4, r1
 800e4a6:	469a      	mov	sl, r3
 800e4a8:	4b74      	ldr	r3, [pc, #464]	; (800e67c <_scanf_i+0x1dc>)
 800e4aa:	b087      	sub	sp, #28
 800e4ac:	4683      	mov	fp, r0
 800e4ae:	4616      	mov	r6, r2
 800e4b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e4b4:	ab03      	add	r3, sp, #12
 800e4b6:	68a7      	ldr	r7, [r4, #8]
 800e4b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e4bc:	4b70      	ldr	r3, [pc, #448]	; (800e680 <_scanf_i+0x1e0>)
 800e4be:	69a1      	ldr	r1, [r4, #24]
 800e4c0:	4a70      	ldr	r2, [pc, #448]	; (800e684 <_scanf_i+0x1e4>)
 800e4c2:	f104 091c 	add.w	r9, r4, #28
 800e4c6:	2903      	cmp	r1, #3
 800e4c8:	bf08      	it	eq
 800e4ca:	461a      	moveq	r2, r3
 800e4cc:	1e7b      	subs	r3, r7, #1
 800e4ce:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800e4d2:	bf84      	itt	hi
 800e4d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e4d8:	60a3      	strhi	r3, [r4, #8]
 800e4da:	6823      	ldr	r3, [r4, #0]
 800e4dc:	bf88      	it	hi
 800e4de:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e4e2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e4e6:	6023      	str	r3, [r4, #0]
 800e4e8:	bf98      	it	ls
 800e4ea:	2700      	movls	r7, #0
 800e4ec:	464b      	mov	r3, r9
 800e4ee:	f04f 0800 	mov.w	r8, #0
 800e4f2:	9200      	str	r2, [sp, #0]
 800e4f4:	bf88      	it	hi
 800e4f6:	197f      	addhi	r7, r7, r5
 800e4f8:	6831      	ldr	r1, [r6, #0]
 800e4fa:	9301      	str	r3, [sp, #4]
 800e4fc:	ab03      	add	r3, sp, #12
 800e4fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e502:	2202      	movs	r2, #2
 800e504:	7809      	ldrb	r1, [r1, #0]
 800e506:	f000 f9c7 	bl	800e898 <memchr>
 800e50a:	9b01      	ldr	r3, [sp, #4]
 800e50c:	b330      	cbz	r0, 800e55c <_scanf_i+0xbc>
 800e50e:	f1b8 0f01 	cmp.w	r8, #1
 800e512:	d15a      	bne.n	800e5ca <_scanf_i+0x12a>
 800e514:	6862      	ldr	r2, [r4, #4]
 800e516:	b92a      	cbnz	r2, 800e524 <_scanf_i+0x84>
 800e518:	2108      	movs	r1, #8
 800e51a:	6822      	ldr	r2, [r4, #0]
 800e51c:	6061      	str	r1, [r4, #4]
 800e51e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e522:	6022      	str	r2, [r4, #0]
 800e524:	6822      	ldr	r2, [r4, #0]
 800e526:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e52a:	6022      	str	r2, [r4, #0]
 800e52c:	68a2      	ldr	r2, [r4, #8]
 800e52e:	1e51      	subs	r1, r2, #1
 800e530:	60a1      	str	r1, [r4, #8]
 800e532:	b19a      	cbz	r2, 800e55c <_scanf_i+0xbc>
 800e534:	6832      	ldr	r2, [r6, #0]
 800e536:	1c5d      	adds	r5, r3, #1
 800e538:	1c51      	adds	r1, r2, #1
 800e53a:	6031      	str	r1, [r6, #0]
 800e53c:	7812      	ldrb	r2, [r2, #0]
 800e53e:	701a      	strb	r2, [r3, #0]
 800e540:	6873      	ldr	r3, [r6, #4]
 800e542:	3b01      	subs	r3, #1
 800e544:	2b00      	cmp	r3, #0
 800e546:	6073      	str	r3, [r6, #4]
 800e548:	dc07      	bgt.n	800e55a <_scanf_i+0xba>
 800e54a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e54e:	4631      	mov	r1, r6
 800e550:	4658      	mov	r0, fp
 800e552:	4798      	blx	r3
 800e554:	2800      	cmp	r0, #0
 800e556:	f040 8087 	bne.w	800e668 <_scanf_i+0x1c8>
 800e55a:	462b      	mov	r3, r5
 800e55c:	f108 0801 	add.w	r8, r8, #1
 800e560:	f1b8 0f03 	cmp.w	r8, #3
 800e564:	d1c8      	bne.n	800e4f8 <_scanf_i+0x58>
 800e566:	6862      	ldr	r2, [r4, #4]
 800e568:	b90a      	cbnz	r2, 800e56e <_scanf_i+0xce>
 800e56a:	220a      	movs	r2, #10
 800e56c:	6062      	str	r2, [r4, #4]
 800e56e:	6862      	ldr	r2, [r4, #4]
 800e570:	4945      	ldr	r1, [pc, #276]	; (800e688 <_scanf_i+0x1e8>)
 800e572:	6960      	ldr	r0, [r4, #20]
 800e574:	1a89      	subs	r1, r1, r2
 800e576:	9301      	str	r3, [sp, #4]
 800e578:	f000 f898 	bl	800e6ac <__sccl>
 800e57c:	9b01      	ldr	r3, [sp, #4]
 800e57e:	f04f 0800 	mov.w	r8, #0
 800e582:	461d      	mov	r5, r3
 800e584:	68a3      	ldr	r3, [r4, #8]
 800e586:	6822      	ldr	r2, [r4, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d03b      	beq.n	800e604 <_scanf_i+0x164>
 800e58c:	6831      	ldr	r1, [r6, #0]
 800e58e:	6960      	ldr	r0, [r4, #20]
 800e590:	f891 c000 	ldrb.w	ip, [r1]
 800e594:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e598:	2800      	cmp	r0, #0
 800e59a:	d033      	beq.n	800e604 <_scanf_i+0x164>
 800e59c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e5a0:	d121      	bne.n	800e5e6 <_scanf_i+0x146>
 800e5a2:	0510      	lsls	r0, r2, #20
 800e5a4:	d51f      	bpl.n	800e5e6 <_scanf_i+0x146>
 800e5a6:	f108 0801 	add.w	r8, r8, #1
 800e5aa:	b117      	cbz	r7, 800e5b2 <_scanf_i+0x112>
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	3f01      	subs	r7, #1
 800e5b0:	60a3      	str	r3, [r4, #8]
 800e5b2:	6873      	ldr	r3, [r6, #4]
 800e5b4:	3b01      	subs	r3, #1
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	6073      	str	r3, [r6, #4]
 800e5ba:	dd1c      	ble.n	800e5f6 <_scanf_i+0x156>
 800e5bc:	6833      	ldr	r3, [r6, #0]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	6033      	str	r3, [r6, #0]
 800e5c2:	68a3      	ldr	r3, [r4, #8]
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	60a3      	str	r3, [r4, #8]
 800e5c8:	e7dc      	b.n	800e584 <_scanf_i+0xe4>
 800e5ca:	f1b8 0f02 	cmp.w	r8, #2
 800e5ce:	d1ad      	bne.n	800e52c <_scanf_i+0x8c>
 800e5d0:	6822      	ldr	r2, [r4, #0]
 800e5d2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e5d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e5da:	d1bf      	bne.n	800e55c <_scanf_i+0xbc>
 800e5dc:	2110      	movs	r1, #16
 800e5de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e5e2:	6061      	str	r1, [r4, #4]
 800e5e4:	e7a1      	b.n	800e52a <_scanf_i+0x8a>
 800e5e6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e5ea:	6022      	str	r2, [r4, #0]
 800e5ec:	780b      	ldrb	r3, [r1, #0]
 800e5ee:	3501      	adds	r5, #1
 800e5f0:	f805 3c01 	strb.w	r3, [r5, #-1]
 800e5f4:	e7dd      	b.n	800e5b2 <_scanf_i+0x112>
 800e5f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e5fa:	4631      	mov	r1, r6
 800e5fc:	4658      	mov	r0, fp
 800e5fe:	4798      	blx	r3
 800e600:	2800      	cmp	r0, #0
 800e602:	d0de      	beq.n	800e5c2 <_scanf_i+0x122>
 800e604:	6823      	ldr	r3, [r4, #0]
 800e606:	05d9      	lsls	r1, r3, #23
 800e608:	d50c      	bpl.n	800e624 <_scanf_i+0x184>
 800e60a:	454d      	cmp	r5, r9
 800e60c:	d908      	bls.n	800e620 <_scanf_i+0x180>
 800e60e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e612:	1e6f      	subs	r7, r5, #1
 800e614:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e618:	4632      	mov	r2, r6
 800e61a:	4658      	mov	r0, fp
 800e61c:	4798      	blx	r3
 800e61e:	463d      	mov	r5, r7
 800e620:	454d      	cmp	r5, r9
 800e622:	d029      	beq.n	800e678 <_scanf_i+0x1d8>
 800e624:	6822      	ldr	r2, [r4, #0]
 800e626:	f012 0210 	ands.w	r2, r2, #16
 800e62a:	d113      	bne.n	800e654 <_scanf_i+0x1b4>
 800e62c:	702a      	strb	r2, [r5, #0]
 800e62e:	6863      	ldr	r3, [r4, #4]
 800e630:	4649      	mov	r1, r9
 800e632:	4658      	mov	r0, fp
 800e634:	9e00      	ldr	r6, [sp, #0]
 800e636:	47b0      	blx	r6
 800e638:	f8da 3000 	ldr.w	r3, [sl]
 800e63c:	6821      	ldr	r1, [r4, #0]
 800e63e:	1d1a      	adds	r2, r3, #4
 800e640:	f8ca 2000 	str.w	r2, [sl]
 800e644:	f011 0f20 	tst.w	r1, #32
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	d010      	beq.n	800e66e <_scanf_i+0x1ce>
 800e64c:	6018      	str	r0, [r3, #0]
 800e64e:	68e3      	ldr	r3, [r4, #12]
 800e650:	3301      	adds	r3, #1
 800e652:	60e3      	str	r3, [r4, #12]
 800e654:	2000      	movs	r0, #0
 800e656:	eba5 0509 	sub.w	r5, r5, r9
 800e65a:	44a8      	add	r8, r5
 800e65c:	6925      	ldr	r5, [r4, #16]
 800e65e:	4445      	add	r5, r8
 800e660:	6125      	str	r5, [r4, #16]
 800e662:	b007      	add	sp, #28
 800e664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e668:	f04f 0800 	mov.w	r8, #0
 800e66c:	e7ca      	b.n	800e604 <_scanf_i+0x164>
 800e66e:	07ca      	lsls	r2, r1, #31
 800e670:	bf4c      	ite	mi
 800e672:	8018      	strhmi	r0, [r3, #0]
 800e674:	6018      	strpl	r0, [r3, #0]
 800e676:	e7ea      	b.n	800e64e <_scanf_i+0x1ae>
 800e678:	2001      	movs	r0, #1
 800e67a:	e7f2      	b.n	800e662 <_scanf_i+0x1c2>
 800e67c:	0800f124 	.word	0x0800f124
 800e680:	0800e805 	.word	0x0800e805
 800e684:	0800d90d 	.word	0x0800d90d
 800e688:	0800f2de 	.word	0x0800f2de

0800e68c <_sbrk_r>:
 800e68c:	b538      	push	{r3, r4, r5, lr}
 800e68e:	2300      	movs	r3, #0
 800e690:	4c05      	ldr	r4, [pc, #20]	; (800e6a8 <_sbrk_r+0x1c>)
 800e692:	4605      	mov	r5, r0
 800e694:	4608      	mov	r0, r1
 800e696:	6023      	str	r3, [r4, #0]
 800e698:	f7f2 f99c 	bl	80009d4 <_sbrk>
 800e69c:	1c43      	adds	r3, r0, #1
 800e69e:	d102      	bne.n	800e6a6 <_sbrk_r+0x1a>
 800e6a0:	6823      	ldr	r3, [r4, #0]
 800e6a2:	b103      	cbz	r3, 800e6a6 <_sbrk_r+0x1a>
 800e6a4:	602b      	str	r3, [r5, #0]
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	200040b0 	.word	0x200040b0

0800e6ac <__sccl>:
 800e6ac:	b570      	push	{r4, r5, r6, lr}
 800e6ae:	780b      	ldrb	r3, [r1, #0]
 800e6b0:	1e44      	subs	r4, r0, #1
 800e6b2:	2b5e      	cmp	r3, #94	; 0x5e
 800e6b4:	bf13      	iteet	ne
 800e6b6:	1c4a      	addne	r2, r1, #1
 800e6b8:	1c8a      	addeq	r2, r1, #2
 800e6ba:	784b      	ldrbeq	r3, [r1, #1]
 800e6bc:	2100      	movne	r1, #0
 800e6be:	bf08      	it	eq
 800e6c0:	2101      	moveq	r1, #1
 800e6c2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800e6c6:	f804 1f01 	strb.w	r1, [r4, #1]!
 800e6ca:	42ac      	cmp	r4, r5
 800e6cc:	d1fb      	bne.n	800e6c6 <__sccl+0x1a>
 800e6ce:	b913      	cbnz	r3, 800e6d6 <__sccl+0x2a>
 800e6d0:	3a01      	subs	r2, #1
 800e6d2:	4610      	mov	r0, r2
 800e6d4:	bd70      	pop	{r4, r5, r6, pc}
 800e6d6:	f081 0401 	eor.w	r4, r1, #1
 800e6da:	54c4      	strb	r4, [r0, r3]
 800e6dc:	1c51      	adds	r1, r2, #1
 800e6de:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800e6e2:	1e4e      	subs	r6, r1, #1
 800e6e4:	2d2d      	cmp	r5, #45	; 0x2d
 800e6e6:	460a      	mov	r2, r1
 800e6e8:	d006      	beq.n	800e6f8 <__sccl+0x4c>
 800e6ea:	2d5d      	cmp	r5, #93	; 0x5d
 800e6ec:	d0f1      	beq.n	800e6d2 <__sccl+0x26>
 800e6ee:	b90d      	cbnz	r5, 800e6f4 <__sccl+0x48>
 800e6f0:	4632      	mov	r2, r6
 800e6f2:	e7ee      	b.n	800e6d2 <__sccl+0x26>
 800e6f4:	462b      	mov	r3, r5
 800e6f6:	e7f0      	b.n	800e6da <__sccl+0x2e>
 800e6f8:	780e      	ldrb	r6, [r1, #0]
 800e6fa:	2e5d      	cmp	r6, #93	; 0x5d
 800e6fc:	d0fa      	beq.n	800e6f4 <__sccl+0x48>
 800e6fe:	42b3      	cmp	r3, r6
 800e700:	dcf8      	bgt.n	800e6f4 <__sccl+0x48>
 800e702:	3301      	adds	r3, #1
 800e704:	429e      	cmp	r6, r3
 800e706:	54c4      	strb	r4, [r0, r3]
 800e708:	dcfb      	bgt.n	800e702 <__sccl+0x56>
 800e70a:	3102      	adds	r1, #2
 800e70c:	e7e7      	b.n	800e6de <__sccl+0x32>

0800e70e <_strtol_l.isra.0>:
 800e70e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e712:	4680      	mov	r8, r0
 800e714:	4689      	mov	r9, r1
 800e716:	4692      	mov	sl, r2
 800e718:	461e      	mov	r6, r3
 800e71a:	460f      	mov	r7, r1
 800e71c:	463d      	mov	r5, r7
 800e71e:	9808      	ldr	r0, [sp, #32]
 800e720:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e724:	f7fe ff40 	bl	800d5a8 <__locale_ctype_ptr_l>
 800e728:	4420      	add	r0, r4
 800e72a:	7843      	ldrb	r3, [r0, #1]
 800e72c:	f013 0308 	ands.w	r3, r3, #8
 800e730:	d132      	bne.n	800e798 <_strtol_l.isra.0+0x8a>
 800e732:	2c2d      	cmp	r4, #45	; 0x2d
 800e734:	d132      	bne.n	800e79c <_strtol_l.isra.0+0x8e>
 800e736:	2201      	movs	r2, #1
 800e738:	787c      	ldrb	r4, [r7, #1]
 800e73a:	1cbd      	adds	r5, r7, #2
 800e73c:	2e00      	cmp	r6, #0
 800e73e:	d05d      	beq.n	800e7fc <_strtol_l.isra.0+0xee>
 800e740:	2e10      	cmp	r6, #16
 800e742:	d109      	bne.n	800e758 <_strtol_l.isra.0+0x4a>
 800e744:	2c30      	cmp	r4, #48	; 0x30
 800e746:	d107      	bne.n	800e758 <_strtol_l.isra.0+0x4a>
 800e748:	782b      	ldrb	r3, [r5, #0]
 800e74a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e74e:	2b58      	cmp	r3, #88	; 0x58
 800e750:	d14f      	bne.n	800e7f2 <_strtol_l.isra.0+0xe4>
 800e752:	2610      	movs	r6, #16
 800e754:	786c      	ldrb	r4, [r5, #1]
 800e756:	3502      	adds	r5, #2
 800e758:	2a00      	cmp	r2, #0
 800e75a:	bf14      	ite	ne
 800e75c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e760:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e764:	2700      	movs	r7, #0
 800e766:	fbb1 fcf6 	udiv	ip, r1, r6
 800e76a:	4638      	mov	r0, r7
 800e76c:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e770:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e774:	2b09      	cmp	r3, #9
 800e776:	d817      	bhi.n	800e7a8 <_strtol_l.isra.0+0x9a>
 800e778:	461c      	mov	r4, r3
 800e77a:	42a6      	cmp	r6, r4
 800e77c:	dd23      	ble.n	800e7c6 <_strtol_l.isra.0+0xb8>
 800e77e:	1c7b      	adds	r3, r7, #1
 800e780:	d007      	beq.n	800e792 <_strtol_l.isra.0+0x84>
 800e782:	4584      	cmp	ip, r0
 800e784:	d31c      	bcc.n	800e7c0 <_strtol_l.isra.0+0xb2>
 800e786:	d101      	bne.n	800e78c <_strtol_l.isra.0+0x7e>
 800e788:	45a6      	cmp	lr, r4
 800e78a:	db19      	blt.n	800e7c0 <_strtol_l.isra.0+0xb2>
 800e78c:	2701      	movs	r7, #1
 800e78e:	fb00 4006 	mla	r0, r0, r6, r4
 800e792:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e796:	e7eb      	b.n	800e770 <_strtol_l.isra.0+0x62>
 800e798:	462f      	mov	r7, r5
 800e79a:	e7bf      	b.n	800e71c <_strtol_l.isra.0+0xe>
 800e79c:	2c2b      	cmp	r4, #43	; 0x2b
 800e79e:	bf04      	itt	eq
 800e7a0:	1cbd      	addeq	r5, r7, #2
 800e7a2:	787c      	ldrbeq	r4, [r7, #1]
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	e7c9      	b.n	800e73c <_strtol_l.isra.0+0x2e>
 800e7a8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e7ac:	2b19      	cmp	r3, #25
 800e7ae:	d801      	bhi.n	800e7b4 <_strtol_l.isra.0+0xa6>
 800e7b0:	3c37      	subs	r4, #55	; 0x37
 800e7b2:	e7e2      	b.n	800e77a <_strtol_l.isra.0+0x6c>
 800e7b4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e7b8:	2b19      	cmp	r3, #25
 800e7ba:	d804      	bhi.n	800e7c6 <_strtol_l.isra.0+0xb8>
 800e7bc:	3c57      	subs	r4, #87	; 0x57
 800e7be:	e7dc      	b.n	800e77a <_strtol_l.isra.0+0x6c>
 800e7c0:	f04f 37ff 	mov.w	r7, #4294967295
 800e7c4:	e7e5      	b.n	800e792 <_strtol_l.isra.0+0x84>
 800e7c6:	1c7b      	adds	r3, r7, #1
 800e7c8:	d108      	bne.n	800e7dc <_strtol_l.isra.0+0xce>
 800e7ca:	2322      	movs	r3, #34	; 0x22
 800e7cc:	4608      	mov	r0, r1
 800e7ce:	f8c8 3000 	str.w	r3, [r8]
 800e7d2:	f1ba 0f00 	cmp.w	sl, #0
 800e7d6:	d107      	bne.n	800e7e8 <_strtol_l.isra.0+0xda>
 800e7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7dc:	b102      	cbz	r2, 800e7e0 <_strtol_l.isra.0+0xd2>
 800e7de:	4240      	negs	r0, r0
 800e7e0:	f1ba 0f00 	cmp.w	sl, #0
 800e7e4:	d0f8      	beq.n	800e7d8 <_strtol_l.isra.0+0xca>
 800e7e6:	b10f      	cbz	r7, 800e7ec <_strtol_l.isra.0+0xde>
 800e7e8:	f105 39ff 	add.w	r9, r5, #4294967295
 800e7ec:	f8ca 9000 	str.w	r9, [sl]
 800e7f0:	e7f2      	b.n	800e7d8 <_strtol_l.isra.0+0xca>
 800e7f2:	2430      	movs	r4, #48	; 0x30
 800e7f4:	2e00      	cmp	r6, #0
 800e7f6:	d1af      	bne.n	800e758 <_strtol_l.isra.0+0x4a>
 800e7f8:	2608      	movs	r6, #8
 800e7fa:	e7ad      	b.n	800e758 <_strtol_l.isra.0+0x4a>
 800e7fc:	2c30      	cmp	r4, #48	; 0x30
 800e7fe:	d0a3      	beq.n	800e748 <_strtol_l.isra.0+0x3a>
 800e800:	260a      	movs	r6, #10
 800e802:	e7a9      	b.n	800e758 <_strtol_l.isra.0+0x4a>

0800e804 <_strtol_r>:
 800e804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e806:	4c06      	ldr	r4, [pc, #24]	; (800e820 <_strtol_r+0x1c>)
 800e808:	4d06      	ldr	r5, [pc, #24]	; (800e824 <_strtol_r+0x20>)
 800e80a:	6824      	ldr	r4, [r4, #0]
 800e80c:	6a24      	ldr	r4, [r4, #32]
 800e80e:	2c00      	cmp	r4, #0
 800e810:	bf08      	it	eq
 800e812:	462c      	moveq	r4, r5
 800e814:	9400      	str	r4, [sp, #0]
 800e816:	f7ff ff7a 	bl	800e70e <_strtol_l.isra.0>
 800e81a:	b003      	add	sp, #12
 800e81c:	bd30      	pop	{r4, r5, pc}
 800e81e:	bf00      	nop
 800e820:	20000220 	.word	0x20000220
 800e824:	20000284 	.word	0x20000284

0800e828 <__submore>:
 800e828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e82c:	460c      	mov	r4, r1
 800e82e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e834:	4299      	cmp	r1, r3
 800e836:	d11b      	bne.n	800e870 <__submore+0x48>
 800e838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e83c:	f7ff f8f0 	bl	800da20 <_malloc_r>
 800e840:	b918      	cbnz	r0, 800e84a <__submore+0x22>
 800e842:	f04f 30ff 	mov.w	r0, #4294967295
 800e846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e84a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e84e:	63a3      	str	r3, [r4, #56]	; 0x38
 800e850:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e854:	6360      	str	r0, [r4, #52]	; 0x34
 800e856:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e85a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e85e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e862:	7043      	strb	r3, [r0, #1]
 800e864:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e868:	7003      	strb	r3, [r0, #0]
 800e86a:	6020      	str	r0, [r4, #0]
 800e86c:	2000      	movs	r0, #0
 800e86e:	e7ea      	b.n	800e846 <__submore+0x1e>
 800e870:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e872:	0077      	lsls	r7, r6, #1
 800e874:	463a      	mov	r2, r7
 800e876:	f000 f81f 	bl	800e8b8 <_realloc_r>
 800e87a:	4605      	mov	r5, r0
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d0e0      	beq.n	800e842 <__submore+0x1a>
 800e880:	eb00 0806 	add.w	r8, r0, r6
 800e884:	4601      	mov	r1, r0
 800e886:	4632      	mov	r2, r6
 800e888:	4640      	mov	r0, r8
 800e88a:	f7fe feb1 	bl	800d5f0 <memcpy>
 800e88e:	f8c4 8000 	str.w	r8, [r4]
 800e892:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e896:	e7e9      	b.n	800e86c <__submore+0x44>

0800e898 <memchr>:
 800e898:	b510      	push	{r4, lr}
 800e89a:	b2c9      	uxtb	r1, r1
 800e89c:	4402      	add	r2, r0
 800e89e:	4290      	cmp	r0, r2
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	d101      	bne.n	800e8a8 <memchr+0x10>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	e003      	b.n	800e8b0 <memchr+0x18>
 800e8a8:	781c      	ldrb	r4, [r3, #0]
 800e8aa:	3001      	adds	r0, #1
 800e8ac:	428c      	cmp	r4, r1
 800e8ae:	d1f6      	bne.n	800e89e <memchr+0x6>
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	bd10      	pop	{r4, pc}

0800e8b4 <__malloc_lock>:
 800e8b4:	4770      	bx	lr

0800e8b6 <__malloc_unlock>:
 800e8b6:	4770      	bx	lr

0800e8b8 <_realloc_r>:
 800e8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ba:	4607      	mov	r7, r0
 800e8bc:	4614      	mov	r4, r2
 800e8be:	460e      	mov	r6, r1
 800e8c0:	b921      	cbnz	r1, 800e8cc <_realloc_r+0x14>
 800e8c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	f7ff b8aa 	b.w	800da20 <_malloc_r>
 800e8cc:	b922      	cbnz	r2, 800e8d8 <_realloc_r+0x20>
 800e8ce:	f7ff f85b 	bl	800d988 <_free_r>
 800e8d2:	4625      	mov	r5, r4
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8d8:	f000 f814 	bl	800e904 <_malloc_usable_size_r>
 800e8dc:	42a0      	cmp	r0, r4
 800e8de:	d20f      	bcs.n	800e900 <_realloc_r+0x48>
 800e8e0:	4621      	mov	r1, r4
 800e8e2:	4638      	mov	r0, r7
 800e8e4:	f7ff f89c 	bl	800da20 <_malloc_r>
 800e8e8:	4605      	mov	r5, r0
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d0f2      	beq.n	800e8d4 <_realloc_r+0x1c>
 800e8ee:	4631      	mov	r1, r6
 800e8f0:	4622      	mov	r2, r4
 800e8f2:	f7fe fe7d 	bl	800d5f0 <memcpy>
 800e8f6:	4631      	mov	r1, r6
 800e8f8:	4638      	mov	r0, r7
 800e8fa:	f7ff f845 	bl	800d988 <_free_r>
 800e8fe:	e7e9      	b.n	800e8d4 <_realloc_r+0x1c>
 800e900:	4635      	mov	r5, r6
 800e902:	e7e7      	b.n	800e8d4 <_realloc_r+0x1c>

0800e904 <_malloc_usable_size_r>:
 800e904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e908:	1f18      	subs	r0, r3, #4
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	bfbc      	itt	lt
 800e90e:	580b      	ldrlt	r3, [r1, r0]
 800e910:	18c0      	addlt	r0, r0, r3
 800e912:	4770      	bx	lr

0800e914 <_init>:
 800e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e916:	bf00      	nop
 800e918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e91a:	bc08      	pop	{r3}
 800e91c:	469e      	mov	lr, r3
 800e91e:	4770      	bx	lr

0800e920 <_fini>:
 800e920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e922:	bf00      	nop
 800e924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e926:	bc08      	pop	{r3}
 800e928:	469e      	mov	lr, r3
 800e92a:	4770      	bx	lr
